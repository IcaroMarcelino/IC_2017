g = Diametros$D1
m<-mean(g)
std<-sqrt(var(g))
hist(g, density=20, breaks=2, prob=TRUE,
xlab="Y (mm)", ylab="Densidade de Probabilidade", xlim = c(20,20.5),
main="Medidas na dimensão Y da moldura")
curve(dnorm(x, mean=m, sd=std),
col="darkblue", lwd=2, add=TRUE, yaxt="n")
abline(v=20, lty = 2, col = "blue", lwd = 3)
abline(v=20.5, lty = 2, col = "blue", lwd = 3)
g = Diametros$D1
m<-mean(g)
std<-sqrt(var(g))
hist(g, density=20, breaks=2, prob=TRUE,
xlab="Y (mm)", ylab="Densidade de Probabilidade", xlim = c(19.5,20.5),
main="Medidas na dimensão Y da moldura")
curve(dnorm(x, mean=m, sd=std),
col="darkblue", lwd=2, add=TRUE, yaxt="n")
abline(v=20.5, lty = 2, col = "blue", lwd = 3)
abline(v=19.5, lty = 2, col = "blue", lwd = 3)
abline(v=19.6, lty = 2, col = "red", lwd = 3)
abline(v=20.4, lty = 2, col = "red", lwd = 3)
0.8/(6*std)
abline(v=20.3, lty = 2, col = "red", lwd = 3)
0.6/(6*std)
g = Diametros$D1
m<-mean(g)
std<-sqrt(var(g))
hist(g, density=20, breaks=2, prob=TRUE,
xlab="Diâmetro (mm)", ylab="Densidade de Probabilidade", xlim = c(19.5,20.5),
main="Diâmetro 1")
curve(dnorm(x, mean=m, sd=std),
col="darkblue", lwd=2, add=TRUE, yaxt="n")
abline(v=20.5, lty = 2, col = "blue", lwd = 3)
abline(v=19.5, lty = 2, col = "blue", lwd = 3)
g = Diametros$D2
m<-mean(g)
std<-sqrt(var(g))
hist(g, density=20, breaks=2, prob=TRUE,
xlab="Diâmetro (mm)", ylab="Densidade de Probabilidade", xlim = c(29.5,30.5),
main="Diâmetro 2")
curve(dnorm(x, mean=m, sd=std),
col="darkblue", lwd=2, add=TRUE, yaxt="n")
abline(v=29.5, lty = 2, col = "blue", lwd = 3)
abline(v=30.5, lty = 2, col = "blue", lwd = 3)
abline(v=29.8, lty = 2, col = "red", lwd = 3)
abline(v=30.2, lty = 2, col = "red", lwd = 3)
g = Diametros$D3
m<-mean(g)
std<-sqrt(var(g))
hist(g, density=20, breaks=2, prob=TRUE,
xlab="Diâmetro (mm)", ylab="Densidade de Probabilidade", xlim = c(29.5,30.5),
main="Diâmetro 3")
curve(dnorm(x, mean=m, sd=std),
col="darkblue", lwd=2, add=TRUE, yaxt="n")
g = Diametros$D3
m<-mean(g)
std<-sqrt(var(g))
hist(g, density=20, breaks=2, prob=TRUE,
xlab="Diâmetro (mm)", ylab="Densidade de Probabilidade", xlim = c(39.5,40.5),
main="Diâmetro 3")
curve(dnorm(x, mean=m, sd=std),
col="darkblue", lwd=2, add=TRUE, yaxt="n")
g = Diametros$D3
m<-mean(g)
std<-sqrt(var(g))
hist(g, density=20, breaks=2, prob=TRUE,
xlab="Diâmetro (mm)", ylab="Densidade de Probabilidade", xlim = c(39,40.5),
main="Diâmetro 3")
curve(dnorm(x, mean=m, sd=std),
col="darkblue", lwd=2, add=TRUE, yaxt="n")
2/(6*std)
plot(Diametros$Medida, Diametros$D3)
points(Diametros$Medida, Diametros$D2)
plot(Diametros$Medida, Diametros$D3, ylim = c(0,40))
points(Diametros$Medida, Diametros$D2)
points(Diametros$Medida, Diametros$D1)
plot(Diametros$D3, c(40,40,40,40,40,40,40), ylim = c(0,40))
plot(c(40,40,40,40,40,40,40), Diametros$D3, ylim = c(0,40))
plot(c(40,40,40,40,40,40,40), Diametros$D3, xlim = c(0,45))
plot(c(40,40,40,40,40,40,40), Diametros$D3, ylim = c(0,40), xlim=c(0,45))
plot(c(30,30,30,30,30,30,30), Diametros$D2, ylim = c(0,40), xlim=c(0,45))
plot(c(40,40,40,40,40,40,40), Diametros$D3, ylim = c(0,40), xlim=c(0,45))
points(c(30,30,30,30,30,30,30), Diametros$D2, ylim = c(0,40), xlim=c(0,45))
points(c(20,20,20,20,20,20,20), Diametros$D1, ylim = c(0,40), xlim=c(0,45))
points(c(5,5,5,5,5,5,5), Diametros$D1, ylim = c(0,40), xlim=c(0,45))
points(c(2.5,2.5,2.5,2.5,2.5,2.5,2.5), Diametros$D1, ylim = c(0,40), xlim=c(0,45))
points(c(16,16,16,16,16,16,16), Diametros$D2, ylim = c(0,40), xlim=c(0,45))
plot(c(67,67,67,67,67,67,67), Diametros$D3, ylim = c(0,40), xlim=c(0,45))
plot(c(67,67,67,67,67,67,67), Diametros$D3, ylim = c(20,40), xlim=c(0,100))
points(c(16,16,16,16,16,16,16), Diametros$D2, ylim = c(20,40), xlim=c(0,100))
points(c(2.5,2.5,2.5,2.5,2.5,2.5,2.5), Diametros$D1, ylim = c(20,40), xlim=c(0,100))
lm(Diametros$D1~Diametros$Medida)
lm(Diametros$D2~Diametros$Medida)
lm(Diametros$D3~Diametros$Medida)
lm(Diametros$D1~Diametros$Medida)
lm(Diametros$D1~c(2.5,2.5,2.5,2.5,2.5,2.5,2.5))
tttt<-c(2.5,2.5,2.5,2.5,2.5,2.5,2.5)
lm(Diametros$D1~tttt)
tttt
lm(Diametros$D1~as.numeric(tttt))
lm(Diametros$D1~1)
lm(tttt~Diametros$D1)
plot(tttt,Diametros$D1)
plot(Diametros$D1~tttt)
plot(Diametros$D1~tttt)
plot(Diametros$D1,tttt)
g = Diametros$D3
m<-mean(g)
std<-sqrt(var(g))
hist(g, density=20, breaks=2, prob=TRUE,
xlab="Diâmetro (mm)", ylab="Densidade de Probabilidade", xlim = c(29.5,30.5),
main="Diâmetro 3")
curve(dnorm(x, mean=m, sd=std),
col="darkblue", lwd=2, add=TRUE, yaxt="n")
g = Diametros$D3
m<-mean(g)
std<-sqrt(var(g))
hist(g, density=20, breaks=2, prob=TRUE,
xlab="Diâmetro (mm)", ylab="Densidade de Probabilidade", xlim = c(39,40.5),
main="Diâmetro 3")
curve(dnorm(x, mean=m, sd=std),
col="darkblue", lwd=2, add=TRUE, yaxt="n")
g = Diametros$D3
m<-mean(g)
std<-sqrt(var(g))
hist(g, density=20, breaks=2, prob=TRUE,
xlab="Diâmetro (mm)", ylab="Densidade de Probabilidade", xlim = c(39,40.5), ylim = c(0,9),
main="Diâmetro 3")
curve(dnorm(x, mean=m, sd=std),
col="darkblue", lwd=2, add=TRUE, yaxt="n")
g = Diametros$D3
m<-mean(g)
std<-sqrt(var(g))
hist(g, density=20, breaks=2, prob=TRUE,
xlab="Diâmetro (mm)", ylab="Densidade de Probabilidade", xlim = c(39,40.5), ylim = c(0,12),
main="Diâmetro 3")
curve(dnorm(x, mean=m, sd=std),
col="darkblue", lwd=2, add=TRUE, yaxt="n")
g = Diametros$D3
m<-mean(g)
std<-sqrt(var(g))
hist(g, density=20, breaks=2, prob=TRUE,
xlab="Diâmetro (mm)", ylab="Densidade de Probabilidade", xlim = c(39,41), ylim = c(0,12),
main="Diâmetro 3")
curve(dnorm(x, mean=m, sd=std),
col="darkblue", lwd=2, add=TRUE, yaxt="n")
abline(v=41, lty = 2, col = "blue", lwd = 3)
abline(v=39, lty = 2, col = "blue", lwd = 3)
abline(v=39.5, lty = 2, col = "blue", lwd = 3)
abline(v=40.5, lty = 2, col = "blue", lwd = 3)
abline(v=41, lty = 2, col = "red", lwd = 3)
abline(v=39, lty = 2, col = "red", lwd = 3)
g = Diametros$D1
m<-mean(g)
std<-sqrt(var(g))
hist(g, density=20, breaks=2, prob=TRUE,
xlab="Diâmetro (mm)", ylab="Densidade de Probabilidade", xlim = c(39,41), ylim = c(0,12),
main="Diâmetro 3")
curve(dnorm(x, mean=m, sd=std),
col="darkblue", lwd=2, add=TRUE, yaxt="n")
g = Diametros$D1
m<-mean(g)
std<-sqrt(var(g))
hist(g, density=20, breaks=2, prob=TRUE,
xlab="Diâmetro (mm)", ylab="Densidade de Probabilidade", xlim = c(19.5,20.5),
main="Diâmetro 1")
curve(dnorm(x, mean=m, sd=std),
col="darkblue", lwd=2, add=TRUE, yaxt="n")
abline(v=19.5, lty = 2, col = "blue", lwd = 3)
abline(v=20.5, lty = 2, col = "blue", lwd = 3)
abline(v=20.4, lty = 2, col = "red", lwd = 3)
abline(v=19.6, lty = 2, col = "red", lwd = 3)
library(readr)
t <- read_csv("~/t.csv", col_names = FALSE)
View(t)
plot(t$X1, t$X2)
plot(t$X1, t$X2)
plot(t$X1, t$X2,pch=19)
lm(t$X1, t$X2)
lm(t$X1~t$X2)
lm(t$X2~t$X1)
m0<-lm(t$X2~t$X1)
abline(m0, col=2, lty=2, lwd=2)
plot(t$X1, t$X2,pch=19, main = "Desvios no Diâmetro", xlab="Comprimento (mm)", ylab="Desvio")
plot(t$X1, t$X2,pch=19, main = "Desvios no Diâmetro", xlab="Comprimento (mm)", ylab="Desvio (mm)")
abline(m0, col=2, lty=2, lwd=2)
legend("topleft", legend=c("Valores observados", "0.01618x - 0.26165"),
lty=c(NA,2), col=c(1,2), lwd=1:2, bty="n", pch=c(1,NA))
legend("topleft", legend=c("Valores observados", "0.01618x - 0.26165"),
lty=c(NA,2), col=c(1,2), lwd=1:2, bty="n", pch=c(19,NA))
abline(h = 0, col="blue", lty=2, lwd=2)
legend("topleft", legend=c("Valores observados", "0.01618x - 0.26165", "Desvio Ideal"),
lty=c(NA,2,2), col=c(1,2,"blue"), lwd=1:3, bty="n", pch=c(19,NA,NA))
mo[2]
m0[2]
m0
m0$coefficients[2]
a <- as.numeric(m0$coefficients[2])
a
atan(a)
atan(a)*180/pi
atan(a)*pi/180
atan(a)*180/pi
180/pi
f <- file("/dev/cu.usbmodem3a21", open="r")
nObs <- 50
Temperature <- rep(NA, nObs)
cycle <- 0
while(cycle<10){
time <- ((cycle*nObs):((cycle+1)*(nObs)))[-1]
plot(Temperature ~ time, t="n", ylim=c(18, 24),
main="Data stream from Arduino via USB port")
for(i in 1:nObs){
Temperature[i] <- scan(f, n=1, quiet=TRUE)
points(i + cycle*nObs, Temperature[i], pch=19)
Sys.sleep(0.05)
}
cycle <- cycle + 1
}
close(f)
x<-runif(50,1,120)
1.3%4
x<-sample(1:120,50)
x
a<-1:120
a
a<-1/a
a
sum(a[1:1])
sum(a[1:2])
plot(x, a[1:x])
plot(x, sum(a[1:x]))
y<- sum(a[1:x])
i=0
i=1
for i in range(1,50):
while(i<=50){
y[i]=sum(a[1:x[i]])
i=i+1
}
plot(x,y)
plot(x,y, main = "Função 3")
plot(x,y, main = "Função 3 - 50 Amostras")
x<-runif(50,0,2)
y<-log(1+x)+log(1+x^2)
plot(x,y, main = "Função 5 - 50 Amostras")
setwd("C:/Users/Ícaro/Dropbox/PIBIC/IC_2017/Experimento_02")
load("C:/Users/Ícaro/Dropbox/PIBIC/IC_2017/Experimento_02/dadosR.RData")
gp_f1 <- read.csv("GP/Result_GP_EXP2_FUNC_1.csv", quote ="", header=FALSE)
gp_f1 <- gp_f1[which(gp_f1[5] != Inf), ]
gp_f1 <- gp_f1[which(gp_f1[5] != 'NaN'), ]
gp_f2 <- read.csv("GP/Result_GP_EXP2_FUNC_2.csv", quote ="", header=FALSE)
gp_f2 <- gp_f2[which(gp_f2[5] != Inf), ]
gp_f2 <- gp_f2[which(gp_f2[5] != 'NaN'), ]
gp_f3 <- read.csv("GP/Result_GP_EXP2_FUNC_3.csv", quote ="", header=FALSE)
gp_f3 <- gp_f3[which(gp_f3[5] != Inf), ]
gp_f3 <- gp_f3[which(gp_f3[5] != 'NaN'), ]
gp_f4 <- read.csv("GP/Result_GP_EXP2_FUNC_4.csv", quote ="", header=FALSE)
gp_f4 <- gp_f4[which(gp_f4[5] != Inf), ]
gp_f4 <- gp_f4[which(gp_f4[5] != 'NaN'), ]
gp_f5 <- read.csv("GP/Result_GP_EXP2_FUNC_5.csv", quote ="", header=FALSE)
gp_f5 <- gp_f5[which(gp_f5[5] != Inf), ]
gp_f5 <- gp_f5[which(gp_f5[5] != 'NaN'), ]
gpa_f1 <- read.csv("GP/Result_GP_EXP2_FUNC_1_Alea.csv", quote ="", header=FALSE)
gpa_f1 <- gpa_f1[which(gpa_f1[5] != Inf), ]
gpa_f1 <- gpa_f1[which(gpa_f1[5] != 'NaN'), ]
gpa_f2 <- read.csv("GP/Result_GP_EXP2_FUNC_2_Alea.csv", quote ="", header=FALSE)
gpa_f2 <- gpa_f2[which(gpa_f2[5] != Inf), ]
gpa_f2 <- gpa_f2[which(gpa_f2[5] != 'NaN'), ]
gpa_f3 <- read.csv("GP/Result_GP_EXP2_FUNC_3_Alea.csv", quote ="", header=FALSE)
gpa_f3 <- gpa_f3[which(gpa_f3[5] != Inf), ]
gpa_f3 <- gpa_f3[which(gpa_f3[5] != 'NaN'), ]
gpa_f4 <- read.csv("GP/Result_GP_EXP2_FUNC_4_Alea.csv", quote ="", header=FALSE)
gpa_f4 <- gpa_f4[which(gpa_f4[5] != Inf), ]
gpa_f4 <- gpa_f4[which(gpa_f4[5] != 'NaN'), ]
gpa_f5 <- read.csv("GP/Result_GP_EXP2_FUNC_5_Alea.csv", quote ="", header=FALSE)
gpa_f5 <- gpa_f5[which(gpa_f5[5] != Inf), ]
gpa_f5 <- gpa_f5[which(gpa_f5[5] != 'NaN'), ]
#GP Reduzido
gpr_f1 <- read.csv("GP/Result_GP_EXP2_FUNC_1_Reduzido.csv", quote ="", header=FALSE)
gpr_f1 <- gpr_f1[which(gpr_f1[5] != Inf), ]
gpr_f1 <- gpr_f1[which(gpr_f1[5] != 'NaN'), ]
gpr_f2 <- read.csv("GP/Result_GP_EXP2_FUNC_2_Reduzido.csv", quote ="", header=FALSE)
gpr_f2 <- gpr_f2[which(gpr_f2[5] != Inf), ]
gpr_f2 <- gpr_f2[which(gpr_f2[5] != 'NaN'), ]
gpr_f3 <- read.csv("GP/Result_GP_EXP2_FUNC_3_Reduzido.csv", quote ="", header=FALSE)
gpr_f3 <- gpr_f3[which(gpr_f3[5] != Inf), ]
gpr_f3 <- gpr_f3[which(gpr_f3[5] != 'NaN'), ]
gpr_f4 <- read.csv("GP/Result_GP_EXP2_FUNC_4_Reduzido.csv", quote ="", header=FALSE)
gpr_f4 <- gpr_f4[which(gpr_f4[5] != Inf), ]
gpr_f4 <- gpr_f4[which(gpr_f4[5] != 'NaN'), ]
gpr_f5 <- read.csv("GP/Result_GP_EXP2_FUNC_5_Reduzido.csv", quote ="", header=FALSE)
gpr_f5 <- gpr_f5[which(gpr_f5[5] != Inf), ]
gpr_f5 <- gpr_f5[which(gpr_f5[5] != 'NaN'), ]
gpra_f1 <- read.csv("GP/Result_GP_EXP2_FUNC_1_Reduzido_Alea.csv", quote ="", header=FALSE)
gpra_f1 <- gpra_f1[which(gpra_f1[5] != Inf), ]
gpra_f1 <- gpra_f1[which(gpra_f1[5] != 'NaN'), ]
gpra_f2 <- read.csv("GP/Result_GP_EXP2_FUNC_2_Reduzido_Alea.csv", quote ="", header=FALSE)
gpra_f2 <- gpra_f2[which(gpra_f2[5] != Inf), ]
gpra_f2 <- gpra_f2[which(gpra_f2[5] != 'NaN'), ]
gpra_f3 <- read.csv("GP/Result_GP_EXP2_FUNC_3_Reduzido_Alea.csv", quote ="", header=FALSE)
gpra_f3 <- gpra_f3[which(gpra_f3[5] != Inf), ]
gpra_f3 <- gpra_f3[which(gpra_f3[5] != 'NaN'), ]
gpra_f4 <- read.csv("GP/Result_GP_EXP2_FUNC_4_Reduzido_Alea.csv", quote ="", header=FALSE)
gpra_f4 <- gpra_f4[which(gpra_f4[5] != Inf), ]
gpra_f4 <- gpra_f4[which(gpra_f4[5] != 'NaN'), ]
gpra_f5 <- read.csv("GP/Result_GP_EXP2_FUNC_5_Reduzido_Alea.csv", quote ="", header=FALSE)
gpra_f5 <- gpra_f5[which(gpra_f5[5] != Inf), ]
gpra_f5 <- gpra_f5[which(gpra_f5[5] != 'NaN'), ]
boxplot(as.numeric(unlist(gpr_f5[5]*100))~as.numeric(unlist(gpr_f5[2]))*as.numeric(unlist(gpr_f5[1])), las = 2, ylim=(c(0,70)), border = "blue", col = rgb(0.5,0.5,1, alpha = 0.5), main = "Genetic Programming\nFunção 5 - GP Reduzido", ylab = "Erro percentual (%)")
boxplot(as.numeric(unlist(gpra_f5[5]*100))~as.numeric(unlist(gpra_f5[2]))*as.numeric(unlist(gpra_f5[1])), las = 2, ylim=(c(0,70)),  border = "red", col = rgb(1,0.5,0.5, alpha = 0.5), add= TRUE)
boxplot(as.numeric(unlist(gp_f5[4]))~as.numeric(unlist(gp_f5[2]))*as.numeric(unlist(gp_f5[1])), las = 2, ylim=(c(0,.002)), border = "blue", col = rgb(0.5,0.5,1, alpha = 0.5), main = "Genetic Programming\nFunção 5", ylab = "")
boxplot(as.numeric(unlist(gpa_f5[4]))~as.numeric(unlist(gpa_f5[2]))*as.numeric(unlist(gpa_f5[1])), las = 2, ylim=(c(0,.002)), border = "red", col = rgb(1,0.5,0.5, alpha = 0.5), add= TRUE)
boxplot(as.numeric(unlist(gp_f5[5]*100))~as.numeric(unlist(gp_f5[2]))*as.numeric(unlist(gp_f5[1])), las = 2, ylim=(c(0,70)), border = "blue", col = rgb(0.5,0.5,1, alpha = 0.5), main = "Genetic Programming\nFunção 5", ylab = "Erro percentual (%)")
boxplot(as.numeric(unlist(gpa_f5[5]*100))~as.numeric(unlist(gpa_f5[2]))*as.numeric(unlist(gpa_f5[1])), las = 2, ylim=(c(0,70)), border = "red", col = rgb(1,0.5,0.5, alpha = 0.5), add= TRUE)
View(gpa_f5)
gpa_f5<-gpa_f5[-c(which(gpa_f5[1] == 68))]
gp_f5<-gp_f5[-c(which(gp_f5[1] == 68))]
gpr_f5<-gpr_f5[-c(which(gpr_f5[1] == 68))]
gpra_f5<-gpr_f5[-c(which(gpra_f5[1] == 68))]
gpra_f5 <- read.csv("GP/Result_GP_EXP2_FUNC_5_Reduzido_Alea.csv", quote ="", header=FALSE)
gpra_f5 <- gpra_f5[which(gpra_f5[5] != Inf), ]
gpra_f5 <- gpra_f5[which(gpra_f5[5] != 'NaN'), ]
gpra_f5<-gpra_f5[-c(which(gpra_f5[1] == 68))]
View(gpra_f5)
gpra_f5[2]<-ceil(gpra_f5[2]/.700001)
gpra_f5[2]<-ceiling(gpra_f5[2]/.700001)
gpr_f5[2]<-ceiling(gpr_f5[2]/.700001)
gp_f5[2]<-ceiling(gp_f5[2]/.700001)
gpa_f5[2]<-ceiling(gpa_f5[2]/.700001)
gpra_f5<-gpra_f5[-c(which(gpra_f5[2] == 1600))]
gpra_f5<-gpra_f5[-c(which(gpra_f5[2] == 1600)),]
gpr_f5<-gpr_f5[-c(which(gpr_f5[2] == 1600)),]
gpr_f5 <- read.csv("GP/Result_GP_EXP2_FUNC_5_Reduzido.csv", quote ="", header=FALSE)
gpr_f5 <- gpr_f5[which(gpr_f5[5] != Inf), ]
gpr_f5 <- gpr_f5[which(gpr_f5[5] != 'NaN'), ]
gpr_f5[2]<-ceiling(gpr_f5[2]/.700001)
gpra_f5<-gpr_f5[-c(which(gpra_f5[2] == 1600)),]
gpra_f5 <- read.csv("GP/Result_GP_EXP2_FUNC_5_Reduzido_Alea.csv", quote ="", header=FALSE)
gpra_f5 <- gpra_f5[which(gpra_f5[5] != Inf), ]
gpra_f5 <- gpra_f5[which(gpra_f5[5] != 'NaN'), ]
gpra_f5<-gpra_f5[-c(which(gpra_f5[2] == 1600)),]
gpra_f5 <- read.csv("GP/Result_GP_EXP2_FUNC_5_Reduzido_Alea.csv", quote ="", header=FALSE)
gpra_f5 <- gpra_f5[which(gpra_f5[5] != Inf), ]
gpra_f5 <- gpra_f5[which(gpra_f5[5] != 'NaN'), ]
gpra_f5[2]<-ceiling(gpra_f5[2]/.700001)
gpra_f5<-gpra_f5[-c(which(gpra_f5[2] == 1600)),]
gpa_f5<-gpa_f5[-c(which(gpa_f5[2] == 1600)),]
View(gp_f5)
View(gpr_f5)
gpra_f5<-gpra_f5[-c(which(gpra_f5[1] == 68)),]
gpa_f5<-gpa_f5[-c(which(gpa_f5[1] == 68)),]
gp_f5<-gp_f5[-c(which(gp_f5[1] == 68)),]
gpr_f5<-gpr_f5[-c(which(gpr_f5[1] == 68)),]
boxplot(as.numeric(unlist(gp_f5[5]*100))~as.numeric(unlist(gp_f5[2]))*as.numeric(unlist(gp_f5[1])), las = 2, ylim=(c(0,70)), border = "blue", col = rgb(0.5,0.5,1, alpha = 0.5), main = "Genetic Programming\nFunção 5", ylab = "Erro percentual (%)")
boxplot(as.numeric(unlist(gpa_f5[5]*100))~as.numeric(unlist(gpa_f5[2]))*as.numeric(unlist(gpa_f5[1])), las = 2, ylim=(c(0,70)), border = "red", col = rgb(1,0.5,0.5, alpha = 0.5), add= TRUE)
boxplot(as.numeric(unlist(gp_f5[5]*100))~as.numeric(unlist(gp_f5[2]))*as.numeric(unlist(gp_f5[1])), las = 2, ylim=(c(0,20)), border = "blue", col = rgb(0.5,0.5,1, alpha = 0.5), main = "Genetic Programming\nFunção 5", ylab = "Erro percentual (%)")
boxplot(as.numeric(unlist(gpa_f5[5]*100))~as.numeric(unlist(gpa_f5[2]))*as.numeric(unlist(gpa_f5[1])), las = 2, ylim=(c(0,20)), border = "red", col = rgb(1,0.5,0.5, alpha = 0.5), add= TRUE)
boxplot(as.numeric(unlist(gpr_f5[5]*100))~as.numeric(unlist(gpr_f5[2]))*as.numeric(unlist(gpr_f5[1])), las = 2, ylim=(c(0,70)), border = "blue", col = rgb(0.5,0.5,1, alpha = 0.5), main = "Genetic Programming\nFunção 5 - GP Reduzido", ylab = "Erro percentual (%)")
boxplot(as.numeric(unlist(gpra_f5[5]*100))~as.numeric(unlist(gpra_f5[2]))*as.numeric(unlist(gpra_f5[1])), las = 2, ylim=(c(0,70)),  border = "red", col = rgb(1,0.5,0.5, alpha = 0.5), add= TRUE)
boxplot(as.numeric(unlist(gpr_f5[5]*100))~as.numeric(unlist(gpr_f5[2]))*as.numeric(unlist(gpr_f5[1])), las = 2, ylim=(c(0,20)), border = "blue", col = rgb(0.5,0.5,1, alpha = 0.5), main = "Genetic Programming\nFunção 5 - GP Reduzido", ylab = "Erro percentual (%)")
boxplot(as.numeric(unlist(gpra_f5[5]*100))~as.numeric(unlist(gpra_f5[2]))*as.numeric(unlist(gpra_f5[1])), las = 2, ylim=(c(0,20)),  border = "red", col = rgb(1,0.5,0.5, alpha = 0.5), add= TRUE)
par(mfrow = c(1,2))
par(mfrow = c(1,2))
View(gp_f5)
boxplot(as.numeric(unlist(gp_f5[5]*100))~as.numeric(unlist(gp_f5[2]))*as.numeric(unlist(gp_f5[1])), las = 2, ylim=(c(0,20)), border = "blue", col = rgb(0.5,0.5,1, alpha = 0.5), main = "Genetic Programming\nFunção 5", ylab = "Erro percentual (%)")
boxplot(as.numeric(unlist(gpa_f5[5]*100))~as.numeric(unlist(gpa_f5[2]))*as.numeric(unlist(gpa_f5[1])), las = 2, ylim=(c(0,20)), border = "red", col = rgb(1,0.5,0.5, alpha = 0.5), add= TRUE)
mtext("Número de Amostras.Tamanho Máximo de Árvore", side=1, line=4)
legend("topleft", legend=c("Amostragem Aleatória","Amostragem com Passo"),fill=c("red", "blue"), bty="n")
boxplot(as.numeric(unlist(dlr_51[5]*100))~as.numeric(unlist(dlr_51[2]))*as.numeric(unlist(dlr_51[1])), las = 2, ylim=(c(0,70)), border = "blue", col = rgb(0.5,0.5,1, alpha = 0.5), main = "Deep Learning\nFunção 5 - Ativação ReLU", ylab = "Erro percentual (%)")
boxplot(as.numeric(unlist(dlra_51[5]*100))~as.numeric(unlist(dlra_51[2]))*as.numeric(unlist(dlra_51[1])), las = 2, ylim=(c(0,70)), border = "red", col = rgb(1,0.5,0.5, alpha = 0.5), add= TRUE)
View(dlra_51)
dlr_51<-dlr_51[-c(which(dlr_51[2] == 1600)),]
dlra_51<-dlra_51[-c(which(dlra_51[2] == 1600)),]
boxplot(as.numeric(unlist(gp_f5[5]*100))~as.numeric(unlist(gp_f5[2]))*as.numeric(unlist(gp_f5[1])), las = 2, ylim=(c(0,20)), border = "blue", col = rgb(0.5,0.5,1, alpha = 0.5), main = "Genetic Programming\nFunção 5", ylab = "Erro percentual (%)")
boxplot(as.numeric(unlist(gpa_f5[5]*100))~as.numeric(unlist(gpa_f5[2]))*as.numeric(unlist(gpa_f5[1])), las = 2, ylim=(c(0,20)), border = "red", col = rgb(1,0.5,0.5, alpha = 0.5), add= TRUE)
mtext("Número de Amostras.Tamanho Máximo de Árvore", side=1, line=4)
legend("topleft", legend=c("Amostragem Aleatória","Amostragem com Passo"),fill=c("red", "blue"), bty="n")
boxplot(as.numeric(unlist(dlr_51[5]*100))~as.numeric(unlist(dlr_51[2]))*as.numeric(unlist(dlr_51[1])), las = 2, ylim=(c(0,20)), border = "blue", col = rgb(0.5,0.5,1, alpha = 0.5), main = "Deep Learning\nFunção 5 - Ativação ReLU", ylab = "Erro percentual (%)")
boxplot(as.numeric(unlist(dlra_51[5]*100))~as.numeric(unlist(dlra_51[2]))*as.numeric(unlist(dlra_51[1])), las = 2, ylim=(c(0,20)), border = "red", col = rgb(1,0.5,0.5, alpha = 0.5), add= TRUE)
mtext("Número de Amostras.Arquitetura", side=1, line=4)
boxplot(as.numeric(unlist(gp_f3[5]*100))~as.numeric(unlist(gp_f3[2]))*as.numeric(unlist(gp_f3[1])), las = 2, ylim=(c(0,70)), border = "blue", col = rgb(0.5,0.5,1, alpha = 0.5), main = "Genetic Programming\nFunção 4", ylab = "Erro percentual (%)")
boxplot(as.numeric(unlist(gpa_f3[5]*100))~as.numeric(unlist(gpa_f3[2]))*as.numeric(unlist(gpa_f3[1])), las = 2, ylim=(c(0,70)), border = "red", col = rgb(1,0.5,0.5, alpha = 0.5), add= TRUE)
boxplot(as.numeric(unlist(dlr_3[5]*100))~as.numeric(unlist(dlr_3[2]))*as.numeric(unlist(dlr_3[1])), las = 2, ylim=(c(0,70)), border = "blue", col = rgb(0.5,0.5,1, alpha = 0.5), main = "Deep Learning\nFunção 4 - Ativação ReLU", ylab = "Erro percentual (%)")
boxplot(as.numeric(unlist(dlra_3[5]*100))~as.numeric(unlist(dlra_3[2]))*as.numeric(unlist(dlra_3[1])), las = 2, ylim=(c(0,70)), border = "red", col = rgb(1,0.5,0.5, alpha = 0.5), add= TRUE)
boxplot((as.numeric(unlist(gp_f4[5]*100))), as.numeric(unlist(abs(gp_f2[5]*100))), as.numeric(unlist(gp_f1[5]*100)), as.numeric(unlist(gp_f3[5]*100)), as.numeric(unlist(gp_f5[5]*100)), ylim=c(0,150), border = "blue", col = rgb(0.5,0.5,1, alpha = 0.5), main = "Erro percentual dos modelos gerados\nGenetic Programming", ylab = "Erro Percentual (%)", names = c("Função 1","Função 2","Função 3","Função 4","Função 5"))
boxplot((as.numeric(unlist(gpa_f4[5]*100))), as.numeric(unlist(abs(gpa_f2[5]*100))), as.numeric(unlist(gpa_f1[5]*100)), as.numeric(unlist(gpa_f3[5]*100)), as.numeric(unlist(gpa_f5[5]*100)), ylim=c(0,150), border = "red", col = rgb(1,0.5,.5, alpha = 0.5), main = "Erro percentual dos modelos gerados\nGenetic Programming", ylab = "Erro Percentual (%)", names = c("Função 1","Função 2","Função 3","Função 4","Função 5"), add = TRUE)
legend("topright", legend=c("Amostragem Aleatória","Amostragem com Passo"),fill=c("red", "blue"), bty="n")
boxplot((as.numeric(unlist(gpr_f4[5]*100))), as.numeric(unlist(abs(gpr_f2[5]*100))), as.numeric(unlist(gpr_f1[5]*100)), as.numeric(unlist(gpr_f3[5]*100)), as.numeric(unlist(gpr_f5[5]*100)), ylim=c(0,150), border = "blue", col = rgb(0.5,0.5,1, alpha = 0.5), main = "Erro percentual dos modelos gerados\nGenetic Programming Reduzido", ylab = "Erro Percentual (%)", names = c("Função 1","Função 2","Função 3","Função 4","Função 5"))
boxplot((as.numeric(unlist(gpra_f4[5]*100))), as.numeric(unlist(abs(gpra_f2[5]*100))), as.numeric(unlist(gpra_f1[5]*100)), as.numeric(unlist(gpra_f3[5]*100)), as.numeric(unlist(gpra_f5[5]*100)), ylim=c(0,150), border = "red", col = rgb(1,0.5,.5, alpha = 0.5), main = "Erro percentual dos modelos gerados\nGenetic Programming Reduzido", ylab = "Erro Percentual (%)", names = c("Função 1","Função 2","Função 3","Função 4","Função 5"), add = TRUE)
legend("topright", legend=c("Amostragem Aleatória","Amostragem com Passo"),fill=c("red", "blue"), bty="n")
boxplot(as.numeric(unlist(dlr_3[5]*100))~as.numeric(unlist(dlr_3[2]))*as.numeric(unlist(dlr_3[1])), las = 2, ylim=(c(0,70)), border = "blue", col = rgb(0.5,0.5,1, alpha = 0.5), main = "Deep Learning\nFunção 4 - Ativação ReLU", ylab = "Erro percentual (%)")
boxplot(as.numeric(unlist(dlra_3[5]*100))~as.numeric(unlist(dlra_3[2]))*as.numeric(unlist(dlra_3[1])), las = 2, ylim=(c(0,70)), border = "red", col = rgb(1,0.5,0.5, alpha = 0.5), add= TRUE)
boxplot((as.numeric(unlist(gp_f4[5]*100))), as.numeric(unlist(abs(gp_f2[5]*100))), as.numeric(unlist(gp_f1[5]*100)), as.numeric(unlist(gp_f3[5]*100)), as.numeric(unlist(gp_f5[5]*100)), ylim=c(0,150), border = "blue", col = rgb(0.5,0.5,1, alpha = 0.5), main = "Erro percentual dos modelos gerados\nGenetic Programming", ylab = "Erro Percentual (%)", names = c("Função 1","Função 2","Função 3","Função 4","Função 5"))
boxplot((as.numeric(unlist(gpa_f4[5]*100))), as.numeric(unlist(abs(gpa_f2[5]*100))), as.numeric(unlist(gpa_f1[5]*100)), as.numeric(unlist(gpa_f3[5]*100)), as.numeric(unlist(gpa_f5[5]*100)), ylim=c(0,150), border = "red", col = rgb(1,0.5,.5, alpha = 0.5), main = "Erro percentual dos modelos gerados\nGenetic Programming", ylab = "Erro Percentual (%)", names = c("Função 1","Função 2","Função 3","Função 4","Função 5"), add = TRUE)
legend("topright", legend=c("Amostragem Aleatória","Amostragem com Passo"),fill=c("red", "blue"), bty="n")
boxplot((as.numeric(unlist(gpr_f4[5]*100))), as.numeric(unlist(abs(gpr_f2[5]*100))), as.numeric(unlist(gpr_f1[5]*100)), as.numeric(unlist(gpr_f3[5]*100)), as.numeric(unlist(gpr_f5[5]*100)), ylim=c(0,150), border = "blue", col = rgb(0.5,0.5,1, alpha = 0.5), main = "Erro percentual dos modelos gerados\nGenetic Programming Reduzido", ylab = "Erro Percentual (%)", names = c("Função 1","Função 2","Função 3","Função 4","Função 5"))
boxplot((as.numeric(unlist(gpra_f4[5]*100))), as.numeric(unlist(abs(gpra_f2[5]*100))), as.numeric(unlist(gpra_f1[5]*100)), as.numeric(unlist(gpra_f3[5]*100)), as.numeric(unlist(gpra_f5[5]*100)), ylim=c(0,150), border = "red", col = rgb(1,0.5,.5, alpha = 0.5), main = "Erro percentual dos modelos gerados\nGenetic Programming Reduzido", ylab = "Erro Percentual (%)", names = c("Função 1","Função 2","Função 3","Função 4","Função 5"), add = TRUE)
legend("topright", legend=c("Amostragem Aleatória","Amostragem com Passo"),fill=c("red", "blue"), bty="n")
boxplot((as.numeric(unlist(gp_f4[5]*100))), as.numeric(unlist(abs(gp_f2[5]*100))), as.numeric(unlist(gp_f1[5]*100)), as.numeric(unlist(gp_f3[5]*100)), as.numeric(unlist(gp_f5[5]*100)), ylim=c(0,150), border = "blue", col = rgb(0.5,0.5,1, alpha = 0.5), main = "Erro percentual dos modelos gerados\nGenetic Programming", ylab = "Erro Percentual (%)", names = c("Função 1","Função 2","Função 3","Função 4","Função 5"))
boxplot((as.numeric(unlist(gpa_f4[5]*100))), as.numeric(unlist(abs(gpa_f2[5]*100))), as.numeric(unlist(gpa_f1[5]*100)), as.numeric(unlist(gpa_f3[5]*100)), as.numeric(unlist(gpa_f5[5]*100)), ylim=c(0,150), border = "red", col = rgb(1,0.5,.5, alpha = 0.5), main = "Erro percentual dos modelos gerados\nGenetic Programming", ylab = "Erro Percentual (%)", names = c("Função 1","Função 2","Função 3","Função 4","Função 5"), add = TRUE)
legend("topright", legend=c("Amostragem Aleatória","Amostragem com Passo"),fill=c("red", "blue"), bty="n")
boxplot((as.numeric(unlist(gpr_f4[5]*100))), as.numeric(unlist(abs(gpr_f2[5]*100))), as.numeric(unlist(gpr_f1[5]*100)), as.numeric(unlist(gpr_f3[5]*100)), as.numeric(unlist(gpr_f5[5]*100)), ylim=c(0,150), border = "blue", col = rgb(0.5,0.5,1, alpha = 0.5), main = "Erro percentual dos modelos gerados\nGenetic Programming Reduzido", ylab = "Erro Percentual (%)", names = c("Função 1","Função 2","Função 3","Função 4","Função 5"))
boxplot((as.numeric(unlist(gpra_f4[5]*100))), as.numeric(unlist(abs(gpra_f2[5]*100))), as.numeric(unlist(gpra_f1[5]*100)), as.numeric(unlist(gpra_f3[5]*100)), as.numeric(unlist(gpra_f5[5]*100)), ylim=c(0,150), border = "red", col = rgb(1,0.5,.5, alpha = 0.5), main = "Erro percentual dos modelos gerados\nGenetic Programming Reduzido", ylab = "Erro Percentual (%)", names = c("Função 1","Função 2","Função 3","Função 4","Função 5"), add = TRUE)
legend("topright", legend=c("Amostragem Aleatória","Amostragem com Passo"),fill=c("red", "blue"), bty="n")
boxplot((as.numeric(unlist(gp_f4[5]*100))), as.numeric(unlist(abs(gp_f2[5]*100))), as.numeric(unlist(gp_f1[5]*100)), as.numeric(unlist(gp_f3[5]*100)), as.numeric(unlist(gp_f5[5]*100)), ylim=c(0,150), border = "blue", col = rgb(0.5,0.5,1, alpha = 0.5), main = "Erro percentual dos modelos gerados\nGenetic Programming", ylab = "Erro Percentual (%)", names = c("Função 1","Função 2","Função 3","Função 4","Função 5"))
boxplot((as.numeric(unlist(gpa_f4[5]*100))), as.numeric(unlist(abs(gpa_f2[5]*100))), as.numeric(unlist(gpa_f1[5]*100)), as.numeric(unlist(gpa_f3[5]*100)), as.numeric(unlist(gpa_f5[5]*100)), ylim=c(0,150), border = "red", col = rgb(1,0.5,.5, alpha = 0.5), main = "Erro percentual dos modelos gerados\nGenetic Programming", ylab = "Erro Percentual (%)", names = c("Função 1","Função 2","Função 3","Função 4","Função 5"), add = TRUE)
legend("topright", legend=c("Amostragem Aleatória","Amostragem com Passo"),fill=c("red", "blue"), bty="n")
boxplot((as.numeric(unlist(gpr_f4[5]*100))), as.numeric(unlist(abs(gpr_f2[5]*100))), as.numeric(unlist(gpr_f1[5]*100)), as.numeric(unlist(gpr_f3[5]*100)), as.numeric(unlist(gpr_f5[5]*100)), ylim=c(0,150), border = "blue", col = rgb(0.5,0.5,1, alpha = 0.5), main = "Erro percentual dos modelos gerados\nGenetic Programming Reduzido", ylab = "Erro Percentual (%)", names = c("Função 1","Função 2","Função 3","Função 4","Função 5"))
boxplot((as.numeric(unlist(gpra_f4[5]*100))), as.numeric(unlist(abs(gpra_f2[5]*100))), as.numeric(unlist(gpra_f1[5]*100)), as.numeric(unlist(gpra_f3[5]*100)), as.numeric(unlist(gpra_f5[5]*100)), ylim=c(0,150), border = "red", col = rgb(1,0.5,.5, alpha = 0.5), main = "Erro percentual dos modelos gerados\nGenetic Programming Reduzido", ylab = "Erro Percentual (%)", names = c("Função 1","Função 2","Função 3","Função 4","Função 5"), add = TRUE)
legend("topright", legend=c("Amostragem Aleatória","Amostragem com Passo"),fill=c("red", "blue"), bty="n")
boxplot((as.numeric(unlist(gp_f4[5]*100))), as.numeric(unlist(abs(gp_f2[5]*100))), as.numeric(unlist(gp_f1[5]*100)), as.numeric(unlist(gp_f3[5]*100)), as.numeric(unlist(gp_f5[5]*100)), ylim=c(0,150), border = "blue", col = rgb(0.5,0.5,1, alpha = 0.5), main = "Erro percentual dos modelos gerados\nGenetic Programming", ylab = "Erro Percentual (%)", names = c("Função 1","Função 2","Função 3","Função 4","Função 5"))
boxplot((as.numeric(unlist(gpa_f4[5]*100))), as.numeric(unlist(abs(gpa_f2[5]*100))), as.numeric(unlist(gpa_f1[5]*100)), as.numeric(unlist(gpa_f3[5]*100)), as.numeric(unlist(gpa_f5[5]*100)), ylim=c(0,150), border = "red", col = rgb(1,0.5,.5, alpha = 0.5), main = "Erro percentual dos modelos gerados\nGenetic Programming", ylab = "Erro Percentual (%)", names = c("Função 1","Função 2","Função 3","Função 4","Função 5"), add = TRUE)
legend("topright", legend=c("Amostragem Aleatória","Amostragem com Passo"),fill=c("red", "blue"), bty="n")
boxplot((as.numeric(unlist(gpr_f4[5]*100))), as.numeric(unlist(abs(gpr_f2[5]*100))), as.numeric(unlist(gpr_f1[5]*100)), as.numeric(unlist(gpr_f3[5]*100)), as.numeric(unlist(gpr_f5[5]*100)), ylim=c(0,150), border = "blue", col = rgb(0.5,0.5,1, alpha = 0.5), main = "Erro percentual dos modelos gerados\nGenetic Programming Reduzido", ylab = "Erro Percentual (%)", names = c("Função 1","Função 2","Função 3","Função 4","Função 5"))
boxplot((as.numeric(unlist(gpra_f4[5]*100))), as.numeric(unlist(abs(gpra_f2[5]*100))), as.numeric(unlist(gpra_f1[5]*100)), as.numeric(unlist(gpra_f3[5]*100)), as.numeric(unlist(gpra_f5[5]*100)), ylim=c(0,150), border = "red", col = rgb(1,0.5,.5, alpha = 0.5), main = "Erro percentual dos modelos gerados\nGenetic Programming Reduzido", ylab = "Erro Percentual (%)", names = c("Função 1","Função 2","Função 3","Função 4","Função 5"), add = TRUE)
legend("topright", legend=c("Amostragem Aleatória","Amostragem com Passo"),fill=c("red", "blue"), bty="n")
par(mfrow=(1,2))
par(mfrow=c(1,2))
boxplot((as.numeric(unlist(gp_f4[5]*100))), as.numeric(unlist(abs(gp_f2[5]*100))), as.numeric(unlist(gp_f1[5]*100)), as.numeric(unlist(gp_f3[5]*100)), as.numeric(unlist(gp_f5[5]*100)), ylim=c(0,150), border = "blue", col = rgb(0.5,0.5,1, alpha = 0.5), main = "Erro percentual dos modelos gerados\nGenetic Programming", ylab = "Erro Percentual (%)", names = c("Função 1","Função 2","Função 3","Função 4","Função 5"))
boxplot((as.numeric(unlist(gpa_f4[5]*100))), as.numeric(unlist(abs(gpa_f2[5]*100))), as.numeric(unlist(gpa_f1[5]*100)), as.numeric(unlist(gpa_f3[5]*100)), as.numeric(unlist(gpa_f5[5]*100)), ylim=c(0,150), border = "red", col = rgb(1,0.5,.5, alpha = 0.5), main = "Erro percentual dos modelos gerados\nGenetic Programming", ylab = "Erro Percentual (%)", names = c("Função 1","Função 2","Função 3","Função 4","Função 5"), add = TRUE)
legend("topright", legend=c("Amostragem Aleatória","Amostragem com Passo"),fill=c("red", "blue"), bty="n")
boxplot((as.numeric(unlist(gpr_f4[5]*100))), as.numeric(unlist(abs(gpr_f2[5]*100))), as.numeric(unlist(gpr_f1[5]*100)), as.numeric(unlist(gpr_f3[5]*100)), as.numeric(unlist(gpr_f5[5]*100)), ylim=c(0,150), border = "blue", col = rgb(0.5,0.5,1, alpha = 0.5), main = "Erro percentual dos modelos gerados\nGenetic Programming Reduzido", ylab = "Erro Percentual (%)", names = c("Função 1","Função 2","Função 3","Função 4","Função 5"))
boxplot((as.numeric(unlist(gpra_f4[5]*100))), as.numeric(unlist(abs(gpra_f2[5]*100))), as.numeric(unlist(gpra_f1[5]*100)), as.numeric(unlist(gpra_f3[5]*100)), as.numeric(unlist(gpra_f5[5]*100)), ylim=c(0,150), border = "red", col = rgb(1,0.5,.5, alpha = 0.5), main = "Erro percentual dos modelos gerados\nGenetic Programming Reduzido", ylab = "Erro Percentual (%)", names = c("Função 1","Função 2","Função 3","Função 4","Função 5"), add = TRUE)
legend("topright", legend=c("Amostragem Aleatória","Amostragem com Passo"),fill=c("red", "blue"), bty="n")
boxplot(as.numeric(unlist(gp_f3[5]*100))~as.numeric(unlist(gp_f3[2]))*as.numeric(unlist(gp_f3[1])), las = 2, ylim=(c(0,70)), border = "blue", col = rgb(0.5,0.5,1, alpha = 0.5), main = "Genetic Programming\nFunção 4", ylab = "Erro percentual (%)")
boxplot(as.numeric(unlist(gpa_f3[5]*100))~as.numeric(unlist(gpa_f3[2]))*as.numeric(unlist(gpa_f3[1])), las = 2, ylim=(c(0,70)), border = "red", col = rgb(1,0.5,0.5, alpha = 0.5), add= FALSE)
View(gpa_f5)
View(gpa_f3)
boxplot(as.numeric(unlist(gpr_f1[5]*100))~as.numeric(unlist(gpr_f1[2]))*as.numeric(unlist(gpr_f1[1])), las = 2, ylim=(c(0,70)), border = "blue", col = rgb(0.5,0.5,1, alpha = 0.5), main = "Genetic Programming\nFunção 3 - GP Reduzido", ylab = "Erro percentual (%)")
boxplot(as.numeric(unlist(gpra_f1[5]*100))~as.numeric(unlist(gpra_f1[2]))*as.numeric(unlist(gpra_f1[1])), las = 2, ylim=(c(0,70)), border = "red", col = rgb(1,0.5,0.5, alpha = 0.5), add= TRUE)
boxplot(as.numeric(unlist(gpr_f3[5]*100))~as.numeric(unlist(gpr_f3[2]))*as.numeric(unlist(gpr_f3[1])), las = 2, ylim=(c(0,70)), border = "blue", col = rgb(0.5,0.5,1, alpha = 0.5), main = "Genetic Programming\nFunção 4 - GP Reduzido", ylab = "Erro percentual (%)")
boxplot(as.numeric(unlist(gpr_f3[5]*100))~as.numeric(unlist(gpr_f3[2]))*as.numeric(unlist(gpr_f3[1])), las = 2, ylim=(c(0,70)), border = "blue", col = rgb(0.5,0.5,1, alpha = 0.5), main = "Genetic Programming\nFunção 4 - GP Reduzido", ylab = "Erro percentual (%)")
boxplot(as.numeric(unlist(gpra_f3[5]*100))~as.numeric(unlist(gpra_f3[2]))*as.numeric(unlist(gpra_f3[1])), las = 2, ylim=(c(0,70)), border = "red", col = rgb(1,0.5,0.5, alpha = 0.5), add= FALSE)
boxplot(as.numeric(unlist(gpr_f5[5]*100))~as.numeric(unlist(gpr_f5[2]))*as.numeric(unlist(gpr_f5[1])), las = 2, ylim=(c(0,20)), border = "blue", col = rgb(0.5,0.5,1, alpha = 0.5), main = "Genetic Programming\nFunção 5 - GP Reduzido", ylab = "Erro percentual (%)")
boxplot(as.numeric(unlist(gpra_f5[5]*100))~as.numeric(unlist(gpra_f5[2]))*as.numeric(unlist(gpra_f5[1])), las = 2, ylim=(c(0,20)),  border = "red", col = rgb(1,0.5,0.5, alpha = 0.5), add= TRUE)
setwd("C:/Users/Ícaro/Dropbox/PIBIC/IC_2017/Experimento_03")
Ler <- function(FILE){
v <- read.csv(FILE, quote ="", header=FALSE)
v <- v[which(v[5] != Inf), ]
v <- v[which(v[5] != 'NaN'), ]
return(v)
}
files_DL <- c("DL/Result_DL_EXP2_RELU_SIN_F1.csv",
"DL/Result_DL_EXP2_RELU_SIN_F1_Alea.csv",
"DL/Result_DL_EXP2_RELU_COS_F1.csv",
"DL/Result_DL_EXP2_RELU_COS_F1_Alea.csv",
"DL/Result_DL_EXP2_RELU_TAN_F1.csv",
"DL/Result_DL_EXP2_RELU_TAN_F1_Alea.csv",
"DL/Result_DL_EXP2_RELU_FUNC_e-x.csv",
"DL/Result_DL_EXP2_RELU_FUNC_e-x_Alea.csv",
"DL/Result_DL_EXP2_RELU_FUNC_LOG.csv",
"DL/Result_DL_EXP2_RELU_FUNC_LOG_Alea.csv",
"DL/Result_DL_EXP2_RELU_FUNC_POL.csv",
"DL/Result_DL_EXP2_RELU_FUNC_POL_Alea.csv")
files_GP <- c("GP/Result_GP_EXP2_COS.csv",
"GP/Result_GP_EXP2_COS_Alea.csv",
"GP/Result_GP_EXP2_SIN.csv",
"GP/Result_GP_EXP2_SIN_Alea.csv",
"GP/Result_GP_EXP2_TAN.csv",
"GP/Result_GP_EXP2_TAN_Alea.csv",
"GP/Result_GP_EXP2_FUNC_e-x_Reduzido.csv",
"GP/Result_GP_EXP2_FUNC_e-x_Reduzido_Alea.csv",
"GP/Result_GP_EXP2_FUNC_LOG_Reduzido.csv",
"GP/Result_GP_EXP2_FUNC_LOG_Reduzido_Alea.csv",
"GP/Result_GP_EXP2_FUNC_POL_Reduzido.csv",
"GP/Result_GP_EXP2_FUNC_POL_Reduzido_Alea.csv")
dl_sin <- Ler(files_DL[1])
dla_sin <- Ler(files_DL[2])
dl_cos <- Ler(files_DL[3])
dla_cos <- Ler(files_DL[4])
dl_tan <- Ler(files_DL[5])
dla_tan <- Ler(files_DL[6])
dl_e <- Ler(files_DL[7])
dla_e <- Ler(files_DL[8])
dl_log <- Ler(files_DL[9])
dla_log <- Ler(files_DL[10])
dl_pol <- Ler(files_DL[11])
dla_pol <- Ler(files_DL[12])
gp_cos <- Ler(files_GP[1])
gpa_cos <- Ler(files_GP[2])
gp_sin <- Ler(files_GP[3])
gpa_sin <- Ler(files_GP[4])
gp_tan <- Ler(files_GP[5])
gpa_tan <- Ler(files_GP[6])
gp_e <- Ler(files_GP[7])
gpa_e <- Ler(files_GP[8])
gp_log <- Ler(files_GP[9])
gpa_log <- Ler(files_GP[10])
gp_pol <- Ler(files_GP[11])
gpa_pol <- Ler(files_GP[12])
View(gpa_pol)
View(gpa_log)
View(gpa_pol)
View(gpa_log)
View(gpa_sin)
View(gpa_tan)
View(gpa_cos)
View(gpa_e)
View(gp_e)
View(gp_cos)
View(gp_tan)
View(gpa_sin)
View(gp_sin)
View(gp_pol)
View(dl_e)
View(dl_cos)
View(dl_pol)
View(dl_sin)
View(dla_e)
View(dla_tan)
