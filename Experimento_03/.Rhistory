curve(dnorm(x, mean=m, sd=std),
col="darkblue", lwd=2, add=TRUE, yaxt="n")
g = medidas$Y
m<-mean(g)
std<-sqrt(var(g))
hist(g, density=20, breaks=5, prob=TRUE,
xlab="x-variable",
main="normal curve over histogram")
curve(dnorm(x, mean=m, sd=std),
col="darkblue", lwd=2, add=TRUE, yaxt="n")
curve(171.5)
curve(171.5+x*0)
g = medidas$Y
m<-mean(g)
std<-sqrt(var(g))
hist(g, density=20, breaks=5, prob=TRUE,
xlab="x-variable",
main="normal curve over histogram")
curve(dnorm(x, mean=m, sd=std),
col="darkblue", lwd=2, add=TRUE, yaxt="n")
abline(171.5)
abline(v=171.5)
abline(v=171.3)
g = medidas$Y
m<-mean(g)
std<-sqrt(var(g))
hist(g, density=20, breaks=5, prob=TRUE,
xlab="x-variable",
main="normal curve over histogram")
curve(dnorm(x, mean=m, sd=std),
col="darkblue", lwd=2, add=TRUE, yaxt="n")
g = medidas$X
m<-mean(g)
std<-sqrt(var(g))
hist(g, density=20, breaks=5, prob=TRUE,
xlab="X (mm)", ylab="Densidade de Probabilidade", xlim = c(170.9,172.1),
main="Medidas na dimensão X da moldura")
curve(dnorm(x, mean=m, sd=std),
col="darkblue", lwd=2, add=TRUE, yaxt="n")
g = medidas$X
m<-mean(g)
std<-sqrt(var(g))
hist(g, density=20, breaks=10, prob=TRUE,
xlab="X (mm)", ylab="Densidade de Probabilidade", xlim = c(170.9,172.1),
main="Medidas na dimensão X da moldura")
curve(dnorm(x, mean=m, sd=std),
col="darkblue", lwd=2, add=TRUE, yaxt="n")
g = medidas$X
m<-mean(g)
std<-sqrt(var(g))
hist(g, density=20, breaks=3, prob=TRUE,
xlab="X (mm)", ylab="Densidade de Probabilidade", xlim = c(170.9,172.1),
main="Medidas na dimensão X da moldura")
curve(dnorm(x, mean=m, sd=std),
col="darkblue", lwd=2, add=TRUE, yaxt="n")
abline(v=171.0, lty = 2, col = "blue")
abline(v=171.0, lty = 2, col = "blue", pch = 19)
abline(v=172.0, lty = 2, col = "blue", pch = 19)
1/(6*std)
g = medidas$X
m<-mean(g)
std<-sqrt(var(g))
hist(g, density=20, breaks=3, prob=TRUE,
xlab="X (mm)", ylab="Densidade de Probabilidade", xlim = c(170,172.1),
main="Medidas na dimensão X da moldura")
curve(dnorm(x, mean=m, sd=std),
col="darkblue", lwd=2, add=TRUE, yaxt="n")
g = medidas$X
m<-mean(g)
std<-sqrt(var(g))
hist(g, density=20, breaks=3, prob=TRUE,
xlab="X (mm)", ylab="Densidade de Probabilidade", xlim = c(170.5,172.1),
main="Medidas na dimensão X da moldura")
curve(dnorm(x, mean=m, sd=std),
col="darkblue", lwd=2, add=TRUE, yaxt="n")
abline(v=172.0, lty = 2, col = "blue", lwd = 3)
abline(v=171.0, lty = 2, col = "blue", lwd = 3)
g = medidas$X
m<-mean(g)
std<-sqrt(var(g))
hist(g, density=20, breaks=3, prob=TRUE,
xlab="X (mm)", ylab="Densidade de Probabilidade", xlim = c(170.5,172.1),
main="Medidas na dimensão X da moldura")
curve(dnorm(x, mean=m, sd=std),
col="darkblue", lwd=2, add=TRUE, yaxt="n")
abline(v=172.0, lty = 2, col = "blue", lwd = 3)
abline(v=171.0, lty = 2, col = "blue", lwd = 3)
m
std
g = medidas$Y
m<-mean(g)
std<-sqrt(var(g))
hist(g, density=20, breaks=3, prob=TRUE,
xlab="Y (mm)", ylab="Densidade de Probabilidade", xlim = c(170.5,172.1),
main="Medidas na dimensão Y da moldura")
curve(dnorm(x, mean=m, sd=std),
col="darkblue", lwd=2, add=TRUE, yaxt="n")
abline(v=172.0, lty = 2, col = "blue", lwd = 3)
abline(v=171.0, lty = 2, col = "blue", lwd = 3)
m
boxplot(medidas$X,medidas$])
boxplot(medidas$X,medidas$y)
boxplot(medidas$X,medidas$Y)
boxplot(medidas$X,medidas$Y, names = c("X,"Y""))
boxplot(medidas$X,medidas$Y, names = c("X,"Y"))
boxplot(medidas$X,medidas$Y, names = c("X","Y"))
savehistory("~/tcn.Rhistory")
boxplot(medidas$X,medidas$Y, names = c("X","Y"), col = ("red", "blue"))
boxplot(medidas$X,medidas$Y, names = c("X","Y"), col = c("red", "blue"))
boxplot(medidas$X,medidas$Y, names = c("X","Y"), col = c("red", "blue"), border = c("red", "blue"))
boxplot(medidas$X,medidas$Y, names = c("X","Y"), col = c("light red", "light blue"), border = c("red", "blue"))
boxplot(medidas$X,medidas$Y, names = c("X","Y"), col = c("indianred", "light blue"), border = c("red", "blue"))
boxplot(medidas$X,medidas$Y, names = c("X","Y"), col = c("indianred1", "light blue"), border = c("red", "blue"))
boxplot(medidas$X,medidas$Y, names = c("X","Y"), col = c("indianred1", "light blue"), border = c("red", "blue"), main = "Dimensões da Moldura", xlab = "Eixo", ylab = "Comprimento (mm)")
library(readr)
Diametros <- read_csv("~/Diametros.csv")
View(Diametros)
g = Diametros$D1
m<-mean(g)
std<-sqrt(var(g))
hist(g, density=20, breaks=3, prob=TRUE,
xlab="Y (mm)", ylab="Densidade de Probabilidade", xlim = c(170.5,172.1),
main="Medidas na dimensão Y da moldura")
curve(dnorm(x, mean=m, sd=std),
col="darkblue", lwd=2, add=TRUE, yaxt="n")
g = Diametros$D1
m<-mean(g)
std<-sqrt(var(g))
hist(g, density=20, breaks=3, prob=TRUE,
xlab="Y (mm)", ylab="Densidade de Probabilidade",
main="Medidas na dimensão Y da moldura")
curve(dnorm(x, mean=m, sd=std),
col="darkblue", lwd=2, add=TRUE, yaxt="n")
g = Diametros$D1
m<-mean(g)
std<-sqrt(var(g))
hist(g, density=20, breaks=5, prob=TRUE,
xlab="Y (mm)", ylab="Densidade de Probabilidade",
main="Medidas na dimensão Y da moldura")
curve(dnorm(x, mean=m, sd=std),
col="darkblue", lwd=2, add=TRUE, yaxt="n")
g = Diametros$D1
m<-mean(g)
std<-sqrt(var(g))
hist(g, density=20, breaks=3, prob=TRUE,
xlab="Y (mm)", ylab="Densidade de Probabilidade", xlim = c(20,20.5),
main="Medidas na dimensão Y da moldura")
curve(dnorm(x, mean=m, sd=std),
col="darkblue", lwd=2, add=TRUE, yaxt="n")
g = Diametros$D1
m<-mean(g)
std<-sqrt(var(g))
hist(g, density=20, breaks=2, prob=TRUE,
xlab="Y (mm)", ylab="Densidade de Probabilidade", xlim = c(20,20.5),
main="Medidas na dimensão Y da moldura")
curve(dnorm(x, mean=m, sd=std),
col="darkblue", lwd=2, add=TRUE, yaxt="n")
g = Diametros$D1
m<-mean(g)
std<-sqrt(var(g))
hist(g, density=20, breaks=3, prob=TRUE,
xlab="Y (mm)", ylab="Densidade de Probabilidade", xlim = c(20,20.5),
main="Medidas na dimensão Y da moldura")
curve(dnorm(x, mean=m, sd=std),
col="darkblue", lwd=2, add=TRUE, yaxt="n")
g = Diametros$D1
m<-mean(g)
std<-sqrt(var(g))
hist(g, density=20, breaks=10, prob=TRUE,
xlab="Y (mm)", ylab="Densidade de Probabilidade", xlim = c(20,20.5),
main="Medidas na dimensão Y da moldura")
curve(dnorm(x, mean=m, sd=std),
col="darkblue", lwd=2, add=TRUE, yaxt="n")
g = Diametros$D1
m<-mean(g)
std<-sqrt(var(g))
hist(g, density=20, breaks=2, prob=TRUE,
xlab="Y (mm)", ylab="Densidade de Probabilidade", xlim = c(20,20.5),
main="Medidas na dimensão Y da moldura")
curve(dnorm(x, mean=m, sd=std),
col="darkblue", lwd=2, add=TRUE, yaxt="n")
abline(v=20, lty = 2, col = "blue", lwd = 3)
abline(v=20.5, lty = 2, col = "blue", lwd = 3)
g = Diametros$D1
m<-mean(g)
std<-sqrt(var(g))
hist(g, density=20, breaks=2, prob=TRUE,
xlab="Y (mm)", ylab="Densidade de Probabilidade", xlim = c(19.5,20.5),
main="Medidas na dimensão Y da moldura")
curve(dnorm(x, mean=m, sd=std),
col="darkblue", lwd=2, add=TRUE, yaxt="n")
abline(v=20.5, lty = 2, col = "blue", lwd = 3)
abline(v=19.5, lty = 2, col = "blue", lwd = 3)
abline(v=19.6, lty = 2, col = "red", lwd = 3)
abline(v=20.4, lty = 2, col = "red", lwd = 3)
0.8/(6*std)
abline(v=20.3, lty = 2, col = "red", lwd = 3)
0.6/(6*std)
g = Diametros$D1
m<-mean(g)
std<-sqrt(var(g))
hist(g, density=20, breaks=2, prob=TRUE,
xlab="Diâmetro (mm)", ylab="Densidade de Probabilidade", xlim = c(19.5,20.5),
main="Diâmetro 1")
curve(dnorm(x, mean=m, sd=std),
col="darkblue", lwd=2, add=TRUE, yaxt="n")
abline(v=20.5, lty = 2, col = "blue", lwd = 3)
abline(v=19.5, lty = 2, col = "blue", lwd = 3)
g = Diametros$D2
m<-mean(g)
std<-sqrt(var(g))
hist(g, density=20, breaks=2, prob=TRUE,
xlab="Diâmetro (mm)", ylab="Densidade de Probabilidade", xlim = c(29.5,30.5),
main="Diâmetro 2")
curve(dnorm(x, mean=m, sd=std),
col="darkblue", lwd=2, add=TRUE, yaxt="n")
abline(v=29.5, lty = 2, col = "blue", lwd = 3)
abline(v=30.5, lty = 2, col = "blue", lwd = 3)
abline(v=29.8, lty = 2, col = "red", lwd = 3)
abline(v=30.2, lty = 2, col = "red", lwd = 3)
g = Diametros$D3
m<-mean(g)
std<-sqrt(var(g))
hist(g, density=20, breaks=2, prob=TRUE,
xlab="Diâmetro (mm)", ylab="Densidade de Probabilidade", xlim = c(29.5,30.5),
main="Diâmetro 3")
curve(dnorm(x, mean=m, sd=std),
col="darkblue", lwd=2, add=TRUE, yaxt="n")
g = Diametros$D3
m<-mean(g)
std<-sqrt(var(g))
hist(g, density=20, breaks=2, prob=TRUE,
xlab="Diâmetro (mm)", ylab="Densidade de Probabilidade", xlim = c(39.5,40.5),
main="Diâmetro 3")
curve(dnorm(x, mean=m, sd=std),
col="darkblue", lwd=2, add=TRUE, yaxt="n")
g = Diametros$D3
m<-mean(g)
std<-sqrt(var(g))
hist(g, density=20, breaks=2, prob=TRUE,
xlab="Diâmetro (mm)", ylab="Densidade de Probabilidade", xlim = c(39,40.5),
main="Diâmetro 3")
curve(dnorm(x, mean=m, sd=std),
col="darkblue", lwd=2, add=TRUE, yaxt="n")
2/(6*std)
plot(Diametros$Medida, Diametros$D3)
points(Diametros$Medida, Diametros$D2)
plot(Diametros$Medida, Diametros$D3, ylim = c(0,40))
points(Diametros$Medida, Diametros$D2)
points(Diametros$Medida, Diametros$D1)
plot(Diametros$D3, c(40,40,40,40,40,40,40), ylim = c(0,40))
plot(c(40,40,40,40,40,40,40), Diametros$D3, ylim = c(0,40))
plot(c(40,40,40,40,40,40,40), Diametros$D3, xlim = c(0,45))
plot(c(40,40,40,40,40,40,40), Diametros$D3, ylim = c(0,40), xlim=c(0,45))
plot(c(30,30,30,30,30,30,30), Diametros$D2, ylim = c(0,40), xlim=c(0,45))
plot(c(40,40,40,40,40,40,40), Diametros$D3, ylim = c(0,40), xlim=c(0,45))
points(c(30,30,30,30,30,30,30), Diametros$D2, ylim = c(0,40), xlim=c(0,45))
points(c(20,20,20,20,20,20,20), Diametros$D1, ylim = c(0,40), xlim=c(0,45))
points(c(5,5,5,5,5,5,5), Diametros$D1, ylim = c(0,40), xlim=c(0,45))
points(c(2.5,2.5,2.5,2.5,2.5,2.5,2.5), Diametros$D1, ylim = c(0,40), xlim=c(0,45))
points(c(16,16,16,16,16,16,16), Diametros$D2, ylim = c(0,40), xlim=c(0,45))
plot(c(67,67,67,67,67,67,67), Diametros$D3, ylim = c(0,40), xlim=c(0,45))
plot(c(67,67,67,67,67,67,67), Diametros$D3, ylim = c(20,40), xlim=c(0,100))
points(c(16,16,16,16,16,16,16), Diametros$D2, ylim = c(20,40), xlim=c(0,100))
points(c(2.5,2.5,2.5,2.5,2.5,2.5,2.5), Diametros$D1, ylim = c(20,40), xlim=c(0,100))
lm(Diametros$D1~Diametros$Medida)
lm(Diametros$D2~Diametros$Medida)
lm(Diametros$D3~Diametros$Medida)
lm(Diametros$D1~Diametros$Medida)
lm(Diametros$D1~c(2.5,2.5,2.5,2.5,2.5,2.5,2.5))
tttt<-c(2.5,2.5,2.5,2.5,2.5,2.5,2.5)
lm(Diametros$D1~tttt)
tttt
lm(Diametros$D1~as.numeric(tttt))
lm(Diametros$D1~1)
lm(tttt~Diametros$D1)
plot(tttt,Diametros$D1)
plot(Diametros$D1~tttt)
plot(Diametros$D1~tttt)
plot(Diametros$D1,tttt)
g = Diametros$D3
m<-mean(g)
std<-sqrt(var(g))
hist(g, density=20, breaks=2, prob=TRUE,
xlab="Diâmetro (mm)", ylab="Densidade de Probabilidade", xlim = c(29.5,30.5),
main="Diâmetro 3")
curve(dnorm(x, mean=m, sd=std),
col="darkblue", lwd=2, add=TRUE, yaxt="n")
g = Diametros$D3
m<-mean(g)
std<-sqrt(var(g))
hist(g, density=20, breaks=2, prob=TRUE,
xlab="Diâmetro (mm)", ylab="Densidade de Probabilidade", xlim = c(39,40.5),
main="Diâmetro 3")
curve(dnorm(x, mean=m, sd=std),
col="darkblue", lwd=2, add=TRUE, yaxt="n")
g = Diametros$D3
m<-mean(g)
std<-sqrt(var(g))
hist(g, density=20, breaks=2, prob=TRUE,
xlab="Diâmetro (mm)", ylab="Densidade de Probabilidade", xlim = c(39,40.5), ylim = c(0,9),
main="Diâmetro 3")
curve(dnorm(x, mean=m, sd=std),
col="darkblue", lwd=2, add=TRUE, yaxt="n")
g = Diametros$D3
m<-mean(g)
std<-sqrt(var(g))
hist(g, density=20, breaks=2, prob=TRUE,
xlab="Diâmetro (mm)", ylab="Densidade de Probabilidade", xlim = c(39,40.5), ylim = c(0,12),
main="Diâmetro 3")
curve(dnorm(x, mean=m, sd=std),
col="darkblue", lwd=2, add=TRUE, yaxt="n")
g = Diametros$D3
m<-mean(g)
std<-sqrt(var(g))
hist(g, density=20, breaks=2, prob=TRUE,
xlab="Diâmetro (mm)", ylab="Densidade de Probabilidade", xlim = c(39,41), ylim = c(0,12),
main="Diâmetro 3")
curve(dnorm(x, mean=m, sd=std),
col="darkblue", lwd=2, add=TRUE, yaxt="n")
abline(v=41, lty = 2, col = "blue", lwd = 3)
abline(v=39, lty = 2, col = "blue", lwd = 3)
abline(v=39.5, lty = 2, col = "blue", lwd = 3)
abline(v=40.5, lty = 2, col = "blue", lwd = 3)
abline(v=41, lty = 2, col = "red", lwd = 3)
abline(v=39, lty = 2, col = "red", lwd = 3)
g = Diametros$D1
m<-mean(g)
std<-sqrt(var(g))
hist(g, density=20, breaks=2, prob=TRUE,
xlab="Diâmetro (mm)", ylab="Densidade de Probabilidade", xlim = c(39,41), ylim = c(0,12),
main="Diâmetro 3")
curve(dnorm(x, mean=m, sd=std),
col="darkblue", lwd=2, add=TRUE, yaxt="n")
g = Diametros$D1
m<-mean(g)
std<-sqrt(var(g))
hist(g, density=20, breaks=2, prob=TRUE,
xlab="Diâmetro (mm)", ylab="Densidade de Probabilidade", xlim = c(19.5,20.5),
main="Diâmetro 1")
curve(dnorm(x, mean=m, sd=std),
col="darkblue", lwd=2, add=TRUE, yaxt="n")
abline(v=19.5, lty = 2, col = "blue", lwd = 3)
abline(v=20.5, lty = 2, col = "blue", lwd = 3)
abline(v=20.4, lty = 2, col = "red", lwd = 3)
abline(v=19.6, lty = 2, col = "red", lwd = 3)
library(readr)
t <- read_csv("~/t.csv", col_names = FALSE)
View(t)
plot(t$X1, t$X2)
plot(t$X1, t$X2)
plot(t$X1, t$X2,pch=19)
lm(t$X1, t$X2)
lm(t$X1~t$X2)
lm(t$X2~t$X1)
m0<-lm(t$X2~t$X1)
abline(m0, col=2, lty=2, lwd=2)
plot(t$X1, t$X2,pch=19, main = "Desvios no Diâmetro", xlab="Comprimento (mm)", ylab="Desvio")
plot(t$X1, t$X2,pch=19, main = "Desvios no Diâmetro", xlab="Comprimento (mm)", ylab="Desvio (mm)")
abline(m0, col=2, lty=2, lwd=2)
legend("topleft", legend=c("Valores observados", "0.01618x - 0.26165"),
lty=c(NA,2), col=c(1,2), lwd=1:2, bty="n", pch=c(1,NA))
legend("topleft", legend=c("Valores observados", "0.01618x - 0.26165"),
lty=c(NA,2), col=c(1,2), lwd=1:2, bty="n", pch=c(19,NA))
abline(h = 0, col="blue", lty=2, lwd=2)
legend("topleft", legend=c("Valores observados", "0.01618x - 0.26165", "Desvio Ideal"),
lty=c(NA,2,2), col=c(1,2,"blue"), lwd=1:3, bty="n", pch=c(19,NA,NA))
mo[2]
m0[2]
m0
m0$coefficients[2]
a <- as.numeric(m0$coefficients[2])
a
atan(a)
atan(a)*180/pi
atan(a)*pi/180
atan(a)*180/pi
180/pi
f <- file("/dev/cu.usbmodem3a21", open="r")
nObs <- 50
Temperature <- rep(NA, nObs)
cycle <- 0
while(cycle<10){
time <- ((cycle*nObs):((cycle+1)*(nObs)))[-1]
plot(Temperature ~ time, t="n", ylim=c(18, 24),
main="Data stream from Arduino via USB port")
for(i in 1:nObs){
Temperature[i] <- scan(f, n=1, quiet=TRUE)
points(i + cycle*nObs, Temperature[i], pch=19)
Sys.sleep(0.05)
}
cycle <- cycle + 1
}
close(f)
setwd("C:/Users/Ícaro/Dropbox/PIBIC/IC_2017/Experimento_03")
Ler <- function(FILE){
v <- read.csv(FILE, quote ="", header=FALSE)
v <- v[which(v[5] != Inf), ]
v <- v[which(v[5] != 'NaN'), ]
return(v)
}
files_DL <- c("DL/Result_DL_EXP2_RELU_SIN_F1.csv",
"DL/Result_DL_EXP2_RELU_SIN_F1_Alea.csv",
"DL/Result_DL_EXP2_RELU_COS_F1.csv",
"DL/Result_DL_EXP2_RELU_COS_F1_Alea.csv",
"DL/Result_DL_EXP2_RELU_TAN_F1.csv",
"DL/Result_DL_EXP2_RELU_TAN_F1_Alea.csv",
"DL/Result_DL_EXP2_RELU_FUNC_e-x.csv",
"DL/Result_DL_EXP2_RELU_FUNC_e-x_Alea.csv",
"DL/Result_DL_EXP2_RELU_FUNC_LOG.csv",
"DL/Result_DL_EXP2_RELU_FUNC_LOG_Alea.csv",
"DL/Result_DL_EXP2_RELU_FUNC_POL.csv",
"DL/Result_DL_EXP2_RELU_FUNC_POL_Alea.csv")
files_GP <- c("GP/Result_GP_EXP2_COS.csv,
GP/Result_GP_EXP2_COS_Alea.csv,
GP/Result_GP_EXP2_SIN.csv,
GP/Result_GP_EXP2_SIN_Alea.csv,
GP/Result_GP_EXP2_TAN.csv,
GP/Result_GP_EXP2_TAN_Alea.csv,
GP/Result_GP_EXP2_FUNC_e-x_Reduzido.csv,
GP/Result_GP_EXP2_FUNC_e-x_Reduzido_Alea.csv,
GP/Result_GP_EXP2_FUNC_LOG_Reduzido.csv,
GP/Result_GP_EXP2_FUNC_LOG_Reduzido_Alea.csv,
GP/Result_GP_EXP2_FUNC_POL_Reduzido.csv,
GP/Result_GP_EXP2_FUNC_POL_Reduzido_Alea.csv")
dl_sin <- Ler(files_DL[1])
dla_sin <- Ler(files_DL[2])
dl_cos <- Ler(files_DL[3])
dla_cos <- Ler(files_DL[4])
dl_tan <- Ler(files_DL[5])
dla_tan <- Ler(files_DL[6])
dl_e <- Ler(files_DL[7])
dla_e <- Ler(files_DL[8])
dl_log <- Ler(files_DL[9])
dla_log <- Ler(files_DL[10])
dl_pol <- Ler(files_DL[11])
dla_pol <- Ler(files_DL[12])
gp_cos <- Ler(files_GP[1])
gpa_cos <- Ler(files_GP[2])
gp_sin <- Ler(files_GP[3])
gpa_sin <- Ler(files_GP[4])
gp_tan <- Ler(files_GP[5])
gpa_tan <- Ler(files_GP[6])
gp_e <- Ler(files_GP[7])
gpa_e <- Ler(files_GP[8])
gp_log <- Ler(files_GP[9])
gpa_log <- Ler(files_GP[10])
gp_pol <- Ler(files_GP[11])
gpa_pol <- Ler(files_GP[12])
files_GP <- c("GP/Result_GP_EXP2_COS.csv",
"GP/Result_GP_EXP2_COS_Alea.csv",
"GP/Result_GP_EXP2_SIN.csv",
"GP/Result_GP_EXP2_SIN_Alea.csv",
"GP/Result_GP_EXP2_TAN.csv",
"GP/Result_GP_EXP2_TAN_Alea.csv",
"GP/Result_GP_EXP2_FUNC_e-x_Reduzido.csv",
"GP/Result_GP_EXP2_FUNC_e-x_Reduzido_Alea.csv",
"GP/Result_GP_EXP2_FUNC_LOG_Reduzido.csv",
"GP/Result_GP_EXP2_FUNC_LOG_Reduzido_Alea.csv",
"GP/Result_GP_EXP2_FUNC_POL_Reduzido.csv",
"GP/Result_GP_EXP2_FUNC_POL_Reduzido_Alea.csv")
gp_cos <- Ler(files_GP[1])
gpa_cos <- Ler(files_GP[2])
gp_sin <- Ler(files_GP[3])
gpa_sin <- Ler(files_GP[4])
gp_tan <- Ler(files_GP[5])
gpa_tan <- Ler(files_GP[6])
gp_e <- Ler(files_GP[7])
gpa_e <- Ler(files_GP[8])
gp_log <- Ler(files_GP[9])
gpa_log <- Ler(files_GP[10])
gp_pol <- Ler(files_GP[11])
gpa_pol <- Ler(files_GP[12])
View(dla_cos)
View(dl_sin)
View(gpa_sin)
View(dl_e)
View(gp_e)
View(dl_cos)
View(dl_e)
View(dla_log)
View(dla_pol)
View(gpa_pol)
View(gp_e)
View(gpa_cos)
View(dl_cos)
View(dl_cos)
boxplot(as.numeric(unlist(dl_cos[6]*100))~as.numeric(unlist(dl_cos[2]))*as.numeric(unlist(dl_cos[1])), las = 2, ylim=(c(0,70)), border = "blue", col = rgb(0.5,0.5,1, alpha = 0.5), main = "Deep Learning\ncos(x)", ylab = "Erro percentual (%)")
boxplot(as.numeric(unlist(dl_cos[6]*100))~as.numeric(unlist(dl_cos[2]))*as.numeric(unlist(dl_cos[1])), las = 2, ylim=(c(0,300)), border = "blue", col = rgb(0.5,0.5,1, alpha = 0.5), main = "Deep Learning\ncos(x)", ylab = "Erro percentual (%)")
boxplot(as.numeric(unlist(dl_cos[5]))~as.numeric(unlist(dl_cos[2]))*as.numeric(unlist(dl_cos[1])), las = 2, ylim=(c(0,300)), border = "blue", col = rgb(0.5,0.5,1, alpha = 0.5), main = "Deep Learning\ncos(x)", ylab = "Erro percentual (%)")
boxplot(as.numeric(unlist(dl_cos[5]))~as.numeric(unlist(dl_cos[2]))*as.numeric(unlist(dl_cos[1])), las = 2, ylim=(c(0,1)), border = "blue", col = rgb(0.5,0.5,1, alpha = 0.5), main = "Deep Learning\ncos(x)", ylab = "Erro percentual (%)")
boxplot(as.numeric(unlist(dl_cos[6]*100))~as.numeric(unlist(dl_cos[2]))*as.numeric(unlist(dl_cos[1])), las = 2, border = "blue", col = rgb(0.5,0.5,1, alpha = 0.5), main = "Deep Learning\ncos(x)", ylab = "Erro percentual (%)")
boxplot(as.numeric(unlist(dla_cos[6]*100))~as.numeric(unlist(dla_cos[2]))*as.numeric(unlist(dla_cos[1])), las = 2, border = "blue", col = rgb(0.5,0.5,1, alpha = 0.5), main = "Deep Learning\ncos(x)", ylab = "Erro percentual (%)")
boxplot(as.numeric(unlist(gpa_cos[6]*100))~as.numeric(unlist(gpa_cos[2]))*as.numeric(unlist(gpa_cos[1])), las = 2, border = "blue", col = rgb(0.5,0.5,1, alpha = 0.5), main = "Deep Learning\ncos(x)", ylab = "Erro percentual (%)")
boxplot(as.numeric(unlist(gp_cos[6]*100))~as.numeric(unlist(gp_cos[2]))*as.numeric(unlist(gp_cos[1])), las = 2, border = "blue", col = rgb(0.5,0.5,1, alpha = 0.5), main = "Deep Learning\ncos(x)", ylab = "Erro percentual (%)")
boxplot(as.numeric(unlist(gp_sin[6]*100))~as.numeric(unlist(gp_sin[2]))*as.numeric(unlist(gp_sin[1])), las = 2, border = "blue", col = rgb(0.5,0.5,1, alpha = 0.5), main = "Deep Learning\ncos(x)", ylab = "Erro percentual (%)")
boxplot(as.numeric(unlist(gpa_sin[6]*100))~as.numeric(unlist(gpa_sin[2]))*as.numeric(unlist(gpa_sin[1])), las = 2, border = "blue", col = rgb(0.5,0.5,1, alpha = 0.5), main = "Deep Learning\ncos(x)", ylab = "Erro percentual (%)")
boxplot(as.numeric(unlist(gpa_sin[6]*100))~as.numeric(unlist(gpa_sin[2]))*as.numeric(unlist(gpa_sin[1])), las = 2, border = "blue", col = rgb(0.5,0.5,1, alpha = 0.5), main = "Deep Learning\ncos(x)", ylab = "Erro percentual (%)", ylim = (0,1000))
boxplot(as.numeric(unlist(gpa_sin[6]*100))~as.numeric(unlist(gpa_sin[2]))*as.numeric(unlist(gpa_sin[1])), las = 2, border = "blue", col = rgb(0.5,0.5,1, alpha = 0.5), main = "Deep Learning\ncos(x)", ylab = "Erro percentual (%)", ylim = c(0,1000))
boxplot(as.numeric(unlist(gpa_sin[6]*100))~as.numeric(unlist(gpa_sin[2]))*as.numeric(unlist(gpa_sin[1])), las = 2, border = "blue", col = rgb(0.5,0.5,1, alpha = 0.5), main = "Deep Learning\ncos(x)", ylab = "Erro percentual (%)", ylim = c(0,200))
boxplot(as.numeric(unlist(gpa_tan[6]*100))~as.numeric(unlist(gpa_tan[2]))*as.numeric(unlist(gpa_tan[1])), las = 2, border = "blue", col = rgb(0.5,0.5,1, alpha = 0.5), main = "Deep Learning\ncos(x)", ylab = "Erro percentual (%)", ylim = c(0,200))
boxplot(as.numeric(unlist(gpa_tan[6]*100))~as.numeric(unlist(gpa_tan[2]))*as.numeric(unlist(gpa_tan[1])), las = 2, border = "blue", col = rgb(0.5,0.5,1, alpha = 0.5), main = "Deep Learning\ncos(x)", ylab = "Erro percentual (%)")
boxplot(as.numeric(unlist(gp_tan[6]*100))~as.numeric(unlist(gp_tan[2]))*as.numeric(unlist(gp_tan[1])), las = 2, border = "blue", col = rgb(0.5,0.5,1, alpha = 0.5), main = "Deep Learning\ncos(x)", ylab = "Erro percentual (%)")
View(gpa_pol)
boxplot(as.numeric(unlist(gpa_pol[6]*100))~as.numeric(unlist(gpa_pol[2]))*as.numeric(unlist(gpa_pol[1])), las = 2, border = "blue", col = rgb(0.5,0.5,1, alpha = 0.5), main = "Deep Learning\ncos(x)", ylab = "Erro percentual (%)", ylim=c(0,70))
boxplot(as.numeric(unlist(gpa_pol[6]*100))~as.numeric(unlist(gpa_pol[2]))*as.numeric(unlist(gpa_pol[1])), las = 2, border = "blue", col = rgb(0.5,0.5,1, alpha = 0.5), main = "Deep Learning\ncos(x)", ylab = "Erro percentual (%)")
boxplot(as.numeric(unlist(gpa_pol[5]*100))~as.numeric(unlist(gpa_pol[2]))*as.numeric(unlist(gpa_pol[1])), las = 2, border = "blue", col = rgb(0.5,0.5,1, alpha = 0.5), main = "Deep Learning\ncos(x)", ylab = "Erro percentual (%)")
boxplot(as.numeric(unlist(gpa_pol[5]*100))~as.numeric(unlist(gpa_pol[2]))*as.numeric(unlist(gpa_pol[1])), las = 2, border = "blue", col = rgb(0.5,0.5,1, alpha = 0.5), main = "Deep Learning\ncos(x)", ylab = "Erro percentual (%)", ylim = c(0,100))
boxplot(as.numeric(unlist(gp_pol[5]*100))~as.numeric(unlist(gp_pol[2]))*as.numeric(unlist(gp_pol[1])), las = 2, border = "blue", col = rgb(0.5,0.5,1, alpha = 0.5), main = "Deep Learning\ncos(x)", ylab = "Erro percentual (%)", ylim = c(0,100))
boxplot(as.numeric(unlist(dl_pol[5]*100))~as.numeric(unlist(dl_pol[2]))*as.numeric(unlist(dl_pol[1])), las = 2, border = "blue", col = rgb(0.5,0.5,1, alpha = 0.5), main = "Deep Learning\ncos(x)", ylab = "Erro percentual (%)", ylim = c(0,100))
boxplot(as.numeric(unlist(dla_pol[5]*100))~as.numeric(unlist(dla_pol[2]))*as.numeric(unlist(dla_pol[1])), las = 2, border = "blue", col = rgb(0.5,0.5,1, alpha = 0.5), main = "Deep Learning\ncos(x)", ylab = "Erro percentual (%)", ylim = c(0,100))
View(gpa_e)
