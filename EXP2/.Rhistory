plot(z~y)
surface3d(s$x,s$y,s$z)
2**4
x<-seq(-10,10,4)
x<-x/10
y<-x
z<-(1/(1+x**(-4)))+(1/(1+y**(-4)))
s=interp(x,y,z)
p <- plot_ly(x=s$x,y=s$y,z=s$z) %>% add_surface()
p
x<-seq(-50,50,4)
x<-x/10
y<-x
z<-(1/(1+x**(4)))+(1/(1+y**(4)))
s=interp(x,y,z)
p <- plot_ly(x=s$x,y=s$y,z=s$z) %>% add_surface()
p
x<-seq(-50,50,4)
x<-x/10
y<-x
z<-sin(x)*cos(y)
s=interp(x,y,z)
p <- plot_ly(x=s$x,y=s$y,z=s$z) %>% add_surface()
p
x<-seq(-50,50)
x<-x/10
y<-x
z<-sin(x)*cos(y)
s=interp(x,y,z)
p <- plot_ly(x=s$x,y=s$y,z=s$z) %>% add_surface()
p
x<-seq(-50000,50000)
x<-x/10000
y<-x
z<-sin(x)*cos(y)
s=interp(x,y,z)
p <- plot_ly(x=s$x,y=s$y,z=s$z) %>% add_surface()
p
x<-seq(-10,10,4)
x<-x/10
y<-x
z<-x*y
s=interp(x,y,z)
p <- plot_ly(x=s$x,y=s$y,z=s$z) %>% add_surface()
p
library(akima)
library(rgl)
library(plotly)
x<-seq(-10,10,4)
x<-x/10
y<-x
z<-x*y
s=interp(x,y,z)
p <- plot_ly(x=s$x,y=s$y,z=s$z) %>% add_surface()
p
min(x)
max(x)
x<-seq(-100,100,4)
x<-x/10
y<-x
z<-x*y
s=interp(x,y,z)
p <- plot_ly(x=s$x,y=s$y,z=s$z) %>% add_surface()
p
hist(T)
hist(M)
hist(M, xlab = "MSE", ylab = "Frequência")
hist(M, xlab = "MSE", ylab = "Frequência", title = "Experimento 1 - Deep Learning")
hist(M, xlab = "MSE", ylab = "Frequência")
hist(M, xlab = "MSE", ylab = "Frequência")
title("Experimento 1 - Deep Learning")
hist(M, xlab = "MSE", ylab = "Frequência", main = "Experimento 1 - Deep Learning")
read.csv("INFO_GP_EXP.csv",quote = "")
read.csv("INFO_GP_EXP1.csv",quote = "")
GP = read.csv("INFO_GP_EXP1.csv",quote = "")
View(GP)
hist(as.numeric(unlist(GP[4])), xlab = "MSE", ylab = "Frequência", main = "Experimento 1 - Genetic Programming")
setwd("C:/Users/Ícaro/Dropbox/PIBIC/IC_2017/EXP2")
dl = read.csv("DL/INFO_DL_EXP2.csv", quote ="")
View(dl)
dl = read.csv("DL/INFO_DL_EXP2.csv", quote ="", header = TRUE)
View(dl)
dl = read.csv("DL/INFO_DL_EXP2.csv", quote ="", header = FALSE)
dla = read.csv("DL/INFO_DL_EXP2_Alea.csv", quote ="", header = FALSE)
View(dla)
gp = read.csv("GP/INFO_GP_EXP2.csv", quote = "")
View(gp)
gp = read.csv("GP/INFO_GP_EXP2.csv", quote = "", header = FALSE)
gpr = read.csv("GP/INFO_GP_EXP2_b.csv.csv", quote = "", header = FALSE)
gpr = read.csv("GP/INFO_GP_EXP2_b.csv", quote = "", header = FALSE)
View(gpr)
gpa = read.csv("GP/INFO_GP_EXP2_ALEA.csv.csv", quote = "", header = FALSE)
gpa = read.csv("GP/INFO_GP_EXP2_ALEA.csv", quote = "", header = FALSE)
View(gpa)
View(gp)
par(mfrow = (1,2))
par(mfrow = c(1,2))
boxplot(as.numeric(unlist(dl[4]))~as.numeric(unlist(dl[2])))
boxplot(as.numeric(unlist(dl[4]))~as.numeric(unlist(dl[2]))*as.numeric(unlist(dl[1])))
boxplot(as.numeric(unlist(dl[4]))~as.numeric(unlist(dl[2]))*as.numeric(unlist(dl[1])), las=2)
boxplot(as.numeric(unlist(dla[4]))~as.numeric(unlist(dla[2]))*as.numeric(unlist(dla[1])), las=2)
boxplot(as.numeric(unlist(dl[4]))~as.numeric(unlist(dl[2]))*as.numeric(unlist(dl[1])), las=2, main = "Amostragem com Passo", ylab = "MSE", xlab = "Número de Amostras . Arquitetura")
boxplot(as.numeric(unlist(dl[4]))~as.numeric(unlist(dl[2]))*as.numeric(unlist(dl[1])), las=2, main = "Amostragem com Passo", ylab = "MSE")
title(xlab = "Número de Amostras . Arquitetura", line = 1)
title(xlab = "Número de Amostras . Arquitetura", line = 0)
title(xlab = "Número de Amostras . Arquitetura", line = 3)
title(xlab = "Número de Amostras . Arquitetura", line = 4)
boxplot(as.numeric(unlist(dl[4]))~as.numeric(unlist(dl[2]))*as.numeric(unlist(dl[1])), las=2, main = "Amostragem com Passo", ylab = "MSE")
title(xlab = "Número de Amostras . Arquitetura", line = 4)
boxplot(as.numeric(unlist(dla[4]))~as.numeric(unlist(dla[2]))*as.numeric(unlist(dla[1])), las=2, main = "Amostragem Aleatória")
boxplot(as.numeric(unlist(dl[4]))~as.numeric(unlist(dl[2]))*as.numeric(unlist(dl[1])), las=2, main = "Amostragem com Passo", ylab = "MSE")
title(xlab = "Número de Amostras . Arquitetura", line = 4)
boxplot(as.numeric(unlist(dla[4]))~as.numeric(unlist(dla[2]))*as.numeric(unlist(dla[1])), las=2, main = "Amostragem Aleatória", ylab = "MSE")
title(xlab = "Número de Amostras . Arquitetura", line = 4)
boxplot(as.numeric(unlist(dl[5]))~as.numeric(unlist(dl[2]))*as.numeric(unlist(dl[1])), las=2, main = "Amostragem com Passo", ylab = "MSE")
par(mfrow=c(1,1))
boxplot(as.numeric(unlist(dl[5]))~as.numeric(unlist(dl[2]))*as.numeric(unlist(dl[1])), las=2, main = "Amostragem com Passo", ylab = "MSE")
boxplot(as.numeric(unlist(dl[5]))~as.numeric(unlist(dl[2]))*as.numeric(unlist(dl[1])), las=2, main = "Amostragem com Passo", ylab = "MSE", ylim=c(0,3))
boxplot(as.numeric(unlist(dl[5]))~as.numeric(unlist(dl[2]))*as.numeric(unlist(dl[1])), las=2, main = "Amostragem com Passo", ylab = "MSE", ylim=c(1,3))
boxplot(as.numeric(unlist(dl[5]))~as.numeric(unlist(dl[2]))*as.numeric(unlist(dl[1])), las=2, main = "Experimento I - Etapa II\nTempo de Execução - Deep Learning", ylab = "Tempo de Execução (s)", ylim=c(1,3))
title(xlab = "Número de Amostras . Arquitetura", line = 4)
par(mfrow=c(1,2))
boxplot(as.numeric(unlist(gp[5]))~as.numeric(unlist(gp[2]))*as.numeric(unlist(gp[1])), las=2, main = "Amostragem com Passo", ylab = "MSE")
a = which(gp[4]>5)
a = which(gp[4,]>5)
a = which(gp[4]<5)
boxplot(as.numeric(unlist(gp[4]))~as.numeric(unlist(gp[2]))*as.numeric(unlist(gp[1])), las=2, main = "Amostragem com Passo", ylab = "MSE")
boxplot(as.numeric(unlist(gpa[4]))~as.numeric(unlist(gpa[2]))*as.numeric(unlist(gpa[1])), las=2, main = "Amostragem com Passo", ylab = "MSE")
boxplot(as.numeric(unlist(gp[4]))~as.numeric(unlist(gp[2]))*as.numeric(unlist(gp[1])), las=2, main = "Amostragem com Passo", ylab = "MSE")
boxplot(as.numeric(unlist(gp[4]))~as.numeric(unlist(gp[2]))*as.numeric(unlist(gp[1])), las=2, main = "Amostragem com Passo", ylab = "MSE", ylim = C(1,1.17))
boxplot(as.numeric(unlist(gp[4]))~as.numeric(unlist(gp[2]))*as.numeric(unlist(gp[1])), las=2, main = "Amostragem com Passo", ylab = "MSE", ylim=c(1,3))
boxplot(as.numeric(unlist(gp[4]))~as.numeric(unlist(gp[2]))*as.numeric(unlist(gp[1])), las=2, main = "Amostragem com Passo", ylab = "MSE", ylim=c(1,1.17))
boxplot(as.numeric(unlist(gp[4]))~as.numeric(unlist(gp[2]))*as.numeric(unlist(gp[1])), las=2, main = "Amostragem com Passo", ylab = "MSE", ylim=c(1.03,1.17))
title(xlab = "Número de Amostras . Arquitetura", line = 4)
title(xlab = "Número de Amostras . Arquitetura", line = 5)
title(xlab = "Número de Amostras . Arquitetura", line = 4.1)
boxplot(as.numeric(unlist(gp[4]))~as.numeric(unlist(gp[2]))*as.numeric(unlist(gp[1])), las=2, main = "Amostragem com Passo", ylab = "MSE", ylim=c(1.03,1.17))
boxplot(as.numeric(unlist(gp[4]))~as.numeric(unlist(gp[2]))*as.numeric(unlist(gp[1])), las=2, main = "Amostragem com Passo", ylab = "MSE", ylim=c(1.03,1.17))
title(xlab = "Número de Amostras . Arquitetura", line = 4.1)
title(xlab = "Número de Amostras . Arquitetura", line = 4.2)
boxplot(as.numeric(unlist(gp[4]))~as.numeric(unlist(gp[2]))*as.numeric(unlist(gp[1])), las=2, main = "Amostragem com Passo", ylab = "MSE", ylim=c(1.03,1.17))
boxplot(as.numeric(unlist(gp[4]))~as.numeric(unlist(gp[2]))*as.numeric(unlist(gp[1])), las=2, main = "Amostragem com Passo", ylab = "MSE", ylim=c(1.03,1.17))
title(xlab = "Número de Amostras . Arquitetura", line = 4.2)
boxplot(as.numeric(unlist(gpa[4]))~as.numeric(unlist(gpa[2]))*as.numeric(unlist(gpa[1])), las=2, main = "Amostragem Aleatória", ylab = "MSE", ylim=c(1.03,1.17))
boxplot(as.numeric(unlist(gp[4]))~as.numeric(unlist(gp[2]))*as.numeric(unlist(gp[1])), las=2, main = "Amostragem com Passo", ylab = "MSE", ylim=c(1.03,1.18))
title(xlab = "Número de Amostras . Arquitetura", line = 4.2)
boxplot(as.numeric(unlist(gpa[4]))~as.numeric(unlist(gpa[2]))*as.numeric(unlist(gpa[1])), las=2, main = "Amostragem Aleatória", ylab = "MSE", ylim=c(1.03,1.18))
title(xlab = "Número de Amostras . Arquitetura", line = 4.2)
boxplot(as.numeric(unlist(gp[4]))~as.numeric(unlist(gp[2]))*as.numeric(unlist(gp[1])), las=2, main = "Amostragem com Passo", ylab = "MSE", ylim=c(1.03,1.18))
title(xlab = "Número de Amostras . Tamanho Máximo de Árvore", line = 4.2)
boxplot(as.numeric(unlist(gpa[4]))~as.numeric(unlist(gpa[2]))*as.numeric(unlist(gpa[1])), las=2, main = "Amostragem Aleatória", ylab = "MSE", ylim=c(1.03,1.18))
title(xlab = "Número de Amostras . Tamanho Máximo de Árvore", line = 4.2)
boxplot(as.numeric(unlist(gp[4]))~as.numeric(unlist(gp[2]))*as.numeric(unlist(gp[1])), las=2, main = "Amostragem com Passo", ylab = "MSE", ylim=c(1.03,1.18))
boxplot(as.numeric(unlist(gpr[4]))~as.numeric(unlist(gpr[2]))*as.numeric(unlist(gpr[1])), las=2, main = "Amostragem com Passo", ylab = "MSE", ylim=c(1.03,1.18))
gpr <- gpr[-which(gpr[1]==90),]
boxplot(as.numeric(unlist(gp[4]))~as.numeric(unlist(gp[2]))*as.numeric(unlist(gp[1])), las=2, main = "Amostragem com Passo", ylab = "MSE", ylim=c(1.03,1.18))
gpr <- gpr[-which(gpr[1]==90),]
gpr = read.csv("GP/INFO_GP_EXP2_b.csv", quote = "", header = FALSE)
gpr <- gpr[-which(gpr[1]==90),]
boxplot(as.numeric(unlist(gpr[4]))~as.numeric(unlist(gpr[2]))*as.numeric(unlist(gpr[1])), las=2, main = "Amostragem com Passo", ylab = "MSE", ylim=c(1.03,1.18))
boxplot(as.numeric(unlist(gp[4]))~as.numeric(unlist(gp[2]))*as.numeric(unlist(gp[1])), las=2, main = "Genetic Programming", ylab = "MSE", ylim=c(1.03,1.18))
title(xlab = "Número de Amostras . Tamanho Máximo de Árvore", line = 4.2)
boxplot(as.numeric(unlist(gpr[4]))~as.numeric(unlist(gpr[2]))*as.numeric(unlist(gpr[1])), las=2, main = "Genetic Programming Reduzido", ylab = "MSE", ylim=c(1.03,1.18))
title(xlab = "Número de Amostras . Tamanho Máximo de Árvore", line = 4.2)
boxplot(as.numeric(unlist(gp[6]))~as.numeric(unlist(gp[2]))*as.numeric(unlist(gp[1])), las=2, main = "Genetic Programming", ylab = "Tempo de Execução (s)")
boxplot(as.numeric(unlist(gp[6]/60))~as.numeric(unlist(gp[2]))*as.numeric(unlist(gp[1])), las=2, main = "Genetic Programming", ylab = "Tempo de Execução (min)")
boxplot(as.numeric(unlist(gp[6]/60))~as.numeric(unlist(gp[2]))*as.numeric(unlist(gp[1])), las=2, main = "Genetic Programming", ylab = "Tempo de Execução (min)")
boxplot(as.numeric(unlist(gpr[6]/60))~as.numeric(unlist(gpr[2]))*as.numeric(unlist(gpr[1])), las=2, main = "Genetic Programming Reduzido", ylab = "MSE")
boxplot(as.numeric(unlist(gpr[6]/60))~as.numeric(unlist(gpr[2]))*as.numeric(unlist(gpr[1])), las=2, main = "Genetic Programming Reduzido", ylab = "Tempo de Execução (min)")
boxplot(as.numeric(unlist(gpr[6]/60))~as.numeric(unlist(gpr[2]))*as.numeric(unlist(gpr[1])), las=2, main = "Genetic Programming Reduzido", ylab = "Tempo de Execução (min)", ylab = c(0,35))
boxplot(as.numeric(unlist(gpr[6]/60))~as.numeric(unlist(gpr[2]))*as.numeric(unlist(gpr[1])), las=2, main = "Genetic Programming Reduzido", ylab = "Tempo de Execução (min)", ylim = c(0,35))
boxplot(as.numeric(unlist(gp[6]/60))~as.numeric(unlist(gp[2]))*as.numeric(unlist(gp[1])), las=2, main = "Genetic Programming", ylab = "Tempo de Execução (min)")
boxplot(as.numeric(unlist(gp[6]/60))~as.numeric(unlist(gp[2]))*as.numeric(unlist(gp[1])), las=2, main = "Genetic Programming", ylab = "Tempo de Execução (min)", ylim=c(0,35))
title(xlab = "Número de Amostras . Tamanho Máximo de Árvore", line = 4.2)
boxplot(as.numeric(unlist(gpr[6]/60))~as.numeric(unlist(gpr[2]))*as.numeric(unlist(gpr[1])), las=2, main = "Genetic Programming Reduzido", ylab = "Tempo de Execução (min)", ylim = c(0,35))
title(xlab = "Número de Amostras . Tamanho Máximo de Árvore", line = 4.2)
par(mfrow=c(1,4))
par(mfrow=c(1,3))
boxplot(as.numeric(unlist(gpr[4]))~as.numeric(unlist(gpr[2])), las=2, main = "Genetic Programming Reduzido", ylab = "MSE")
boxplot(as.numeric(unlist(gpr[4]))~as.numeric(unlist(gpr[2])), main = "Genetic Programming Reduzido", ylab = "MSE")
boxplot(as.numeric(unlist(gpr[4]))~as.numeric(unlist(gpr[2])), main = "Genetic Programming Reduzido", ylab = "MSE", xlab="Número de Amostras")
boxplot(as.numeric(unlist(dl[4]))~as.numeric(unlist(dl[2])), main = "Deep Learning", ylab = "MSE", xlab="Número de Amostras")
boxplot(as.numeric(unlist(gpr[4]))~as.numeric(unlist(gpr[2])), main = "Genetic Programming Reduzido", ylab = "MSE", xlab="Número de Amostras")
boxplot(as.numeric(unlist(gp[4]))~as.numeric(unlist(gp[2])), main = "Genetic Programming", ylab = "MSE", xlab="Número de Amostras")
boxplot(as.numeric(unlist(dl[4]))~as.numeric(unlist(dl[2])), main = "Deep Learning", ylab = "MSE", xlab="Número de Amostras",ylim=c(1,1.20))
boxplot(as.numeric(unlist(dl[4]))~as.numeric(unlist(dl[2])), main = "Deep Learning", ylab = "MSE", xlab="Número de Amostras")
boxplot(as.numeric(unlist(dl[4]))~as.numeric(unlist(dl[2])), main = "Deep Learning", ylab = "MSE", xlab="Número de Amostras",ylim=c(1,1.80))
boxplot(as.numeric(unlist(dl[4]))~as.numeric(unlist(dl[2])), main = "Deep Learning", ylab = "MSE", xlab="Número de Amostras",ylim=c(1,1.80))
boxplot(as.numeric(unlist(gpr[4]))~as.numeric(unlist(gpr[2])), main = "Genetic Programming Reduzido", ylab = "MSE", xlab="Número de Amostras", ,ylim=c(1,1.80))
boxplot(as.numeric(unlist(gp[4]))~as.numeric(unlist(gp[2])), main = "Genetic Programming", ylab = "MSE", xlab="Número de Amostras",,ylim=c(1,1.80))
boxplot(as.numeric(unlist(dl[4]))~as.numeric(unlist(dl[2])), main = "Deep Learning", ylab = "MSE", xlab="Número de Amostras",ylim=c(1,1.40))
boxplot(as.numeric(unlist(gpr[4]))~as.numeric(unlist(gpr[2])), main = "Genetic Programming Reduzido", ylab = "MSE", xlab="Número de Amostras", ,ylim=c(1,1.40))
boxplot(as.numeric(unlist(gp[4]))~as.numeric(unlist(gp[2])), main = "Genetic Programming", ylab = "MSE", xlab="Número de Amostras",,ylim=c(1,1.40))
g = as.numeric(unlist(dl[4]))
m<-mean(g)
std<-sqrt(var(g))
hist(g, density=20, breaks=20, prob=TRUE,
xlab="x-variable", ylim=c(0, 2),
main="normal curve over histogram")
curve(dnorm(x, mean=m, sd=std),
col="darkblue", lwd=2, add=TRUE, yaxt="n")
g = as.numeric(unlist(dl[4]))
m<-mean(g)
std<-sqrt(var(g))
hist(g, density=20, breaks=20, prob=TRUE,
xlab="x-variable", ylim=c(0, 3),
main="normal curve over histogram")
curve(dnorm(x, mean=m, sd=std),
col="darkblue", lwd=2, add=TRUE, yaxt="n")
g = as.numeric(unlist(dl[4]))
m<-mean(g)
std<-sqrt(var(g))
hist(g, density=20, breaks=20, prob=TRUE,
xlab="x-variable", ylim=c(0, 5),
main="normal curve over histogram")
curve(dnorm(x, mean=m, sd=std),
col="darkblue", lwd=2, add=TRUE, yaxt="n")
g = as.numeric(unlist(dl[4]))
m<-mean(g)
std<-sqrt(var(g))
hist(g, density=20, breaks=20, prob=TRUE,
xlab="x-variable", ylim=c(0, 6),
main="normal curve over histogram")
curve(dnorm(x, mean=m, sd=std),
col="darkblue", lwd=2, add=TRUE, yaxt="n")
g = as.numeric(unlist(dl[4]))
m<-mean(g)
std<-sqrt(var(g))
hist(g, density=20, breaks=20, prob=TRUE,
xlab="x-variable", ylim=c(0, 8),
main="normal curve over histogram")
curve(dnorm(x, mean=m, sd=std),
col="darkblue", lwd=2, add=TRUE, yaxt="n")
g = as.numeric(unlist(dl[4]))
m<-mean(g)
std<-sqrt(var(g))
hist(g, density=20, breaks=35, prob=TRUE,
xlab="MSE", ylim=c(0, 8),
main="normal curve over histogram")
curve(dnorm(x, mean=m, sd=std),
col="darkblue", lwd=2, add=TRUE, yaxt="n")
g = as.numeric(unlist(dl[4]))
m<-mean(g)
std<-sqrt(var(g))
hist(g, density=20, breaks=15, prob=TRUE,
xlab="MSE", ylim=c(0, 8),
main="normal curve over histogram")
curve(dnorm(x, mean=m, sd=std),
col="darkblue", lwd=2, add=TRUE, yaxt="n")
g = as.numeric(unlist(dl[4]))
m<-mean(g)
std<-sqrt(var(g))
hist(g, density=20, breaks=10, prob=TRUE,
xlab="MSE", ylim=c(0, 8),
main="normal curve over histogram")
curve(dnorm(x, mean=m, sd=std),
col="darkblue", lwd=2, add=TRUE, yaxt="n")
g = as.numeric(unlist(dl[4]))
m<-mean(g)
std<-sqrt(var(g))
hist(g, density=20, breaks=20, prob=TRUE,
xlab="MSE", ylim=c(0, 8),
main="Densidade de Probabilidade")
curve(dnorm(x, mean=m, sd=std),
col="darkblue", lwd=2, add=TRUE, yaxt="n")
g = as.numeric(unlist(dl[4]))
m<-mean(g)
std<-sqrt(var(g))
hist(g, density=20, breaks=20, prob=TRUE,
xlab="MSE", ylab="Densidade de Probabilidade", ylim=c(0, 8),
main="Deep Learning")
curve(dnorm(x, mean=m, sd=std),
col="darkblue", lwd=2, add=TRUE, yaxt="n")
g = as.numeric(unlist(gpr[4]))
m<-mean(g)
std<-sqrt(var(g))
hist(g, density=20, breaks=20, prob=TRUE,
xlab="MSE", ylab="Densidade de Probabilidade", ylim=c(0, 8),
main="Deep Learning")
curve(dnorm(x, mean=m, sd=std),
col="darkblue", lwd=2, add=TRUE, yaxt="n")
stf
std
m
a = which(gpr[4]="NaN")
a = which(gpr[4]=="NaN")
a
a = which(gpr[4]=="Inf")
gpr<-gpr[-204,]
g = as.numeric(unlist(gpr[4]))
m<-mean(g)
std<-sqrt(var(g))
hist(g, density=20, breaks=20, prob=TRUE,
xlab="MSE", ylab="Densidade de Probabilidade", ylim=c(0, 8),
main="Deep Learning")
curve(dnorm(x, mean=m, sd=std),
col="darkblue", lwd=2, add=TRUE, yaxt="n")
g = as.numeric(unlist(gpr[4]))
m<-mean(g)
std<-sqrt(var(g))
hist(g, density=20, breaks=20, prob=TRUE,
xlab="MSE", ylab="Densidade de Probabilidade", ylim=c(0, 10),
main="Deep Learning")
curve(dnorm(x, mean=m, sd=std),
col="darkblue", lwd=2, add=TRUE, yaxt="n")
g = as.numeric(unlist(gpr[4]))
m<-mean(g)
std<-sqrt(var(g))
hist(g, density=20, breaks=20, prob=TRUE,
xlab="MSE", ylab="Densidade de Probabilidade", ylim=c(0, 20),
main="Deep Learning")
curve(dnorm(x, mean=m, sd=std),
col="darkblue", lwd=2, add=TRUE, yaxt="n")
g = as.numeric(unlist(gpr[4]))
m<-mean(g)
std<-sqrt(var(g))
hist(g, density=20, breaks=20, prob=TRUE,
xlab="MSE", ylab="Densidade de Probabilidade", ylim=c(0, 30),
main="Deep Learning")
curve(dnorm(x, mean=m, sd=std),
col="darkblue", lwd=2, add=TRUE, yaxt="n")
g = as.numeric(unlist(gpr[4]))
m<-mean(g)
std<-sqrt(var(g))
hist(g, density=20, breaks=20, prob=TRUE,
xlab="MSE", ylab="Densidade de Probabilidade", ylim=c(0, 30),
main="Genetic Programming Reduzido")
curve(dnorm(x, mean=m, sd=std),
col="darkblue", lwd=2, add=TRUE, yaxt="n")
g = as.numeric(unlist(gpr[4]))
m<-mean(g)
std<-sqrt(var(g))
hist(g, density=20, breaks=30, prob=TRUE,
xlab="MSE", ylab="Densidade de Probabilidade", ylim=c(0, 30),
main="Genetic Programming Reduzido")
curve(dnorm(x, mean=m, sd=std),
col="darkblue", lwd=2, add=TRUE, yaxt="n")
g = as.numeric(unlist(gpr[4]))
m<-mean(g)
std<-sqrt(var(g))
hist(g, density=20, breaks=10, prob=TRUE,
xlab="MSE", ylab="Densidade de Probabilidade", ylim=c(0, 30),
main="Genetic Programming Reduzido")
curve(dnorm(x, mean=m, sd=std),
col="darkblue", lwd=2, add=TRUE, yaxt="n")
g = as.numeric(unlist(gpr[4]))
m<-mean(g)
std<-sqrt(var(g))
hist(g, density=20, breaks=20, prob=TRUE,
xlab="MSE", ylab="Densidade de Probabilidade", ylim=c(0, 30),
main="Genetic Programming Reduzido")
curve(dnorm(x, mean=m, sd=std),
col="darkblue", lwd=2, add=TRUE, yaxt="n")
g = as.numeric(unlist(dl[4]))
m<-mean(g)
std<-sqrt(var(g))
hist(g, density=20, breaks=20, prob=TRUE,
xlab="MSE", ylab="Densidade de Probabilidade", ylim=c(0, 8),
main="Deep Learning")
curve(dnorm(x, mean=m, sd=std),
col="darkblue", lwd=2, add=TRUE, yaxt="n")
g = as.numeric(unlist(gpr[4]))
m<-mean(g)
std<-sqrt(var(g))
hist(g, density=20, breaks=20, prob=TRUE,
xlab="MSE", ylab="Densidade de Probabilidade", ylim=c(0, 30),
main="Genetic Programming Reduzido")
curve(dnorm(x, mean=m, sd=std),
col="darkblue", lwd=2, add=TRUE, yaxt="n")
g = as.numeric(unlist(gp[4]))
m<-mean(g)
std<-sqrt(var(g))
hist(g, density=20, breaks=20, prob=TRUE,
xlab="MSE", ylab="Densidade de Probabilidade", ylim=c(0, 30),
main="Genetic Programming")
curve(dnorm(x, mean=m, sd=std),
col="darkblue", lwd=2, add=TRUE, yaxt="n")
g = as.numeric(unlist(dl[4]))
m<-mean(g)
std<-sqrt(var(g))
hist(g, density=20, breaks=20, prob=TRUE,
xlab="MSE", ylab="Densidade de Probabilidade", ylim=c(0, 30),
main="Deep Learning")
curve(dnorm(x, mean=m, sd=std),
col="darkblue", lwd=2, add=TRUE, yaxt="n")
g = as.numeric(unlist(dl[4]))
m<-mean(g)
std<-sqrt(var(g))
hist(g, density=20, breaks=20, prob=TRUE,
xlab="MSE", ylab="Densidade de Probabilidade", ylim=c(0, 8),
main="Deep Learning")
curve(dnorm(x, mean=m, sd=std),
col="darkblue", lwd=2, add=TRUE, yaxt="n")
g = as.numeric(unlist(dl[4]))
m<-mean(g)
std<-sqrt(var(g))
hist(g, density=20, breaks=20, prob=TRUE,
xlab="MSE", ylab="Densidade de Probabilidade", ylim=c(0, 8),
main="Deep Learning")
curve(dnorm(x, mean=m, sd=std),
col="darkblue", lwd=2, add=TRUE, yaxt="n")
g = as.numeric(unlist(gpr[4]))
m<-mean(g)
std<-sqrt(var(g))
hist(g, density=20, breaks=20, prob=TRUE,
xlab="MSE", ylab="Densidade de Probabilidade", ylim=c(0, 30),
main="Genetic Programming Reduzido")
curve(dnorm(x, mean=m, sd=std),
col="darkblue", lwd=2, add=TRUE, yaxt="n")
1
g = as.numeric(unlist(gp[4]))
m<-mean(g)
std<-sqrt(var(g))
hist(g, density=20, breaks=20, prob=TRUE,
xlab="MSE", ylab="Densidade de Probabilidade", ylim=c(0, 30),
main="Genetic Programming")
curve(dnorm(x, mean=m, sd=std),
col="darkblue", lwd=2, add=TRUE, yaxt="n")
g = as.numeric(unlist(dl[4]))
m<-mean(g)
std<-sqrt(var(g))
hist(g, density=20, breaks=20, prob=TRUE,
xlab="MSE", ylab="Densidade de Probabilidade", ylim=c(0, 8), xlim=c(1,2),
main="Deep Learning")
curve(dnorm(x, mean=m, sd=std),
col="darkblue", lwd=2, add=TRUE, yaxt="n")
g = as.numeric(unlist(gpr[4]))
m<-mean(g)
std<-sqrt(var(g))
hist(g, density=20, breaks=20, prob=TRUE,
xlab="MSE", ylab="Densidade de Probabilidade", ylim=c(0, 30), xlim=c(1,2),
main="Genetic Programming Reduzido")
curve(dnorm(x, mean=m, sd=std),
col="darkblue", lwd=2, add=TRUE, yaxt="n")
1
g = as.numeric(unlist(dl[4]))
m<-mean(g)
std<-sqrt(var(g))
hist(g, density=20, breaks=20, prob=TRUE,
xlab="MSE", ylab="Densidade de Probabilidade", ylim=c(0, 8),
main="Deep Learning")
curve(dnorm(x, mean=m, sd=std),
col="darkblue", lwd=2, add=TRUE, yaxt="n")
g = as.numeric(unlist(gpr[4]))
m<-mean(g)
std<-sqrt(var(g))
hist(g, density=20, breaks=20, prob=TRUE,
xlab="MSE", ylab="Densidade de Probabilidade", ylim=c(0, 30),
main="Genetic Programming Reduzido")
curve(dnorm(x, mean=m, sd=std),
col="darkblue", lwd=2, add=TRUE, yaxt="n")
1
g = as.numeric(unlist(dl[4]))
m<-mean(g)
std<-sqrt(var(g))
hist(g, density=20, breaks=20, prob=TRUE,
xlab="MSE", ylab="Densidade de Probabilidade", ylim=c(0, 8),
main="Deep Learning")
curve(dnorm(x, mean=m, sd=std),
col="darkblue", lwd=2, add=TRUE, yaxt="n")
g = as.numeric(unlist(gpr[4]))
m<-mean(g)
std<-sqrt(var(g))
hist(g, density=20, breaks=20, prob=TRUE,
xlab="MSE", ylab="Densidade de Probabilidade", ylim=c(0, 30),
main="Genetic Programming Reduzido")
curve(dnorm(x, mean=m, sd=std),
col="darkblue", lwd=2, add=TRUE, yaxt="n")
1
g = as.numeric(unlist(dl[4]))
m<-mean(g)
std<-sqrt(var(g))
hist(g, density=20, breaks=20, prob=TRUE,
xlab="MSE", ylab="Densidade de Probabilidade", ylim=c(0, 8),
main="Deep Learning")
curve(dnorm(x, mean=m, sd=std),
col="darkblue", lwd=2, add=TRUE, yaxt="n")
g = as.numeric(unlist(gpr[4]))
m<-mean(g)
std<-sqrt(var(g))
hist(g, density=20, breaks=20, prob=TRUE,
xlab="MSE", ylab="Densidade de Probabilidade", ylim=c(0, 30),
main="Genetic Programming Reduzido")
curve(dnorm(x, mean=m, sd=std),
col="darkblue", lwd=2, add=TRUE, yaxt="n")
1
g = as.numeric(unlist(gp[4]))
m<-mean(g)
std<-sqrt(var(g))
hist(g, density=20, breaks=20, prob=TRUE,
xlab="MSE", ylab="Densidade de Probabilidade", ylim=c(0, 30),
main="Genetic Programming")
curve(dnorm(x, mean=m, sd=std),
col="darkblue", lwd=2, add=TRUE, yaxt="n")
g = as.numeric(unlist(dl[4]))
m<-mean(g)
std<-sqrt(var(g))
hist(g, density=20, breaks=20, prob=TRUE,
xlab="MSE", ylab="Densidade de Probabilidade", ylim=c(0, 8),
main="Deep Learning")
g = as.numeric(unlist(gpr[4]))
m<-mean(g)
std<-sqrt(var(g))
hist(g, density=20, breaks=20, prob=TRUE,
xlab="MSE", ylab="Densidade de Probabilidade", ylim=c(0, 30),
main="Genetic Programming Reduzido")
g = as.numeric(unlist(gp[4]))
m<-mean(g)
std<-sqrt(var(g))
hist(g, density=20, breaks=20, prob=TRUE,
xlab="MSE", ylab="Densidade de Probabilidade", ylim=c(0, 30),
main="Genetic Programming")
