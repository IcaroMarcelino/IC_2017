xlab="X (mm)", ylab="Densidade de Probabilidade", xlim = c(170.9,172.1),
main="Medidas na dimensão X da moldura")
curve(dnorm(x, mean=m, sd=std),
col="darkblue", lwd=2, add=TRUE, yaxt="n")
g = medidas$X
m<-mean(g)
std<-sqrt(var(g))
hist(g, density=20, breaks=3, prob=TRUE,
xlab="X (mm)", ylab="Densidade de Probabilidade", xlim = c(170.9,172.1),
main="Medidas na dimensão X da moldura")
curve(dnorm(x, mean=m, sd=std),
col="darkblue", lwd=2, add=TRUE, yaxt="n")
abline(v=171.0, lty = 2, col = "blue")
abline(v=171.0, lty = 2, col = "blue", pch = 19)
abline(v=172.0, lty = 2, col = "blue", pch = 19)
1/(6*std)
g = medidas$X
m<-mean(g)
std<-sqrt(var(g))
hist(g, density=20, breaks=3, prob=TRUE,
xlab="X (mm)", ylab="Densidade de Probabilidade", xlim = c(170,172.1),
main="Medidas na dimensão X da moldura")
curve(dnorm(x, mean=m, sd=std),
col="darkblue", lwd=2, add=TRUE, yaxt="n")
g = medidas$X
m<-mean(g)
std<-sqrt(var(g))
hist(g, density=20, breaks=3, prob=TRUE,
xlab="X (mm)", ylab="Densidade de Probabilidade", xlim = c(170.5,172.1),
main="Medidas na dimensão X da moldura")
curve(dnorm(x, mean=m, sd=std),
col="darkblue", lwd=2, add=TRUE, yaxt="n")
abline(v=172.0, lty = 2, col = "blue", lwd = 3)
abline(v=171.0, lty = 2, col = "blue", lwd = 3)
g = medidas$X
m<-mean(g)
std<-sqrt(var(g))
hist(g, density=20, breaks=3, prob=TRUE,
xlab="X (mm)", ylab="Densidade de Probabilidade", xlim = c(170.5,172.1),
main="Medidas na dimensão X da moldura")
curve(dnorm(x, mean=m, sd=std),
col="darkblue", lwd=2, add=TRUE, yaxt="n")
abline(v=172.0, lty = 2, col = "blue", lwd = 3)
abline(v=171.0, lty = 2, col = "blue", lwd = 3)
m
std
g = medidas$Y
m<-mean(g)
std<-sqrt(var(g))
hist(g, density=20, breaks=3, prob=TRUE,
xlab="Y (mm)", ylab="Densidade de Probabilidade", xlim = c(170.5,172.1),
main="Medidas na dimensão Y da moldura")
curve(dnorm(x, mean=m, sd=std),
col="darkblue", lwd=2, add=TRUE, yaxt="n")
abline(v=172.0, lty = 2, col = "blue", lwd = 3)
abline(v=171.0, lty = 2, col = "blue", lwd = 3)
m
boxplot(medidas$X,medidas$])
boxplot(medidas$X,medidas$y)
boxplot(medidas$X,medidas$Y)
boxplot(medidas$X,medidas$Y, names = c("X,"Y""))
boxplot(medidas$X,medidas$Y, names = c("X,"Y"))
boxplot(medidas$X,medidas$Y, names = c("X","Y"))
savehistory("~/tcn.Rhistory")
boxplot(medidas$X,medidas$Y, names = c("X","Y"), col = ("red", "blue"))
boxplot(medidas$X,medidas$Y, names = c("X","Y"), col = c("red", "blue"))
boxplot(medidas$X,medidas$Y, names = c("X","Y"), col = c("red", "blue"), border = c("red", "blue"))
boxplot(medidas$X,medidas$Y, names = c("X","Y"), col = c("light red", "light blue"), border = c("red", "blue"))
boxplot(medidas$X,medidas$Y, names = c("X","Y"), col = c("indianred", "light blue"), border = c("red", "blue"))
boxplot(medidas$X,medidas$Y, names = c("X","Y"), col = c("indianred1", "light blue"), border = c("red", "blue"))
boxplot(medidas$X,medidas$Y, names = c("X","Y"), col = c("indianred1", "light blue"), border = c("red", "blue"), main = "Dimensões da Moldura", xlab = "Eixo", ylab = "Comprimento (mm)")
library(readr)
Diametros <- read_csv("~/Diametros.csv")
View(Diametros)
g = Diametros$D1
m<-mean(g)
std<-sqrt(var(g))
hist(g, density=20, breaks=3, prob=TRUE,
xlab="Y (mm)", ylab="Densidade de Probabilidade", xlim = c(170.5,172.1),
main="Medidas na dimensão Y da moldura")
curve(dnorm(x, mean=m, sd=std),
col="darkblue", lwd=2, add=TRUE, yaxt="n")
g = Diametros$D1
m<-mean(g)
std<-sqrt(var(g))
hist(g, density=20, breaks=3, prob=TRUE,
xlab="Y (mm)", ylab="Densidade de Probabilidade",
main="Medidas na dimensão Y da moldura")
curve(dnorm(x, mean=m, sd=std),
col="darkblue", lwd=2, add=TRUE, yaxt="n")
g = Diametros$D1
m<-mean(g)
std<-sqrt(var(g))
hist(g, density=20, breaks=5, prob=TRUE,
xlab="Y (mm)", ylab="Densidade de Probabilidade",
main="Medidas na dimensão Y da moldura")
curve(dnorm(x, mean=m, sd=std),
col="darkblue", lwd=2, add=TRUE, yaxt="n")
g = Diametros$D1
m<-mean(g)
std<-sqrt(var(g))
hist(g, density=20, breaks=3, prob=TRUE,
xlab="Y (mm)", ylab="Densidade de Probabilidade", xlim = c(20,20.5),
main="Medidas na dimensão Y da moldura")
curve(dnorm(x, mean=m, sd=std),
col="darkblue", lwd=2, add=TRUE, yaxt="n")
g = Diametros$D1
m<-mean(g)
std<-sqrt(var(g))
hist(g, density=20, breaks=2, prob=TRUE,
xlab="Y (mm)", ylab="Densidade de Probabilidade", xlim = c(20,20.5),
main="Medidas na dimensão Y da moldura")
curve(dnorm(x, mean=m, sd=std),
col="darkblue", lwd=2, add=TRUE, yaxt="n")
g = Diametros$D1
m<-mean(g)
std<-sqrt(var(g))
hist(g, density=20, breaks=3, prob=TRUE,
xlab="Y (mm)", ylab="Densidade de Probabilidade", xlim = c(20,20.5),
main="Medidas na dimensão Y da moldura")
curve(dnorm(x, mean=m, sd=std),
col="darkblue", lwd=2, add=TRUE, yaxt="n")
g = Diametros$D1
m<-mean(g)
std<-sqrt(var(g))
hist(g, density=20, breaks=10, prob=TRUE,
xlab="Y (mm)", ylab="Densidade de Probabilidade", xlim = c(20,20.5),
main="Medidas na dimensão Y da moldura")
curve(dnorm(x, mean=m, sd=std),
col="darkblue", lwd=2, add=TRUE, yaxt="n")
g = Diametros$D1
m<-mean(g)
std<-sqrt(var(g))
hist(g, density=20, breaks=2, prob=TRUE,
xlab="Y (mm)", ylab="Densidade de Probabilidade", xlim = c(20,20.5),
main="Medidas na dimensão Y da moldura")
curve(dnorm(x, mean=m, sd=std),
col="darkblue", lwd=2, add=TRUE, yaxt="n")
abline(v=20, lty = 2, col = "blue", lwd = 3)
abline(v=20.5, lty = 2, col = "blue", lwd = 3)
g = Diametros$D1
m<-mean(g)
std<-sqrt(var(g))
hist(g, density=20, breaks=2, prob=TRUE,
xlab="Y (mm)", ylab="Densidade de Probabilidade", xlim = c(19.5,20.5),
main="Medidas na dimensão Y da moldura")
curve(dnorm(x, mean=m, sd=std),
col="darkblue", lwd=2, add=TRUE, yaxt="n")
abline(v=20.5, lty = 2, col = "blue", lwd = 3)
abline(v=19.5, lty = 2, col = "blue", lwd = 3)
abline(v=19.6, lty = 2, col = "red", lwd = 3)
abline(v=20.4, lty = 2, col = "red", lwd = 3)
0.8/(6*std)
abline(v=20.3, lty = 2, col = "red", lwd = 3)
0.6/(6*std)
g = Diametros$D1
m<-mean(g)
std<-sqrt(var(g))
hist(g, density=20, breaks=2, prob=TRUE,
xlab="Diâmetro (mm)", ylab="Densidade de Probabilidade", xlim = c(19.5,20.5),
main="Diâmetro 1")
curve(dnorm(x, mean=m, sd=std),
col="darkblue", lwd=2, add=TRUE, yaxt="n")
abline(v=20.5, lty = 2, col = "blue", lwd = 3)
abline(v=19.5, lty = 2, col = "blue", lwd = 3)
g = Diametros$D2
m<-mean(g)
std<-sqrt(var(g))
hist(g, density=20, breaks=2, prob=TRUE,
xlab="Diâmetro (mm)", ylab="Densidade de Probabilidade", xlim = c(29.5,30.5),
main="Diâmetro 2")
curve(dnorm(x, mean=m, sd=std),
col="darkblue", lwd=2, add=TRUE, yaxt="n")
abline(v=29.5, lty = 2, col = "blue", lwd = 3)
abline(v=30.5, lty = 2, col = "blue", lwd = 3)
abline(v=29.8, lty = 2, col = "red", lwd = 3)
abline(v=30.2, lty = 2, col = "red", lwd = 3)
g = Diametros$D3
m<-mean(g)
std<-sqrt(var(g))
hist(g, density=20, breaks=2, prob=TRUE,
xlab="Diâmetro (mm)", ylab="Densidade de Probabilidade", xlim = c(29.5,30.5),
main="Diâmetro 3")
curve(dnorm(x, mean=m, sd=std),
col="darkblue", lwd=2, add=TRUE, yaxt="n")
g = Diametros$D3
m<-mean(g)
std<-sqrt(var(g))
hist(g, density=20, breaks=2, prob=TRUE,
xlab="Diâmetro (mm)", ylab="Densidade de Probabilidade", xlim = c(39.5,40.5),
main="Diâmetro 3")
curve(dnorm(x, mean=m, sd=std),
col="darkblue", lwd=2, add=TRUE, yaxt="n")
g = Diametros$D3
m<-mean(g)
std<-sqrt(var(g))
hist(g, density=20, breaks=2, prob=TRUE,
xlab="Diâmetro (mm)", ylab="Densidade de Probabilidade", xlim = c(39,40.5),
main="Diâmetro 3")
curve(dnorm(x, mean=m, sd=std),
col="darkblue", lwd=2, add=TRUE, yaxt="n")
2/(6*std)
plot(Diametros$Medida, Diametros$D3)
points(Diametros$Medida, Diametros$D2)
plot(Diametros$Medida, Diametros$D3, ylim = c(0,40))
points(Diametros$Medida, Diametros$D2)
points(Diametros$Medida, Diametros$D1)
plot(Diametros$D3, c(40,40,40,40,40,40,40), ylim = c(0,40))
plot(c(40,40,40,40,40,40,40), Diametros$D3, ylim = c(0,40))
plot(c(40,40,40,40,40,40,40), Diametros$D3, xlim = c(0,45))
plot(c(40,40,40,40,40,40,40), Diametros$D3, ylim = c(0,40), xlim=c(0,45))
plot(c(30,30,30,30,30,30,30), Diametros$D2, ylim = c(0,40), xlim=c(0,45))
plot(c(40,40,40,40,40,40,40), Diametros$D3, ylim = c(0,40), xlim=c(0,45))
points(c(30,30,30,30,30,30,30), Diametros$D2, ylim = c(0,40), xlim=c(0,45))
points(c(20,20,20,20,20,20,20), Diametros$D1, ylim = c(0,40), xlim=c(0,45))
points(c(5,5,5,5,5,5,5), Diametros$D1, ylim = c(0,40), xlim=c(0,45))
points(c(2.5,2.5,2.5,2.5,2.5,2.5,2.5), Diametros$D1, ylim = c(0,40), xlim=c(0,45))
points(c(16,16,16,16,16,16,16), Diametros$D2, ylim = c(0,40), xlim=c(0,45))
plot(c(67,67,67,67,67,67,67), Diametros$D3, ylim = c(0,40), xlim=c(0,45))
plot(c(67,67,67,67,67,67,67), Diametros$D3, ylim = c(20,40), xlim=c(0,100))
points(c(16,16,16,16,16,16,16), Diametros$D2, ylim = c(20,40), xlim=c(0,100))
points(c(2.5,2.5,2.5,2.5,2.5,2.5,2.5), Diametros$D1, ylim = c(20,40), xlim=c(0,100))
lm(Diametros$D1~Diametros$Medida)
lm(Diametros$D2~Diametros$Medida)
lm(Diametros$D3~Diametros$Medida)
lm(Diametros$D1~Diametros$Medida)
lm(Diametros$D1~c(2.5,2.5,2.5,2.5,2.5,2.5,2.5))
tttt<-c(2.5,2.5,2.5,2.5,2.5,2.5,2.5)
lm(Diametros$D1~tttt)
tttt
lm(Diametros$D1~as.numeric(tttt))
lm(Diametros$D1~1)
lm(tttt~Diametros$D1)
plot(tttt,Diametros$D1)
plot(Diametros$D1~tttt)
plot(Diametros$D1~tttt)
plot(Diametros$D1,tttt)
g = Diametros$D3
m<-mean(g)
std<-sqrt(var(g))
hist(g, density=20, breaks=2, prob=TRUE,
xlab="Diâmetro (mm)", ylab="Densidade de Probabilidade", xlim = c(29.5,30.5),
main="Diâmetro 3")
curve(dnorm(x, mean=m, sd=std),
col="darkblue", lwd=2, add=TRUE, yaxt="n")
g = Diametros$D3
m<-mean(g)
std<-sqrt(var(g))
hist(g, density=20, breaks=2, prob=TRUE,
xlab="Diâmetro (mm)", ylab="Densidade de Probabilidade", xlim = c(39,40.5),
main="Diâmetro 3")
curve(dnorm(x, mean=m, sd=std),
col="darkblue", lwd=2, add=TRUE, yaxt="n")
g = Diametros$D3
m<-mean(g)
std<-sqrt(var(g))
hist(g, density=20, breaks=2, prob=TRUE,
xlab="Diâmetro (mm)", ylab="Densidade de Probabilidade", xlim = c(39,40.5), ylim = c(0,9),
main="Diâmetro 3")
curve(dnorm(x, mean=m, sd=std),
col="darkblue", lwd=2, add=TRUE, yaxt="n")
g = Diametros$D3
m<-mean(g)
std<-sqrt(var(g))
hist(g, density=20, breaks=2, prob=TRUE,
xlab="Diâmetro (mm)", ylab="Densidade de Probabilidade", xlim = c(39,40.5), ylim = c(0,12),
main="Diâmetro 3")
curve(dnorm(x, mean=m, sd=std),
col="darkblue", lwd=2, add=TRUE, yaxt="n")
g = Diametros$D3
m<-mean(g)
std<-sqrt(var(g))
hist(g, density=20, breaks=2, prob=TRUE,
xlab="Diâmetro (mm)", ylab="Densidade de Probabilidade", xlim = c(39,41), ylim = c(0,12),
main="Diâmetro 3")
curve(dnorm(x, mean=m, sd=std),
col="darkblue", lwd=2, add=TRUE, yaxt="n")
abline(v=41, lty = 2, col = "blue", lwd = 3)
abline(v=39, lty = 2, col = "blue", lwd = 3)
abline(v=39.5, lty = 2, col = "blue", lwd = 3)
abline(v=40.5, lty = 2, col = "blue", lwd = 3)
abline(v=41, lty = 2, col = "red", lwd = 3)
abline(v=39, lty = 2, col = "red", lwd = 3)
g = Diametros$D1
m<-mean(g)
std<-sqrt(var(g))
hist(g, density=20, breaks=2, prob=TRUE,
xlab="Diâmetro (mm)", ylab="Densidade de Probabilidade", xlim = c(39,41), ylim = c(0,12),
main="Diâmetro 3")
curve(dnorm(x, mean=m, sd=std),
col="darkblue", lwd=2, add=TRUE, yaxt="n")
g = Diametros$D1
m<-mean(g)
std<-sqrt(var(g))
hist(g, density=20, breaks=2, prob=TRUE,
xlab="Diâmetro (mm)", ylab="Densidade de Probabilidade", xlim = c(19.5,20.5),
main="Diâmetro 1")
curve(dnorm(x, mean=m, sd=std),
col="darkblue", lwd=2, add=TRUE, yaxt="n")
abline(v=19.5, lty = 2, col = "blue", lwd = 3)
abline(v=20.5, lty = 2, col = "blue", lwd = 3)
abline(v=20.4, lty = 2, col = "red", lwd = 3)
abline(v=19.6, lty = 2, col = "red", lwd = 3)
library(readr)
t <- read_csv("~/t.csv", col_names = FALSE)
View(t)
plot(t$X1, t$X2)
plot(t$X1, t$X2)
plot(t$X1, t$X2,pch=19)
lm(t$X1, t$X2)
lm(t$X1~t$X2)
lm(t$X2~t$X1)
m0<-lm(t$X2~t$X1)
abline(m0, col=2, lty=2, lwd=2)
plot(t$X1, t$X2,pch=19, main = "Desvios no Diâmetro", xlab="Comprimento (mm)", ylab="Desvio")
plot(t$X1, t$X2,pch=19, main = "Desvios no Diâmetro", xlab="Comprimento (mm)", ylab="Desvio (mm)")
abline(m0, col=2, lty=2, lwd=2)
legend("topleft", legend=c("Valores observados", "0.01618x - 0.26165"),
lty=c(NA,2), col=c(1,2), lwd=1:2, bty="n", pch=c(1,NA))
legend("topleft", legend=c("Valores observados", "0.01618x - 0.26165"),
lty=c(NA,2), col=c(1,2), lwd=1:2, bty="n", pch=c(19,NA))
abline(h = 0, col="blue", lty=2, lwd=2)
legend("topleft", legend=c("Valores observados", "0.01618x - 0.26165", "Desvio Ideal"),
lty=c(NA,2,2), col=c(1,2,"blue"), lwd=1:3, bty="n", pch=c(19,NA,NA))
mo[2]
m0[2]
m0
m0$coefficients[2]
a <- as.numeric(m0$coefficients[2])
a
atan(a)
atan(a)*180/pi
atan(a)*pi/180
atan(a)*180/pi
180/pi
f <- file("/dev/cu.usbmodem3a21", open="r")
nObs <- 50
Temperature <- rep(NA, nObs)
cycle <- 0
while(cycle<10){
time <- ((cycle*nObs):((cycle+1)*(nObs)))[-1]
plot(Temperature ~ time, t="n", ylim=c(18, 24),
main="Data stream from Arduino via USB port")
for(i in 1:nObs){
Temperature[i] <- scan(f, n=1, quiet=TRUE)
points(i + cycle*nObs, Temperature[i], pch=19)
Sys.sleep(0.05)
}
cycle <- cycle + 1
}
close(f)
setwd("C:/Users/Ícaro/Dropbox/PIBIC/IC_2017/Experimento_02")
gp_f1 <- read.csv("GP/Result_GP_EXP2_FUNC_1.csv", quote ="", header=FALSE)
gp_f1 <- gp_f1[which(gp_f1[5] != Inf), ]
gp_f1 <- gp_f1[which(gp_f1[5] != 'NaN'), ]
gp_f2 <- read.csv("GP/Result_GP_EXP2_FUNC_2.csv", quote ="", header=FALSE)
gp_f2 <- gp_f2[which(gp_f2[5] != Inf), ]
gp_f2 <- gp_f2[which(gp_f2[5] != 'NaN'), ]
gp_f3 <- read.csv("GP/Result_GP_EXP2_FUNC_3.csv", quote ="", header=FALSE)
gp_f3 <- gp_f3[which(gp_f3[5] != Inf), ]
gp_f3 <- gp_f3[which(gp_f3[5] != 'NaN'), ]
gp_f4 <- read.csv("GP/Result_GP_EXP2_FUNC_4.csv", quote ="", header=FALSE)
gp_f4 <- gp_f4[which(gp_f4[5] != Inf), ]
gp_f4 <- gp_f4[which(gp_f4[5] != 'NaN'), ]
gp_f5 <- read.csv("GP/Result_GP_EXP2_FUNC_5.csv", quote ="", header=FALSE)
gp_f5 <- gp_f5[which(gp_f5[5] != Inf), ]
gp_f5 <- gp_f5[which(gp_f5[5] != 'NaN'), ]
gpa_f1 <- read.csv("GP/Result_GP_EXP2_FUNC_1_Alea.csv", quote ="", header=FALSE)
gpa_f1 <- gpa_f1[which(gpa_f1[5] != Inf), ]
gpa_f1 <- gpa_f1[which(gpa_f1[5] != 'NaN'), ]
gpa_f2 <- read.csv("GP/Result_GP_EXP2_FUNC_2_Alea.csv", quote ="", header=FALSE)
gpa_f2 <- gpa_f2[which(gpa_f2[5] != Inf), ]
gpa_f2 <- gpa_f2[which(gpa_f2[5] != 'NaN'), ]
gpa_f3 <- read.csv("GP/Result_GP_EXP2_FUNC_3_Alea.csv", quote ="", header=FALSE)
gpa_f3 <- gpa_f3[which(gpa_f3[5] != Inf), ]
gpa_f3 <- gpa_f3[which(gpa_f3[5] != 'NaN'), ]
gpa_f4 <- read.csv("GP/Result_GP_EXP2_FUNC_4_Alea.csv", quote ="", header=FALSE)
gpa_f4 <- gpa_f4[which(gpa_f4[5] != Inf), ]
gpa_f4 <- gpa_f4[which(gpa_f4[5] != 'NaN'), ]
gpa_f5 <- read.csv("GP/Result_GP_EXP2_FUNC_5_Alea.csv", quote ="", header=FALSE)
gpa_f5 <- gpa_f5[which(gpa_f5[5] != Inf), ]
gpa_f5 <- gpa_f5[which(gpa_f5[5] != 'NaN'), ]
#GP Reduzido
gpr_f1 <- read.csv("GP/Result_GP_EXP2_FUNC_1_Reduzido.csv", quote ="", header=FALSE)
gpr_f1 <- gpr_f1[which(gpr_f1[5] != Inf), ]
gpr_f1 <- gpr_f1[which(gpr_f1[5] != 'NaN'), ]
gpr_f2 <- read.csv("GP/Result_GP_EXP2_FUNC_2_Reduzido.csv", quote ="", header=FALSE)
gpr_f2 <- gpr_f2[which(gpr_f2[5] != Inf), ]
gpr_f2 <- gpr_f2[which(gpr_f2[5] != 'NaN'), ]
gpr_f3 <- read.csv("GP/Result_GP_EXP2_FUNC_3_Reduzido.csv", quote ="", header=FALSE)
gpr_f3 <- gpr_f3[which(gpr_f3[5] != Inf), ]
gpr_f3 <- gpr_f3[which(gpr_f3[5] != 'NaN'), ]
gpr_f4 <- read.csv("GP/Result_GP_EXP2_FUNC_4_Reduzido.csv", quote ="", header=FALSE)
gpr_f4 <- gpr_f4[which(gpr_f4[5] != Inf), ]
gpr_f4 <- gpr_f4[which(gpr_f4[5] != 'NaN'), ]
gpr_f5 <- read.csv("GP/Result_GP_EXP2_FUNC_5_Reduzido.csv", quote ="", header=FALSE)
gpr_f5 <- gpr_f5[which(gpr_f5[5] != Inf), ]
gpr_f5 <- gpr_f5[which(gpr_f5[5] != 'NaN'), ]
gpra_f1 <- read.csv("GP/Result_GP_EXP2_FUNC_1_Reduzido_Alea.csv", quote ="", header=FALSE)
gpra_f1 <- gpra_f1[which(gpra_f1[5] != Inf), ]
gpra_f1 <- gpra_f1[which(gpra_f1[5] != 'NaN'), ]
gpra_f2 <- read.csv("GP/Result_GP_EXP2_FUNC_2_Reduzido_Alea.csv", quote ="", header=FALSE)
gpra_f2 <- gpra_f2[which(gpra_f2[5] != Inf), ]
gpra_f2 <- gpra_f2[which(gpra_f2[5] != 'NaN'), ]
gpra_f3 <- read.csv("GP/Result_GP_EXP2_FUNC_3_Reduzido_Alea.csv", quote ="", header=FALSE)
gpra_f3 <- gpra_f3[which(gpra_f3[5] != Inf), ]
gpra_f3 <- gpra_f3[which(gpra_f3[5] != 'NaN'), ]
gpra_f4 <- read.csv("GP/Result_GP_EXP2_FUNC_4_Reduzido_Alea.csv", quote ="", header=FALSE)
gpra_f4 <- gpra_f4[which(gpra_f4[5] != Inf), ]
gpra_f4 <- gpra_f4[which(gpra_f4[5] != 'NaN'), ]
gpra_f5 <- read.csv("GP/Result_GP_EXP2_FUNC_5_Reduzido_Alea.csv", quote ="", header=FALSE)
gpra_f5 <- gpra_f5[which(gpra_f5[5] != Inf), ]
gpra_f5 <- gpra_f5[which(gpra_f5[5] != 'NaN'), ]
View(gpra_f5)
levels(gpra_f5[2])
levels(as.numeric(unlist(gpra_f5[2])))
boxplot(as.numeric(unlist(gp_f3[5]*100))~as.numeric(unlist(gp_f3[2]))*as.numeric(unlist(gp_f3[1])), las = 2, ylim=(c(0,70)), border = "blue", col = rgb(0.5,0.5,1, alpha = 0.5), main = "Genetic Programming\nFunção 4", ylab = "Erro percentual (%)")
boxplot(as.numeric(unlist(gpa_f3[5]*100))~as.numeric(unlist(gpa_f3[2]))*as.numeric(unlist(gpa_f3[1])), las = 2, ylim=(c(0,70)), border = "red", col = rgb(1,0.5,0.5, alpha = 0.5), add= TRUE)
boxplot(as.numeric(unlist(gp_f3[5]*100))~as.numeric(unlist(gp_f3[2]))*as.numeric(unlist(gp_f3[1])), las = 2, ylim=(c(0,70)), border = "blue", col = rgb(0.5,0.5,1, alpha = 0.5), main = "Genetic Programming\nFunção 4", ylab = "Erro percentual (%)")
boxplot(as.numeric(unlist(gpa_f3[5]*100))~as.numeric(unlist(gpa_f3[2]))*as.numeric(unlist(gpa_f3[1])), las = 2, ylim=(c(0,70)), border = "red", col = rgb(1,0.5,0.5, alpha = 0.5), add= TRUE)
boxplot(as.numeric(unlist(gpa_f3[5]*100))~as.numeric(unlist(gpa_f3[2]))*as.numeric(unlist(gpa_f3[1])), las = 2, ylim=(c(0,70)), border = "red", col = rgb(1,0.5,0.5, alpha = 0.5))
boxplot(as.numeric(unlist(gp_f3[5]*100))~as.numeric(unlist(gp_f3[2]))*as.numeric(unlist(gp_f3[1])), las = 2, ylim=(c(0,70)), border = "blue", col = rgb(0.5,0.5,1, alpha = 0.5), main = "Genetic Programming\nFunção 4", ylab = "Erro percentual (%)")
boxplot(as.numeric(unlist(gpa_f3[5]*100))~as.numeric(unlist(gpa_f3[2]))*as.numeric(unlist(gpa_f3[1])), las = 2, ylim=(c(0,70)), border = "red", col = rgb(1,0.5,0.5, alpha = 0.5))
boxplot(as.numeric(unlist(gpr_f4[5]*100))~as.numeric(unlist(gpr_f4[2]))*as.numeric(unlist(gpr_f4[1])), las = 2, ylim=(c(0,70)), border = "blue", col = rgb(0.5,0.5,1, alpha = 0.5), main = "Genetic Programming\nFunção 1 - GP Reduzido", ylab = "Erro percentual (%)")
boxplot(as.numeric(unlist(gpra_f4[5]*100))~as.numeric(unlist(gpra_f4[2]))*as.numeric(unlist(gpra_f4[1])), las = 2, ylim=(c(0,70)), border = "red", col = rgb(1,0.5,0.5, alpha = 0.5), add= TRUE)
boxplot(abs(as.numeric(unlist(gpr_f2[5]*100)))~as.numeric(unlist(gpr_f2[2]))*as.numeric(unlist(gpr_f2[1])), las = 2, ylim=(c(0,70)), border = "blue", col = rgb(0.5,0.5,1, alpha = 0.5), main = "Genetic Programming\nFunção 2 GP Reduzido", ylab = "Erro percentual (%)")
boxplot(as.numeric(abs(unlist(gpra_f2[5]*100)))~as.numeric(unlist(gpra_f2[2]))*as.numeric(unlist(gpra_f2[1])), las = 2, ylim=(c(0,70)), border = "red", col = rgb(1,0.5,0.5, alpha = 0.5), add= TRUE)
boxplot(as.numeric(unlist(gpr_f1[5]*100))~as.numeric(unlist(gpr_f1[2]))*as.numeric(unlist(gpr_f1[1])), las = 2, ylim=(c(0,70)), border = "blue", col = rgb(0.5,0.5,1, alpha = 0.5), main = "Genetic Programming\nFunção 3GP Reduzido", ylab = "Erro percentual (%)")
boxplot(as.numeric(unlist(gpra_f1[5]*100))~as.numeric(unlist(gpra_f1[2]))*as.numeric(unlist(gpra_f1[1])), las = 2, ylim=(c(0,70)), border = "red", col = rgb(1,0.5,0.5, alpha = 0.5), add= TRUE)
boxplot(as.numeric(unlist(gpr_f3[5]*100))~as.numeric(unlist(gpr_f3[2]))*as.numeric(unlist(gpr_f3[1])), las = 2, ylim=(c(0,70)), border = "blue", col = rgb(0.5,0.5,1, alpha = 0.5), main = "Genetic Programming\nFunção 4GP Reduzido", ylab = "Erro percentual (%)")
boxplot(as.numeric(unlist(gpra_f3[5]*100))~as.numeric(unlist(gpra_f3[2]))*as.numeric(unlist(gpra_f3[1])), las = 2, ylim=(c(0,70)), border = "red", col = rgb(1,0.5,0.5, alpha = 0.5), add= TRUE)
boxplot(as.numeric(unlist(gpr_f51[5]*100))~as.numeric(unlist(gpr_f51[2]))*as.numeric(unlist(gpr_f51[1])), las = 2, ylim=(c(0,70)), border = "blue", col = rgb(0.5,0.5,1, alpha = 0.5), main = "Genetic Programming\nFunção 5 - GP Reduzido", ylab = "Erro percentual (%)")
boxplot(as.numeric(unlist(gpra_f5[5]*100))~as.numeric(unlist(gpra_f5[2]))*as.numeric(unlist(gpra_f5[1])), las = 2, ylim=(c(0,70)),  border = "red", col = rgb(1,0.5,0.5, alpha = 0.5), add= TRUE)
boxplot(as.numeric(unlist(gpr_f5[5]*100))~as.numeric(unlist(gpr_f5[2]))*as.numeric(unlist(gpr_f5[1])), las = 2, ylim=(c(0,70)), border = "blue", col = rgb(0.5,0.5,1, alpha = 0.5), main = "Genetic Programming\nFunção 5 - GP Reduzido", ylab = "Erro percentual (%)")
boxplot(as.numeric(unlist(gpra_f5[5]*100))~as.numeric(unlist(gpra_f5[2]))*as.numeric(unlist(gpra_f5[1])), las = 2, ylim=(c(0,70)),  border = "red", col = rgb(1,0.5,0.5, alpha = 0.5), add= TRUE)
View(gpr_f5)
[1,2,3]
c(1,2,3)
c(c(1,2,3),c(4,5,6))
boxplot((as.numeric(unlist(gp_f4))), as.numeric(unlist(gp_f2)), as.numeric(unlist(gp_f1)), as.numeric(unlist(gp_f3)), as.numeric(unlist(gp_f5)))
boxplot((as.numeric(unlist(gp_f4))), as.numeric(unlist(gp_f2)), as.numeric(unlist(gp_f1)), as.numeric(unlist(gp_f3)), as.numeric(unlist(gp_f5)), ylim(0,150))
boxplot((as.numeric(unlist(gp_f4))), as.numeric(unlist(gp_f2)), as.numeric(unlist(gp_f1)), as.numeric(unlist(gp_f3)), as.numeric(unlist(gp_f5)), ylim=c(0,150))
boxplot((as.numeric(unlist(gpa_f4))), as.numeric(unlist(gpa_f2)), as.numeric(unlist(gpa_f1)), as.numeric(unlist(gpa_f3)), as.numeric(unlist(gpa_f5)), ylim=c(0,150))
boxplot((as.numeric(unlist(gp_f4))), as.numeric(unlist(gp_f2)), as.numeric(unlist(gp_f1)), as.numeric(unlist(gp_f3)), as.numeric(unlist(gp_f5)), ylim=c(0,150))
boxplot((as.numeric(unlist(gpra_f4))), as.numeric(unlist(gpra_f2)), as.numeric(unlist(gpra_f1)), as.numeric(unlist(gpra_f3)), as.numeric(unlist(gpra_f5)), ylim=c(0,150))
boxplot((as.numeric(unlist(gpr_f4))), as.numeric(unlist(gpr_f2)), as.numeric(unlist(gpr_f1)), as.numeric(unlist(gpr_f3)), as.numeric(unlist(gpr_f5)), ylim=c(0,150))
boxplot((as.numeric(unlist(gp_f4))), as.numeric(unlist(gp_f2)), as.numeric(unlist(gp_f1)), as.numeric(unlist(gp_f3)), as.numeric(unlist(gp_f5)), ylim=c(0,300))
boxplot((as.numeric(unlist(gp_f4))), as.numeric(unlist(gp_f2)), as.numeric(unlist(gp_f1)), as.numeric(unlist(gp_f3)), as.numeric(unlist(gp_f5)), ylim=c(0,250))
boxplot((as.numeric(unlist(gpa_f4))), as.numeric(unlist(gpa_f2)), as.numeric(unlist(gpa_f1)), as.numeric(unlist(gpa_f3)), as.numeric(unlist(gpa_f5)), ylim=c(0,150))
boxplot((as.numeric(unlist(gp_f4))), as.numeric(unlist(gp_f2)), as.numeric(unlist(gp_f1)), as.numeric(unlist(gp_f3)), as.numeric(unlist(gp_f5)), ylim=c(0,250))
boxplot((as.numeric(unlist(gpa_f4))), as.numeric(unlist(gpa_f2)), as.numeric(unlist(gpa_f1)), as.numeric(unlist(gpa_f3)), as.numeric(unlist(gpa_f5)), ylim=c(0,250))
boxplot((as.numeric(unlist(gpr_f4))), as.numeric(unlist(gpr_f2)), as.numeric(unlist(gpr_f1)), as.numeric(unlist(gpr_f3)), as.numeric(unlist(gpr_f5)), ylim=c(0,250))
boxplot((as.numeric(unlist(gpra_f4))), as.numeric(unlist(gpra_f2)), as.numeric(unlist(gpra_f1)), as.numeric(unlist(gpra_f3)), as.numeric(unlist(gpra_f5)), ylim=c(0,150))
boxplot((as.numeric(unlist(gpra_f4))), as.numeric(unlist(gpra_f2)), as.numeric(unlist(gpra_f1)), as.numeric(unlist(gpra_f3)), as.numeric(unlist(gpra_f5)), ylim=c(0,250))
boxplot((as.numeric(unlist(gp_f4))), as.numeric(unlist(gp_f2)), as.numeric(unlist(gp_f1)), as.numeric(unlist(gp_f3)), as.numeric(unlist(gp_f5)), ylim=c(0,350))
boxplot((as.numeric(unlist(gpa_f4))), as.numeric(unlist(gpa_f2)), as.numeric(unlist(gpa_f1)), as.numeric(unlist(gpa_f3)), as.numeric(unlist(gpa_f5)), ylim=c(0,350))
boxplot((as.numeric(unlist(gpr_f4))), as.numeric(unlist(gpr_f2)), as.numeric(unlist(gpr_f1)), as.numeric(unlist(gpr_f3)), as.numeric(unlist(gpr_f5)), ylim=c(0,350))
boxplot((as.numeric(unlist(gpra_f4))), as.numeric(unlist(gpra_f2)), as.numeric(unlist(gpra_f1)), as.numeric(unlist(gpra_f3)), as.numeric(unlist(gpra_f5)), ylim=c(0,350))
boxplot((as.numeric(unlist(gp_f4))), as.numeric(unlist(gp_f2)), as.numeric(unlist(gp_f1)), as.numeric(unlist(gp_f3)), as.numeric(unlist(gp_f5)), ylim=c(0,50))
boxplot((as.numeric(unlist(gp_f4))), as.numeric(unlist(gp_f2)), as.numeric(unlist(gp_f1)), as.numeric(unlist(gp_f3)), as.numeric(unlist(gp_f5)), ylim=c(0,20))
boxplot((as.numeric(unlist(gp_f4[5]))), as.numeric(unlist(gp_f2[5])), as.numeric(unlist(gp_f1[5])), as.numeric(unlist(gp_f3)), as.numeric(unlist(gp_f5)), ylim=c(0,350))
boxplot((as.numeric(unlist(gp_f4[5]))), as.numeric(unlist(gp_f2[5])), as.numeric(unlist(gp_f1[5])), as.numeric(unlist(gp_f3[5])), as.numeric(unlist(gp_f5[5])), ylim=c(0,350))
boxplot((as.numeric(unlist(gp_f4[5]*100))), as.numeric(unlist(gp_f2[5]*100)), as.numeric(unlist(gp_f1[5]*100)), as.numeric(unlist(gp_f3[5]*100)), as.numeric(unlist(gp_f5[5]*100)), ylim=c(0,350))
boxplot((as.numeric(unlist(gpa_f4[5]*100))), as.numeric(unlist(gpa_f2[5]*100)), as.numeric(unlist(gpa_f1[5]*100)), as.numeric(unlist(gpa_f3[5]*100)), as.numeric(unlist(gpa_f5[5]*100)), ylim=c(0,350))
boxplot((as.numeric(unlist(gpr_f4[5]*100))), as.numeric(unlist(gpr_f2[5]*100)), as.numeric(unlist(gpr_f1[5]*100)), as.numeric(unlist(gpr_f3[5]*100)), as.numeric(unlist(gpr_f5[5]*100)), ylim=c(0,350))
boxplot((as.numeric(unlist(gpra_f4[5]*100))), as.numeric(unlist(gpra_f2[5]*100)), as.numeric(unlist(gpra_f1[5]*100)), as.numeric(unlist(gpra_f3[5]*100)), as.numeric(unlist(gpra_f5[5]*100)), ylim=c(0,350))
boxplot((as.numeric(unlist(gp_f4[5]*100))), as.numeric(unlist(gp_f2[5]*100)), as.numeric(unlist(gp_f1[5]*100)), as.numeric(unlist(gp_f3[5]*100)), as.numeric(unlist(gp_f5[5]*100)), ylim=c(0,150))
boxplot((as.numeric(unlist(gpa_f4[5]*100))), as.numeric(unlist(gpa_f2[5]*100)), as.numeric(unlist(gpa_f1[5]*100)), as.numeric(unlist(gpa_f3[5]*100)), as.numeric(unlist(gpa_f5[5]*100)), ylim=c(0,150))
boxplot((as.numeric(unlist(gpr_f4[5]*100))), as.numeric(unlist(gpr_f2[5]*100)), as.numeric(unlist(gpr_f1[5]*100)), as.numeric(unlist(gpr_f3[5]*100)), as.numeric(unlist(gpr_f5[5]*100)), ylim=c(0,150))
boxplot((as.numeric(unlist(gpra_f4[5]*100))), as.numeric(unlist(gpra_f2[5]*100)), as.numeric(unlist(gpra_f1[5]*100)), as.numeric(unlist(gpra_f3[5]*100)), as.numeric(unlist(gpra_f5[5]*100)), ylim=c(0,150))
boxplot((as.numeric(unlist(gp_f4[5]*100))), as.numeric(unlist(abs(gp_f2[5]*100))), as.numeric(unlist(gp_f1[5]*100)), as.numeric(unlist(gp_f3[5]*100)), as.numeric(unlist(gp_f5[5]*100)), ylim=c(0,150))
boxplot((as.numeric(unlist(gpa_f4[5]*100))), as.numeric(unlist(abs(gpa_f2[5]*100))), as.numeric(unlist(gpa_f1[5]*100)), as.numeric(unlist(gpa_f3[5]*100)), as.numeric(unlist(gpa_f5[5]*100)), ylim=c(0,150))
boxplot((as.numeric(unlist(gpr_f4[5]*100))), as.numeric(unlist(abs(gpr_f2[5]*100))), as.numeric(unlist(gpr_f1[5]*100)), as.numeric(unlist(gpr_f3[5]*100)), as.numeric(unlist(gpr_f5[5]*100)), ylim=c(0,150))
boxplot((as.numeric(unlist(gpra_f4[5]*100))), as.numeric(unlist(abs(gpra_f2[5]*100))), as.numeric(unlist(gpra_f1[5]*100)), as.numeric(unlist(gpra_f3[5]*100)), as.numeric(unlist(gpra_f5[5]*100)), ylim=c(0,150))
boxplot((as.numeric(unlist(gp_f4[5]*100))), as.numeric(unlist(abs(gp_f2[5]*100))), as.numeric(unlist(gp_f1[5]*100)), as.numeric(unlist(gp_f3[5]*100)), as.numeric(unlist(gp_f5[5]*100)), ylim=c(0,150), border = "blue", col = rgb(0.5,0.5,1, alpha = 0.5), main = "Erro percentual dos modelos gerados\nGenetic Programming", ylab = "Erro Percentual (%)", names = c("Função 1","Função 2","Função 3","Função 4","Função 5"))
boxplot((as.numeric(unlist(gpa_f4[5]*100))), as.numeric(unlist(abs(gpa_f2[5]*100))), as.numeric(unlist(gpa_f1[5]*100)), as.numeric(unlist(gpa_f3[5]*100)), as.numeric(unlist(gpa_f5[5]*100)), ylim=c(0,150), border = "red", col = rgb(1,0.5,.5, alpha = 0.5), main = "Erro percentual dos modelos gerados\nGenetic Programming Reduzido", ylab = "Erro Percentual (%)", names = c("Função 1","Função 2","Função 3","Função 4","Função 5"), add = TRUE)
boxplot((as.numeric(unlist(gpr_f4[5]*100))), as.numeric(unlist(abs(gpr_f2[5]*100))), as.numeric(unlist(gpr_f1[5]*100)), as.numeric(unlist(gpr_f3[5]*100)), as.numeric(unlist(gpr_f5[5]*100)), ylim=c(0,150), border = "blue", col = rgb(0.5,0.5,1, alpha = 0.5), main = "Erro percentual dos modelos gerados\nGenetic Programming", ylab = "Erro Percentual (%)", names = c("Função 1","Função 2","Função 3","Função 4","Função 5"))
boxplot((as.numeric(unlist(gpra_f4[5]*100))), as.numeric(unlist(abs(gpra_f2[5]*100))), as.numeric(unlist(gpra_f1[5]*100)), as.numeric(unlist(gpra_f3[5]*100)), as.numeric(unlist(gpra_f5[5]*100)), ylim=c(0,150), border = "red", col = rgb(1,0.5,.5, alpha = 0.5), main = "Erro percentual dos modelos gerados\nGenetic Programming Reduzido", ylab = "Erro Percentual (%)", names = c("Função 1","Função 2","Função 3","Função 4","Função 5"), add = TRUE)
boxplot((as.numeric(unlist(gp_f4[5]*100))), as.numeric(unlist(abs(gp_f2[5]*100))), as.numeric(unlist(gp_f1[5]*100)), as.numeric(unlist(gp_f3[5]*100)), as.numeric(unlist(gp_f5[5]*100)), ylim=c(0,150), border = "blue", col = rgb(0.5,0.5,1, alpha = 0.5), main = "Erro percentual dos modelos gerados\nGenetic Programming", ylab = "Erro Percentual (%)", names = c("Função 1","Função 2","Função 3","Função 4","Função 5"))
boxplot((as.numeric(unlist(gpa_f4[5]*100))), as.numeric(unlist(abs(gpa_f2[5]*100))), as.numeric(unlist(gpa_f1[5]*100)), as.numeric(unlist(gpa_f3[5]*100)), as.numeric(unlist(gpa_f5[5]*100)), ylim=c(0,150), border = "red", col = rgb(1,0.5,.5, alpha = 0.5), main = "Erro percentual dos modelos gerados\nGenetic Programming", ylab = "Erro Percentual (%)", names = c("Função 1","Função 2","Função 3","Função 4","Função 5"), add = TRUE)
boxplot((as.numeric(unlist(gpr_f4[5]*100))), as.numeric(unlist(abs(gpr_f2[5]*100))), as.numeric(unlist(gpr_f1[5]*100)), as.numeric(unlist(gpr_f3[5]*100)), as.numeric(unlist(gpr_f5[5]*100)), ylim=c(0,150), border = "blue", col = rgb(0.5,0.5,1, alpha = 0.5), main = "Erro percentual dos modelos gerados\nGenetic Programming Reduzido", ylab = "Erro Percentual (%)", names = c("Função 1","Função 2","Função 3","Função 4","Função 5"))
boxplot((as.numeric(unlist(gpra_f4[5]*100))), as.numeric(unlist(abs(gpra_f2[5]*100))), as.numeric(unlist(gpra_f1[5]*100)), as.numeric(unlist(gpra_f3[5]*100)), as.numeric(unlist(gpra_f5[5]*100)), ylim=c(0,150), border = "red", col = rgb(1,0.5,.5, alpha = 0.5), main = "Erro percentual dos modelos gerados\nGenetic Programming Reduzido", ylab = "Erro Percentual (%)", names = c("Função 1","Função 2","Função 3","Função 4","Função 5"), add = TRUE)
boxplot((as.numeric(unlist(gp_f4[5]*100))), as.numeric(unlist(abs(gp_f2[5]*100))), as.numeric(unlist(gp_f1[5]*100)), as.numeric(unlist(gp_f3[5]*100)), as.numeric(unlist(gp_f5[5]*100)), ylim=c(0,150), border = "blue", col = rgb(0.5,0.5,1, alpha = 0.5), main = "Erro percentual dos modelos gerados\nGenetic Programming", ylab = "Erro Percentual (%)", names = c("Função 1","Função 2","Função 3","Função 4","Função 5"))
boxplot((as.numeric(unlist(gpa_f4[5]*100))), as.numeric(unlist(abs(gpa_f2[5]*100))), as.numeric(unlist(gpa_f1[5]*100)), as.numeric(unlist(gpa_f3[5]*100)), as.numeric(unlist(gpa_f5[5]*100)), ylim=c(0,150), border = "red", col = rgb(1,0.5,.5, alpha = 0.5), main = "Erro percentual dos modelos gerados\nGenetic Programming", ylab = "Erro Percentual (%)", names = c("Função 1","Função 2","Função 3","Função 4","Função 5"), add = TRUE)
boxplot((as.numeric(unlist(gpr_f4[5]*100))), as.numeric(unlist(abs(gpr_f2[5]*100))), as.numeric(unlist(gpr_f1[5]*100)), as.numeric(unlist(gpr_f3[5]*100)), as.numeric(unlist(gpr_f5[5]*100)), ylim=c(0,150), border = "blue", col = rgb(0.5,0.5,1, alpha = 0.5), main = "Erro percentual dos modelos gerados\nGenetic Programming Reduzido", ylab = "Erro Percentual (%)", names = c("Função 1","Função 2","Função 3","Função 4","Função 5"),add= TRUE)
boxplot((as.numeric(unlist(gpra_f4[5]*100))), as.numeric(unlist(abs(gpra_f2[5]*100))), as.numeric(unlist(gpra_f1[5]*100)), as.numeric(unlist(gpra_f3[5]*100)), as.numeric(unlist(gpra_f5[5]*100)), ylim=c(0,150), border = "red", col = rgb(1,0.5,.5, alpha = 0.5), main = "Erro percentual dos modelos gerados\nGenetic Programming Reduzido", ylab = "Erro Percentual (%)", names = c("Função 1","Função 2","Função 3","Função 4","Função 5"), add = TRUE)
boxplot((as.numeric(unlist(gp_f4[5]*100))), as.numeric(unlist(abs(gp_f2[5]*100))), as.numeric(unlist(gp_f1[5]*100)), as.numeric(unlist(gp_f3[5]*100)), as.numeric(unlist(gp_f5[5]*100)), ylim=c(0,150), border = "blue", col = rgb(0.5,0.5,1, alpha = 0.5), main = "Erro percentual dos modelos gerados\nGenetic Programming", ylab = "Erro Percentual (%)", names = c("Função 1","Função 2","Função 3","Função 4","Função 5"))
boxplot((as.numeric(unlist(gpa_f4[5]*100))), as.numeric(unlist(abs(gpa_f2[5]*100))), as.numeric(unlist(gpa_f1[5]*100)), as.numeric(unlist(gpa_f3[5]*100)), as.numeric(unlist(gpa_f5[5]*100)), ylim=c(0,150), border = "red", col = rgb(1,0.5,.5, alpha = 0.5), main = "Erro percentual dos modelos gerados\nGenetic Programming", ylab = "Erro Percentual (%)", names = c("Função 1","Função 2","Função 3","Função 4","Função 5"), add = TRUE)
boxplot((as.numeric(unlist(gpr_f4[5]*100))), as.numeric(unlist(abs(gpr_f2[5]*100))), as.numeric(unlist(gpr_f1[5]*100)), as.numeric(unlist(gpr_f3[5]*100)), as.numeric(unlist(gpr_f5[5]*100)), ylim=c(0,150), border = "blue", col = rgb(0.5,0.5,1, alpha = 0.5), main = "Erro percentual dos modelos gerados\nGenetic Programming Reduzido", ylab = "Erro Percentual (%)", names = c("Função 1","Função 2","Função 3","Função 4","Função 5"),add= TRUE)
boxplot((as.numeric(unlist(gpra_f4[5]*100))), as.numeric(unlist(abs(gpra_f2[5]*100))), as.numeric(unlist(gpra_f1[5]*100)), as.numeric(unlist(gpra_f3[5]*100)), as.numeric(unlist(gpra_f5[5]*100)), ylim=c(0,150), border = "red", col = rgb(1,0.5,.5, alpha = 0.5), main = "Erro percentual dos modelos gerados\nGenetic Programming Reduzido", ylab = "Erro Percentual (%)", names = c("Função 1","Função 2","Função 3","Função 4","Função 5"), add = TRUE)
boxplot((as.numeric(unlist(gp_f4[5]*100))), as.numeric(unlist(abs(gp_f2[5]*100))), as.numeric(unlist(gp_f1[5]*100)), as.numeric(unlist(gp_f3[5]*100)), as.numeric(unlist(gp_f5[5]*100)), ylim=c(0,150), border = "blue", col = rgb(0.5,0.5,1, alpha = 0.5), main = "Erro percentual dos modelos gerados\nGenetic Programming", ylab = "Erro Percentual (%)", names = c("Função 1","Função 2","Função 3","Função 4","Função 5"))
boxplot((as.numeric(unlist(gpa_f4[5]*100))), as.numeric(unlist(abs(gpa_f2[5]*100))), as.numeric(unlist(gpa_f1[5]*100)), as.numeric(unlist(gpa_f3[5]*100)), as.numeric(unlist(gpa_f5[5]*100)), ylim=c(0,150), border = "red", col = rgb(1,0.5,.5, alpha = 0.5), main = "Erro percentual dos modelos gerados\nGenetic Programming", ylab = "Erro Percentual (%)", names = c("Função 1","Função 2","Função 3","Função 4","Função 5"), add = TRUE)
boxplot((as.numeric(unlist(gpr_f4[5]*100))), as.numeric(unlist(abs(gpr_f2[5]*100))), as.numeric(unlist(gpr_f1[5]*100)), as.numeric(unlist(gpr_f3[5]*100)), as.numeric(unlist(gpr_f5[5]*100)), ylim=c(0,150), border = "blue", col = rgb(0.5,0.5,1, alpha = 0.5), main = "Erro percentual dos modelos gerados\nGenetic Programming Reduzido", ylab = "Erro Percentual (%)", names = c("Função 1","Função 2","Função 3","Função 4","Função 5"))
boxplot((as.numeric(unlist(gpra_f4[5]*100))), as.numeric(unlist(abs(gpra_f2[5]*100))), as.numeric(unlist(gpra_f1[5]*100)), as.numeric(unlist(gpra_f3[5]*100)), as.numeric(unlist(gpra_f5[5]*100)), ylim=c(0,150), border = "red", col = rgb(1,0.5,.5, alpha = 0.5), main = "Erro percentual dos modelos gerados\nGenetic Programming Reduzido", ylab = "Erro Percentual (%)", names = c("Função 1","Função 2","Função 3","Função 4","Função 5"), add = TRUE)
boxplot((as.numeric(unlist(dls_4[5]*100))), as.numeric(unlist(abs(dls_2[5]*100))), as.numeric(unlist(dls_1[5]*100)), as.numeric(unlist(dls_3[5]*100)), as.numeric(unlist(dls_51[5]*100)), ylim=c(0,150), border = "blue", col = rgb(0.5,0.5,1, alpha = 0.5), main = "Erro percentual dos modelos gerados\nDeep Learning - Atiação Sigmóide", ylab = "Erro Percentual (%)", names = c("Função 1","Função 2","Função 3","Função 4","Função 5"))
boxplot((as.numeric(unlist(dls_4[5]*100))), as.numeric(unlist(abs(dls_2[5]*100))), as.numeric(unlist(dls_1[5]*100)), as.numeric(unlist(dls_3[5]*100)), as.numeric(unlist(dls_51[5]*100)), ylim=c(0,150), border = "blue", col = rgb(0.5,0.5,1, alpha = 0.5), main = "Erro percentual dos modelos gerados\nDeep Learning - Ativação Sigmóide", ylab = "Erro Percentual (%)", names = c("Função 1","Função 2","Função 3","Função 4","Função 5"))
boxplot((as.numeric(unlist(dlsa_4[5]*100))), as.numeric(unlist(abs(dlsa_2[5]*100))), as.numeric(unlist(dlsa_1[5]*100)), as.numeric(unlist(dlsa_3[5]*100)), as.numeric(unlist(dlsa_5[5]*100)), ylim=c(0,150), border = "red", col = rgb(1,0.5,.5, alpha = 0.5), main = "Erro percentual dos modelos gerados\nDeep Learning - Ativação Sigmóide", ylab = "Erro Percentual (%)", names = c("Função 1","Função 2","Função 3","Função 4","Função 5"), add = TRUE)
boxplot((as.numeric(unlist(dls_4[5]*100))), as.numeric(unlist(abs(dls_2[5]*100))), as.numeric(unlist(dls_1[5]*100)), as.numeric(unlist(dls_3[5]*100)), as.numeric(unlist(dls_51[5]*100)), ylim=c(0,350), border = "blue", col = rgb(0.5,0.5,1, alpha = 0.5), main = "Erro percentual dos modelos gerados\nDeep Learning - Ativação Sigmóide", ylab = "Erro Percentual (%)", names = c("Função 1","Função 2","Função 3","Função 4","Função 5"))
boxplot((as.numeric(unlist(dlsa_4[5]*100))), as.numeric(unlist(abs(dlsa_2[5]*100))), as.numeric(unlist(dlsa_1[5]*100)), as.numeric(unlist(dlsa_3[5]*100)), as.numeric(unlist(dlsa_5[5]*100)), ylim=c(0,350), border = "red", col = rgb(1,0.5,.5, alpha = 0.5), main = "Erro percentual dos modelos gerados\nDeep Learning - Ativação Sigmóide", ylab = "Erro Percentual (%)", names = c("Função 1","Função 2","Função 3","Função 4","Função 5"), add = TRUE)
View(dls_51)
boxplot((as.numeric(unlist(dls_4[5]*100))), as.numeric(unlist(abs(dls_2[5]*100))), as.numeric(unlist(dls_1[5]*100)), as.numeric(unlist(dls_3[5]*100)), as.numeric(unlist(dls_51[5]*100)), ylim=c(0,250), border = "blue", col = rgb(0.5,0.5,1, alpha = 0.5), main = "Erro percentual dos modelos gerados\nDeep Learning - Ativação Sigmóide", ylab = "Erro Percentual (%)", names = c("Função 1","Função 2","Função 3","Função 4","Função 5"))
boxplot((as.numeric(unlist(dlsa_4[5]*100))), as.numeric(unlist(abs(dlsa_2[5]*100))), as.numeric(unlist(dlsa_1[5]*100)), as.numeric(unlist(dlsa_3[5]*100)), as.numeric(unlist(dlsa_5[5]*100)), ylim=c(0,250), border = "red", col = rgb(1,0.5,.5, alpha = 0.5), main = "Erro percentual dos modelos gerados\nDeep Learning - Ativação Sigmóide", ylab = "Erro Percentual (%)", names = c("Função 1","Função 2","Função 3","Função 4","Função 5"), add = TRUE)
boxplot(abs(as.numeric(unlist(dls_2[5])))~as.numeric(unlist(dls_2[2]))*as.numeric(unlist(dls_2[1])), las = 2)
boxplot(abs(as.numeric(unlist(dls_2[5]*100)))~as.numeric(unlist(dls_2[2]))*as.numeric(unlist(dls_2[1])), las = 2, ylim=(c(0,70)), border = "blue", col = rgb(0.5,0.5,1, alpha = 0.5), main = "Deep Learning\nFunção 2  - Ativação Sigmóide", ylab = "Erro percentual (%)")
boxplot(as.numeric(abs(unlist(dlsa_2[5]*100)))~as.numeric(unlist(dlsa_2[2]))*as.numeric(unlist(dlsa_2[1])), las = 2, ylim=(c(0,70)), border = "red", col = rgb(1,0.5,0.5, alpha = 0.5), add= TRUE)
boxplot((as.numeric(unlist(gp_f4[5]*100))), as.numeric(unlist(abs(gp_f2[5]*100))), as.numeric(unlist(gp_f1[5]*100)), as.numeric(unlist(gp_f3[5]*100)), as.numeric(unlist(gp_f5[5]*100)), ylim=c(0,150), border = "blue", col = rgb(0.5,0.5,1, alpha = 0.5), main = "Erro percentual dos modelos gerados\nGenetic Programming", ylab = "Erro Percentual (%)", names = c("Função 1","Função 2","Função 3","Função 4","Função 5"))
boxplot((as.numeric(unlist(gpa_f4[5]*100))), as.numeric(unlist(abs(gpa_f2[5]*100))), as.numeric(unlist(gpa_f1[5]*100)), as.numeric(unlist(gpa_f3[5]*100)), as.numeric(unlist(gpa_f5[5]*100)), ylim=c(0,150), border = "red", col = rgb(1,0.5,.5, alpha = 0.5), main = "Erro percentual dos modelos gerados\nGenetic Programming", ylab = "Erro Percentual (%)", names = c("Função 1","Função 2","Função 3","Função 4","Função 5"), add = TRUE)
legend("topleft", legend=c("Amostragem Aleatória","Amostragem com Passo"),fill=c("red", "blue"), bty="n")
boxplot((as.numeric(unlist(gp_f4[5]*100))), as.numeric(unlist(abs(gp_f2[5]*100))), as.numeric(unlist(gp_f1[5]*100)), as.numeric(unlist(gp_f3[5]*100)), as.numeric(unlist(gp_f5[5]*100)), ylim=c(0,150), border = "blue", col = rgb(0.5,0.5,1, alpha = 0.5), main = "Erro percentual dos modelos gerados\nGenetic Programming", ylab = "Erro Percentual (%)", names = c("Função 1","Função 2","Função 3","Função 4","Função 5"))
boxplot((as.numeric(unlist(gpa_f4[5]*100))), as.numeric(unlist(abs(gpa_f2[5]*100))), as.numeric(unlist(gpa_f1[5]*100)), as.numeric(unlist(gpa_f3[5]*100)), as.numeric(unlist(gpa_f5[5]*100)), ylim=c(0,150), border = "red", col = rgb(1,0.5,.5, alpha = 0.5), main = "Erro percentual dos modelos gerados\nGenetic Programming", ylab = "Erro Percentual (%)", names = c("Função 1","Função 2","Função 3","Função 4","Função 5"), add = TRUE)
legend("topright", legend=c("Amostragem Aleatória","Amostragem com Passo"),fill=c("red", "blue"), bty="n")
View(dlr_1)
