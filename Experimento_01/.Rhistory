g = as.numeric(unlist(e1_gp[4]))
m<-0.001
std<-0.020
hist(g, density=20, breaks=200, prob=TRUE, xlim = c(0,0.25),
xlab="x-variable",
main="normal curve over histogram")
curve(dnorm(x, mean=m, sd=std),
col="darkblue", lwd=2, add=TRUE, yaxt="n")
g = as.numeric(unlist(e1_gp[4]))
m<-0.001
std<-0.03
hist(g, density=20, breaks=500, prob=TRUE, xlim = c(0,0.25),
xlab="x-variable",
main="normal curve over histogram")
curve(dnorm(x, mean=m, sd=std),
col="darkblue", lwd=2, add=TRUE, yaxt="n")
g = as.numeric(unlist(e1_gp[4]))
m<-0.001
std<-0.025
hist(g, density=20, breaks=500, prob=TRUE, xlim = c(0,0.25),
xlab="x-variable",
main="normal curve over histogram")
curve(dnorm(x, mean=m, sd=std),
col="darkblue", lwd=2, add=TRUE, yaxt="n")
g = as.numeric(unlist(e1_gp[4]))
m<-0.002
std<-0.025
hist(g, density=20, breaks=500, prob=TRUE, xlim = c(0,0.25),
xlab="x-variable",
main="normal curve over histogram")
curve(dnorm(x, mean=m, sd=std),
col="darkblue", lwd=2, add=TRUE, yaxt="n")
g = as.numeric(unlist(e1_gp[4]))
m<-0.01
std<-0.025
hist(g, density=20, breaks=500, prob=TRUE, xlim = c(0,0.25),
xlab="x-variable",
main="normal curve over histogram")
curve(dnorm(x, mean=m, sd=std),
col="darkblue", lwd=2, add=TRUE, yaxt="n")
g = as.numeric(unlist(e1_gp[4]))
m<-0.01
std<-0.02
hist(g, density=20, breaks=500, prob=TRUE, xlim = c(0,0.25),
xlab="x-variable",
main="normal curve over histogram")
curve(dnorm(x, mean=m, sd=std),
col="darkblue", lwd=2, add=TRUE, yaxt="n")
g = as.numeric(unlist(e1_gp[4]))
m<-0.01
std<-0.02
hist(g, density=20, breaks=500, prob=TRUE, xlim = c(0,0.25),
xlab="x-variable",
main="Genetic Programming")
curve(dnorm(x, mean=m, sd=std),
col="darkblue", lwd=2, add=TRUE, yaxt="n")
g = as.numeric(unlist(e1_gp[4]))
m<-0.01
std<-0.02
hist(g, density=20, breaks=500, prob=TRUE, xlim = c(0,0.25),
xlab="MSE", ylab = "Densidade de Probabilidade",
main="Genetic Programming")
curve(dnorm(x, mean=m, sd=std),
col="darkblue", lwd=2, add=TRUE, yaxt="n")
g = as.numeric(unlist(e1_dl[4]))
m<-0.039
std<-0.045
hist(g, density=20, breaks=10, prob=TRUE,
xlab="MSE", ylab = "Densidade de Probabilidade",
main="Deep Learning")
curve(dnorm(x, mean=m, sd=std),
col="darkblue", lwd=2, add=TRUE, yaxt="n")
g = as.numeric(unlist(e1_dl[4]))
m<-0.039
std<-0.045
hist(g, density=20, breaks=10, prob=TRUE,
xlab="MSE", ylab = "Densidade de Probabilidade",
main="Deep Learning")
curve(dnorm(x, mean=m, sd=std),
col="darkblue", lwd=2, add=TRUE, yaxt="n")
g = as.numeric(unlist(e1_dl[4]))
m<-0.039
std<-0.045
hist(g, density=20, breaks=10, prob=TRUE,
xlab="MSE", ylab = "Densidade de Probabilidade",
main="Deep Learning")
curve(dnorm(x, mean=m, sd=std),
col="darkblue", lwd=2, add=TRUE, yaxt="n")
g = as.numeric(unlist(e1_gpr[4]))
m<-0.1
std<-0.127
hist(g, density=20, breaks=80, prob=TRUE, xlim = c(0,1),
xlab="MSE", ylab = "Densidade de Probabilidade",
main="Genetic Programming Reduzido")
curve(dnorm(x, mean=m, sd=std),
col="darkblue", lwd=2, add=TRUE, yaxt="n")
g = as.numeric(unlist(e1_gp[4]))
m<-0.01
std<-0.02
hist(g, density=20, breaks=500, prob=TRUE, xlim = c(0,0.25),
xlab="MSE", ylab = "Densidade de Probabilidade",
main="Genetic Programming")
curve(dnorm(x, mean=m, sd=std),
col="darkblue", lwd=2, add=TRUE, yaxt="n")
t.test(as.numeric(unlist(e1_dl[4])),as.numeric(unlist(e1_dl[4])),alternative="two.sided",var.equal=F,conf.level=0.99)
t.test(as.numeric(unlist(e1_dl[4])),as.numeric(unlist(e1_dla[4])),alternative="two.sided",var.equal=F,conf.level=0.99)
var.test(as.numeric(unlist(e1_dl[4])),as.numeric(unlist(e1_dla[4])),alternative="two.sided",var.equal=F,conf.level=0.99)
var.test(as.numeric(unlist(e1_dl[4])),as.numeric(unlist(e1_dla[4])),alternative="two.sided",conf.level=0.99)
var.test(as.numeric(unlist(e1_dl[4])),as.numeric(unlist(e1_dl[4])),alternative="two.sided",conf.level=0.99)
var(as.numeric(unlist(e1_dl[4])))
var(as.numeric(unlist(e1_dla[4])))
var(as.numeric(unlist(e1_dl[4])))/as.numeric(unlist(e1_dla[4]))
var(as.numeric(unlist(e1_dl[4]))/as.numeric(unlist(e1_dla[4])))
var(as.numeric(unlist(e1_dla[4]))/as.numeric(unlist(e1_dl[4])))
var((as.numeric(unlist(e1_dla[4]))-as.numeric(unlist(e1_dl[4])))/as.numeric(unlist(e1_dla[4])))
var(as.numeric(unlist(e1_dla[4])))/var(as.numeric(unlist(e1_dl[4])))
var(as.numeric(unlist(e1_dl[4])))/var(as.numeric(unlist(e1_dla[4])))
var.test(as.numeric(unlist(e1_dl[4])),as.numeric(unlist(e1_dl[4])),alternative="two.sided",conf.level=0.99)
t.test(as.numeric(unlist(e1_dl[4])),as.numeric(unlist(e1_dla[4])),alternative="two.sided",var.equal=F,conf.level=0.99)
t.test(as.numeric(unlist(e1_dl[4])),as.numeric(unlist(e1_dla[4])),alternative="two.sided",var.equal=F,conf.level=0.99)
var.test(as.numeric(unlist(e1_dl[4])),as.numeric(unlist(e1_dla[4])),alternative="two.sided",conf.level=0.99)
t.test(as.numeric(unlist(e1_gp[4])),as.numeric(unlist(e1_gpa[4])),alternative="two.sided",var.equal=F,conf.level=0.99)
var.test(as.numeric(unlist(e1_gp[4])),as.numeric(unlist(e1_gpa[4])),alternative="two.sided",conf.level=0.99)
View(e1_gpa)
View(e1_gp)
var(as.numeric(unlist(e1_gp[4])))
var(as.numeric(unlist(e1_gpa[4])))
max(as.numeric(unlist(e1_gp[4])))
max(as.numeric(unlist(e1_gpa[4])))
a <- e1_gp[-which(e1_gp[4] == max(as.numeric(unlist(e1_gp[4])))),]
var(as.numeric(unlist(a[4])))
max(as.numeric(unlist(e1_gp[4])))
max(as.numeric(unlist(e1_gpa[4])))
max(as.numeric(a[4])))
max(as.numeric(unlist(a[4])))
t.test(as.numeric(unlist(a[4])),as.numeric(unlist(e1_gpa[4])),alternative="two.sided",var.equal=F,conf.level=0.99)
var.test(as.numeric(unlist(a[4])),as.numeric(unlist(e1_gpa[4])),alternative="two.sided",conf.level=0.99)
max(as.numeric(unlist(e1_dla[4])))
max(as.numeric(unlist(e1_dl[4])))
t.test(as.numeric(unlist(e2_gp[4])),as.numeric(unlist(e2_gpa[4])),alternative="two.sided",var.equal=F,conf.level=0.99)
t.test(as.numeric(unlist(e2_gp[4])),as.numeric(unlist(e2_gpa[4])),alternative="two.sided",var.equal=F,conf.level=0.99)
t.test(as.numeric(unlist(e2_dl[4])),as.numeric(unlist(e2_dla[4])),alternative="two.sided",var.equal=F,conf.level=0.99)
var.test(as.numeric(unlist(e2_gp[4])),as.numeric(unlist(e2_gpa[4])),alternative="two.sided",conf.level=0.99)
max(as.numeric(unlist(e2_gp[4])))
max(as.numeric(unlist(e2_gpa[4])))
var.test(as.numeric(unlist(e2_dl[4])),as.numeric(unlist(e2_dla[4])),alternative="two.sided",conf.level=0.99)
var.test(as.numeric(unlist(e2_gp[4])),as.numeric(unlist(e2_gpa[4])),alternative="two.sided",conf.level=0.95)
var.test(as.numeric(unlist(e2_gp[4])),as.numeric(unlist(e2_gpa[4])),alternative="two.sided",conf.level=0.95)
var.test(as.numeric(unlist(e2_gp[4])),as.numeric(unlist(e2_gpa[4])),alternative="two.sided",conf.level=0.99)
var.test(as.numeric(unlist(e2_dl[4])),as.numeric(unlist(e2_dla[4])),alternative="two.sided",conf.level=0.99)
var.test(as.numeric(unlist(e1_dl[4])),as.numeric(unlist(e1_dla[4])),alternative="two.sided",conf.level=0.99)
var.test(as.numeric(unlist(e1_dl[4])),as.numeric(unlist(e1_dla[4])),alternative="two.sided",conf.level=0.95)
var.test(as.numeric(unlist(e1_dl[4])),as.numeric(unlist(e1_dla[4])),alternative="two.sided",conf.level=0.99)
var.test(as.numeric(unlist(e1_dl[4])),as.numeric(unlist(e1_dla[4])),alternative="two.sided",conf.level=0.50)
var.test(as.numeric(unlist(e1_dl[4])),as.numeric(unlist(e1_dla[4])),alternative="two.sided",conf.level=0.99)
max(as.numeric(unlist(e1_dl[4])))
max(as.numeric(unlist(e1_dla[4])))
mean(as.numeric(unlist(e1_dla[4])))
2.7*0.81*0.02/0.05
save.image("C:/Users/Ícaro/Dropbox/PIBIC/IC_2017/.RData")
savehistory("C:/Users/Ícaro/Dropbox/PIBIC/IC_2017/.Rhistory")
e3_dl <- read.csv("EXP3/DL/INFO_DL_EXP2.csv")
e3_dll <- read.csv("EXP3/DL/INFO_DL_EXP3.csv")
View(e3_dl)
View(e3_dll)
View(e3_dl)
View(e3_dll)
remove(e3_dll)
e3_dll <- read.csv("EXP3/DL/INFO_DL_EXP3.csv", quote = "", header = FALSE)
e3_dl <- read.csv("EXP3/DL/INFO_DL_EXP2.csv", quote = "", header = FALSE)
remove(e3_dll)
e3_gp <- read.csv("EXP3/GP/INFO_GP_EXP2.csv", quote = "", header = FALSE)
View(e3_gp)
par(mfrow = c(1, 2))
boxplot(as.numeric(unlist(e3_dl[4])))
boxplot(as.numeric(unlist(e3_dl[4]))~as.numeric(unlist(e3_dl[1])))
boxplot(as.numeric(unlist(e3_dl[4]))~as.numeric(unlist(e3_dl[1])), main = "Deep Learning", ylab = "MSE", xlab = "Arquitetura")
boxplot(as.numeric(unlist(e3_gp[4]))~as.numeric(unlist(e3_gp[1])), main = "Genetic Programming", ylab = "MSE", xlab = "Tamanho Máximo de Árvore")
boxplot(as.numeric(unlist(e3_gp[4]))~as.numeric(unlist(e3_gp[1])), main = "Genetic Programming", ylab = "MSE", xlab = "Tamanho Máximo de Árvore", ylim = c(0,2000))
boxplot(as.numeric(unlist(e3_dl[4]))~as.numeric(unlist(e3_dl[1])), main = "Deep Learning", ylab = "MSE", xlab = "Arquitetura")
boxplot(as.numeric(unlist(e3_dl[4]))~as.numeric(unlist(e3_dl[1])), main = "Deep Learning", ylab = "MSE", xlab = "Arquitetura", ylim = c(0,1500))
boxplot(as.numeric(unlist(e3_gp[4]))~as.numeric(unlist(e3_gp[1])), main = "Genetic Programming", ylab = "MSE", xlab = "Tamanho Máximo de Árvore", ylim = c(0,1500))
View(e3_dl)
View(e3_gp)
boxplot(as.numeric(unlist(e3_dl[5]))~as.numeric(unlist(e3_dl[1])), main = "Deep Learning", ylab = "Tempo de Execução", xlab = "Arquitetura")
boxplot(as.numeric(unlist(e3_gp[6]))~as.numeric(unlist(e3_gp[1])), main = "Genetic Programming", ylab = "Tempo de execução", xlab = "Tamanho Máximo de Árvore", ylim = c(0,1500))
boxplot(as.numeric(unlist(e3_gp[6]))~as.numeric(unlist(e3_gp[1])), main = "Genetic Programming", ylab = "Tempo de execução", xlab = "Tamanho Máximo de Árvore")
boxplot(as.numeric(unlist(e3_gp[6])/60)~as.numeric(unlist(e3_gp[1])), main = "Genetic Programming", ylab = "Tempo de execução (min)", xlab = "Tamanho Máximo de Árvore")
boxplot(as.numeric(unlist(e3_dl[5]))~as.numeric(unlist(e3_dl[1])), main = "Deep Learning", ylab = "Tempo de Execução (s)", xlab = "Arquitetura")
boxplot(as.numeric(unlist(e3_dl[5]))~as.numeric(unlist(e3_dl[1])), main = "Deep Learning", ylab = "Tempo de Execução (s)", xlab = "Arquitetura", ylim(0,10))
boxplot(as.numeric(unlist(e3_dl[5]))~as.numeric(unlist(e3_dl[1])), main = "Deep Learning", ylab = "Tempo de Execução (s)", xlab = "Arquitetura", ylim = c(0,20))
boxplot(as.numeric(unlist(e3_dl[5]))~as.numeric(unlist(e3_dl[1])), main = "Deep Learning", ylab = "Tempo de Execução (s)", xlab = "Arquitetura", ylim = c(10,20))
boxplot(as.numeric(unlist(e3_dl[5]))~as.numeric(unlist(e3_dl[1])), main = "Deep Learning", ylab = "Tempo de Execução (s)", xlab = "Arquitetura", ylim = c(12,18))
boxplot(as.numeric(unlist(e3_dl[5]))~as.numeric(unlist(e3_dl[1])), main = "Deep Learning", ylab = "Tempo de Execução (s)", xlab = "Arquitetura", ylim = c(12,18))
boxplot(as.numeric(unlist(e3_gp[6])/60)~as.numeric(unlist(e3_gp[1])), main = "Genetic Programming", ylab = "Tempo de execução (min)", xlab = "Tamanho Máximo de Árvore")
g = as.numeric(unlist(e3_dl[4]))
m<-mean(g)
std<-sqrt(var(g))
hist(g, density=20, breaks=20, prob=TRUE,
xlab="x-variable", ylim=c(0, 2),
main="normal curve over histogram")
curve(dnorm(x, mean=m, sd=std),
col="darkblue", lwd=2, add=TRUE, yaxt="n")
g = as.numeric(unlist(e3_dl[4]))
m<-mean(g)
std<-sqrt(var(g))
hist(g, density=20, breaks=20, prob=TRUE,
xlab="x-variable",
main="normal curve over histogram")
curve(dnorm(x, mean=m, sd=std),
col="darkblue", lwd=2, add=TRUE, yaxt="n")
g = as.numeric(unlist(e3_dl[4]))
m<-mean(g)
std<-sqrt(var(g))
hist(g, density=20, breaks=10, prob=TRUE,
xlab="x-variable",
main="normal curve over histogram")
curve(dnorm(x, mean=m, sd=std),
col="darkblue", lwd=2, add=TRUE, yaxt="n")
g = as.numeric(unlist(e3_dl[4]))
m<-mean(g)
std<-sqrt(var(g))
hist(g, density=20, breaks=5, prob=TRUE,
xlab="x-variable",
main="normal curve over histogram")
curve(dnorm(x, mean=m, sd=std),
col="darkblue", lwd=2, add=TRUE, yaxt="n")
m
g = as.numeric(unlist(e3_dl[4]))
m<-160
std<-sqrt(var(g))
hist(g, density=20, breaks=20, prob=TRUE,
xlab="x-variable",
main="normal curve over histogram")
curve(dnorm(x, mean=m, sd=std),
col="darkblue", lwd=2, add=TRUE, yaxt="n")
g = as.numeric(unlist(e3_dl[4]))
m<-160
std<-sqrt(var(g))
hist(g, density=20, breaks=5, prob=TRUE,
xlab="x-variable",
main="normal curve over histogram")
curve(dnorm(x, mean=m, sd=std),
col="darkblue", lwd=2, add=TRUE, yaxt="n")
std
g = as.numeric(unlist(e3_dl[4]))
m<-160
std<-200
hist(g, density=20, breaks=5, prob=TRUE,
xlab="x-variable",
main="normal curve over histogram")
curve(dnorm(x, mean=m, sd=std),
col="darkblue", lwd=2, add=TRUE, yaxt="n")
g = as.numeric(unlist(e3_dl[4]))
m<-160
std<-300
hist(g, density=20, breaks=5, prob=TRUE,
xlab="x-variable",
main="normal curve over histogram")
curve(dnorm(x, mean=m, sd=std),
col="darkblue", lwd=2, add=TRUE, yaxt="n")
g = as.numeric(unlist(e3_dl[4]))
m<-160
std<-275
hist(g, density=20, breaks=5, prob=TRUE,
xlab="x-variable",
main="normal curve over histogram")
curve(dnorm(x, mean=m, sd=std),
col="darkblue", lwd=2, add=TRUE, yaxt="n")
g = as.numeric(unlist(e3_dl[4]))
m<-160
std<-290
hist(g, density=20, breaks=5, prob=TRUE,
xlab="x-variable",
main="normal curve over histogram")
curve(dnorm(x, mean=m, sd=std),
col="darkblue", lwd=2, add=TRUE, yaxt="n")
g = as.numeric(unlist(e3_gp[4]))
m<-160
std<-290
hist(g, density=20, breaks=5, prob=TRUE,
xlab="x-variable",
main="normal curve over histogram")
curve(dnorm(x, mean=m, sd=std),
col="darkblue", lwd=2, add=TRUE, yaxt="n")
g = as.numeric(unlist(e3_gp[4]))
m<-160
std<-290
hist(g, density=20, breaks=10, prob=TRUE,
xlab="x-variable",
main="normal curve over histogram")
curve(dnorm(x, mean=m, sd=std),
col="darkblue", lwd=2, add=TRUE, yaxt="n")
g = as.numeric(unlist(e3_gp[4]))
m<-160
std<-290
hist(g, density=20, breaks=5, prob=TRUE,
xlab="x-variable",
main="normal curve over histogram")
curve(dnorm(x, mean=m, sd=std),
col="darkblue", lwd=2, add=TRUE, yaxt="n")
g = as.numeric(unlist(e3_gp[4]))
m<-80
std<-290
hist(g, density=20, breaks=5, prob=TRUE,
xlab="x-variable",
main="normal curve over histogram")
curve(dnorm(x, mean=m, sd=std),
col="darkblue", lwd=2, add=TRUE, yaxt="n")
g = as.numeric(unlist(e3_gp[4]))
m<-80
std<-100
hist(g, density=20, breaks=5, prob=TRUE,
xlab="x-variable",
main="normal curve over histogram")
curve(dnorm(x, mean=m, sd=std),
col="darkblue", lwd=2, add=TRUE, yaxt="n")
g = as.numeric(unlist(e3_gp[4]))
m<-80
std<-80
hist(g, density=20, breaks=5, prob=TRUE,
xlab="x-variable",
main="normal curve over histogram")
curve(dnorm(x, mean=m, sd=std),
col="darkblue", lwd=2, add=TRUE, yaxt="n")
g = as.numeric(unlist(e3_gp[4]))
m<-80
std<-90
hist(g, density=20, breaks=5, prob=TRUE,
xlab="x-variable",
main="normal curve over histogram")
curve(dnorm(x, mean=m, sd=std),
col="darkblue", lwd=2, add=TRUE, yaxt="n")
mean(g)
g = as.numeric(unlist(e3_gp[4]))
m<-94
std<-90
hist(g, density=20, breaks=5, prob=TRUE,
xlab="x-variable",
main="normal curve over histogram")
curve(dnorm(x, mean=m, sd=std),
col="darkblue", lwd=2, add=TRUE, yaxt="n")
std(g)
var(g)^.5
g = as.numeric(unlist(e3_dl[4]))
m<-160
std<-290
hist(g, density=20, breaks=5, prob=TRUE,
xlab="MSE",
main="Deep Learning"), ylab = "Densidade de Probabilidade"
curve(dnorm(x, mean=m, sd=std),
col="darkblue", lwd=2, add=TRUE, yaxt="n")
g = as.numeric(unlist(e3_dl[4]))
m<-160
std<-290
hist(g, density=20, breaks=5, prob=TRUE,
xlab="MSE",
main="Deep Learning"), ylab = "Densidade de Probabilidade",
curve(dnorm(x, mean=m, sd=std),
col="darkblue", lwd=2, add=TRUE, yaxt="n")
g = as.numeric(unlist(e3_dl[4]))
m<-160
std<-290
hist(g, density=20, breaks=5, prob=TRUE,
xlab="MSE",
main="Deep Learning", ylab = "Densidade de Probabilidade",)
curve(dnorm(x, mean=m, sd=std),
col="darkblue", lwd=2, add=TRUE, yaxt="n")
g = as.numeric(unlist(e3_gp[4]))
m<-94
std<-90
hist(g, density=20, breaks=5, prob=TRUE,
xlab="x-variable",
main="normal curve over histogram", ylab = "Densidade de Probabilidade",)
curve(dnorm(x, mean=m, sd=std),
col="darkblue", lwd=2, add=TRUE, yaxt="n")
g = as.numeric(unlist(e3_dl[4]))
m<-160
std<-290
hist(g, density=20, breaks=5, prob=TRUE,
xlab="MSE",
main="Deep Learning", ylab = "Densidade de Probabilidade",)
curve(dnorm(x, mean=m, sd=std),
col="darkblue", lwd=2, add=TRUE, yaxt="n")
g = as.numeric(unlist(e3_gp[4]))
m<-94
std<-90
hist(g, density=20, breaks=5, prob=TRUE,
xlab="x-variable",
main="Genetic Programming", ylab = "Densidade de Probabilidade",)
curve(dnorm(x, mean=m, sd=std),
col="darkblue", lwd=2, add=TRUE, yaxt="n")
scatterplotMatrix
scatterplotMatrix()
library(scatterplot)
library("car")
install.packages("car")
library("car")
data <- read.csv("EXP3/DL/airfoil_self_noise.dat", quote = "", header = FALSE, sep = '\t')
View(data)
View(data)
scatterplotMatrix(data)
pairs(data)
pairs(data, dot = '.')
pairs(data, '.')
pairs(data)
library(lattice)
splom(mtcars[c(1,3,5,6)], groups=cyl, data=mtcars,
panel=panel.superpose,
key=list(title="Three Cylinder Options",
columns=3,
points=list(pch=super.sym$pch[1:3],
col=super.sym$col[1:3]),
text=list(c("4 Cylinder","6 Cylinder","8 Cylinder"))))
library(lattice)
splom(data, groups=data[3], data=mtcars,
panel=panel.superpose,
key=list(title="Three Cylinder Options",
columns=3,
points=list(pch=super.sym$pch[1:6],
col=super.sym$col[1:6]),
text=list(c("4 Cylinder","6 Cylinder","8 Cylinder"))))
library(lattice)
splom(data, groups=data[3], data=mtcars,
panel=panel.superpose,
key=list(title="Three Cylinder Options",
columns=3,
points=list(pch=super.sym$pch[1:6],
col=super.sym$col[1:6]),
))
library(lattice)
splom(data[c(1,2,3,4,5,6)], groups=data[3], data=mtcars,
panel=panel.superpose,
key=list(title="Three Cylinder Options",
columns=3,
points=list(pch=super.sym$pch[1:6],
col=super.sym$col[1:6]),
))
library(lattice)
splom(data[c(1,2,3,4,5,6)], groups=data[3], data=data,
panel=panel.superpose,
key=list(title="Three Cylinder Options",
columns=3,
points=list(pch=super.sym$pch[1:6],
col=super.sym$col[1:6]),
))
library(lattice)
splom(data[c(1,2,3,4,5,6)], groups=data[3], data=data,
panel=panel.superpose,
key=list(title="Three Cylinder Options",
columns=6,
points=list(pch=super.sym$pch[1:6],
col=super.sym$col[1:6]),
))
library(lattice)
splom(data[,c(1,2,3,4,5,6)], groups=data[,3], data=data,
panel=panel.superpose,
key=list(title="Three Cylinder Options",
columns=6,
points=list(pch=super.sym$pch[1:6],
col=super.sym$col[1:6]),
))
library(lattice)
splom(data[,c(1,2,3,4,5,6)], groups=data[,3],
panel=panel.superpose,
key=list(title="Three Cylinder Options",
columns=6,
points=list(pch=super.sym$pch[1:6],
col=super.sym$col[1:6]),
))
View(e1_dl)
boxplot(as.numeric(unlist(e1_dl[5]))~as.numeric(unlist(e1_dl[2]))*as.numeric(unlist(e1_dl[1])))
par(mfrow = c(1, 2))
boxplot(as.numeric(unlist(e1_dl[5]))~as.numeric(unlist(e1_dl[2]))*as.numeric(unlist(e1_dl[1])), main = "Amostragem com passo", ylab = "Tempo de execução (s)", xlab = "Número de amostras . Arquitetura")
boxplot(as.numeric(unlist(e1_dl[5]))~as.numeric(unlist(e1_dl[2]))*as.numeric(unlist(e1_dl[1])), main = "Amostragem com passo", ylab = "Tempo de execução (s)", xlab = "Número de amostras . Arquitetura", las = 2)
boxplot(as.numeric(unlist(e1_dla[5]))~as.numeric(unlist(e1_dla[2]))*as.numeric(unlist(e1_dla[1])), main = "Amostragem aleatória", ylab = "Tempo de execução (s)", xlab = "Número de amostras . Arquitetura", las = 2)
boxplot(as.numeric(unlist(e1_dla[5]))~as.numeric(unlist(e1_dla[2]))*as.numeric(unlist(e1_dla[1])), main = "Amostragem aleatória", ylab = "Tempo de execução (s)", xlab = "Número de amostras . Arquitetura", las = 2)
boxplot(as.numeric(unlist(e1_dl[5]))~as.numeric(unlist(e1_dl[2]))*as.numeric(unlist(e1_dl[1])), main = "Amostragem com passo", ylab = "Tempo de execução (s)", xlab = "Número de amostras . Arquitetura", las = 2)
boxplot(as.numeric(unlist(e1_dla[5]))~as.numeric(unlist(e1_dla[2]))*as.numeric(unlist(e1_dla[1])), main = "Amostragem aleatória", ylab = "Tempo de execução (s)", xlab = "Número de amostras . Arquitetura", las = 2)
boxplot(as.numeric(unlist(e1_dl[5]))~as.numeric(unlist(e1_dl[2]))*as.numeric(unlist(e1_dl[1])), main = "Amostragem com passo", ylab = "Tempo de execução (s)", xlab = "Número de amostras . Arquitetura", las = 2, ylim = c(0,3))
boxplot(as.numeric(unlist(e1_dla[5]))~as.numeric(unlist(e1_dla[2]))*as.numeric(unlist(e1_dla[1])), main = "Amostragem aleatória", ylab = "Tempo de execução (s)", xlab = "Número de amostras . Arquitetura", las = 2,ylim = c(0,3))
boxplot(as.numeric(unlist(e1_dl[5]))~as.numeric(unlist(e1_dl[2]))*as.numeric(unlist(e1_dl[1])), main = "Amostragem com passo", ylab = "Tempo de execução (s)", xlab = "Número de amostras . Arquitetura", las = 2, ylim = c(1,3))
boxplot(as.numeric(unlist(e1_dla[5]))~as.numeric(unlist(e1_dla[2]))*as.numeric(unlist(e1_dla[1])), main = "Amostragem aleatória", ylab = "Tempo de execução (s)", xlab = "Número de amostras . Arquitetura", las = 2,ylim = c(1,3))
boxplot(as.numeric(unlist(e2_dl[5]))~as.numeric(unlist(e2_dl[2]))*as.numeric(unlist(e2_dl[1])), main = "Amostragem com passo", ylab = "Tempo de execução (s)", xlab = "Número de amostras . Arquitetura", las = 2)
boxplot(as.numeric(unlist(e2_dl[5]))~as.numeric(unlist(e2_dl[2]))*as.numeric(unlist(e2_dl[1])), main = "Amostragem com passo", ylab = "Tempo de execução (s)", las = 2)
title(xlab = "Número de amostras . Arquitetura", line = 4)
boxplot(as.numeric(unlist(e2_dl[5]))~as.numeric(unlist(e2_dl[2]))*as.numeric(unlist(e2_dl[1])), main = "Amostragem com passo", ylab = "Tempo de execução (s)", las = 2)
title(xlab = "Número de amostras . Arquitetura", line = 4)
boxplot(as.numeric(unlist(e2_dla[5]))~as.numeric(unlist(e2_dla[2]))*as.numeric(unlist(e2_dla[1])), main = "Amostragem com passo", ylab = "Tempo de execução (s)", las = 2)
title(xlab = "Número de amostras . Arquitetura", line = 4)
boxplot(as.numeric(unlist(e2_dl[5]))~as.numeric(unlist(e2_dl[2]))*as.numeric(unlist(e2_dl[1])), main = "Amostragem com passo", ylab = "Tempo de execução (s)", las = 2)
title(xlab = "Número de amostras . Arquitetura", line = 4)
boxplot(as.numeric(unlist(e2_dla[5]))~as.numeric(unlist(e2_dla[2]))*as.numeric(unlist(e2_dla[1])), main = "Amostragem aleatória", ylab = "Tempo de execução (s)", las = 2)
title(xlab = "Número de amostras . Arquitetura", line = 4)
par(mfrow = c(1, 1))
boxplot(as.numeric(unlist(e2_dl[5]))~as.numeric(unlist(e2_dl[2]))*as.numeric(unlist(e2_dl[1])), main = "Deep Learning - Etapa II\nTempo de execução", ylab = "Tempo de execução (s)", las = 2)
title(xlab = "Número de amostras . Arquitetura", line = 4)
boxplot(as.numeric(unlist(e1_dl[5]))~as.numeric(unlist(e1_dl[2]))*as.numeric(unlist(e1_dl[1])), main = "Deep Learning - Etapa I\nTempo de execução", ylab = "Tempo de execução (s)", xlab = "Número de amostras . Arquitetura", las = 2, ylim = c(0,3))
boxplot(as.numeric(unlist(e1_dl[5]))~as.numeric(unlist(e1_dl[2]))*as.numeric(unlist(e1_dl[1])), main = "Deep Learning - Etapa I\nTempo de execução", ylab = "Tempo de execução (s)", xlab = "Número de amostras . Arquitetura", las = 2, ylim = c(1,3))
save.image("C:/Users/Ícaro/Dropbox/PIBIC/IC_2017/.RData")
var(as.numeric(unlist(e1_dl[4])))
var(as.numeric(unlist(e1_dla[4])))
var(as.numeric(unlist(e1_gpa[4])))
var(as.numeric(unlist(e1_gp[4])))
a <- e1_gp[-which(e1_gp[4]>10),]
var(as.numeric(unlist(e1_gp[a])))
var(as.numeric(unlist(a[4])))
var(as.numeric(unlist(e2_gp[4])))
var(as.numeric(unlist(e2_gpa[4])))
View(data)
save.image("C:/Users/Ícaro/Dropbox/PIBIC/IC_2017/.RData")
save.image("C:/Users/Ícaro/Dropbox/PIBIC/IC_2017/dados.RData")
