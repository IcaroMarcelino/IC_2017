boxplot(T~A*N, main = "Experimento 1 - Genetic Programming", xlab = "", ylab="Tempo de Execução", las =2)
title(sub="Altura Máxima de Árvore . Número de Amostras", col.sub="black")
boxplot(T~A*N, main = "Experimento 1 - Genetic Programming", xlab = "", ylab="Tempo de Execução (s)", las =2)
title(sub="Altura Máxima de Árvore . Número de Amostras", col.sub="black")
boxplot(M~A*N, main = "Experimento 1 - Genetic Programming", xlab = "", ylab="MSE", las =2)
title(sub="Altura Máxima de Árvore . Número de Amostras", col.sub="black")
boxplot(M~N*A, main = "Experimento 1 - Genetic Programming", xlab = "", ylab="MSE", las =2)
title(sub="Número de Amostras . Altura Máxima de Árvore", col.sub="black")
boxplot(T~N*A, main = "Experimento 1 - Genetic Programming", xlab = "", ylab="Tempo de Execução (s)", las =2)
title(sub="Número de Amostras . Altura Máxima de Árvore", col.sub="black")
boxplot(M~N*A, main = "Experimento 1 - Genetic Programming", xlab = "", ylab="MSE", las =2)
d = read.csv("INFO_DL_EXP1.csv", quote = "")
View(d)
A = as.numeric(unlist(d[1]))
N = as.numeric(unlist(d[2]))
= as.numeric(unlist(d[4]))
M = as.numeric(unlist(d[4]))
T = as.numeric(unlist(d[5]))
boxplot(T~N*A, main = "Experimento 1 - Genetic Programming", xlab = "", ylab="Tempo de Execução (s)", las =2)
title(sub="Número de Amostras . Arquitetura", col.sub="black")
boxplot(T~N*A, main = "Experimento 1 - Deep Learning", xlab = "", ylab="Tempo de Execução (s)", las =2)
title(sub="Número de Amostras . Arquitetura", col.sub="black")
boxplot(T~A*N, main = "Experimento 1 - Deep Learning", xlab = "", ylab="Tempo de Execução (s)", las =2)
title(sub="Arquitetura . Número de Amostras", col.sub="black")
boxplot(M~A*N, main = "Experimento 1 - Deep Learning", xlab = "", ylab="Tempo de Execução (s)", las =2)
boxplot(T~A, main = "Experimento 1 - Deep Learning", xlab = "", ylab="Tempo de Execução (s)", las =2)
boxplot(T~A, main = "Experimento 1 - Deep Learning", xlab = "Arquitetura", ylab="Tempo de Execução (s)", las =2)
boxplot(T~A, main = "Experimento 1a - Deep Learning", xlab = "Arquitetura", ylab="Tempo de Execução (s)", las =2)
boxplot(T~N, main = "Experimento 1a - Deep Learning", xlab = "Número de Amostras", ylab="Tempo de Execução (s)", las =2)
boxplot(T~M, main = "Experimento 1a - Deep Learning", xlab = "Número de Amostras", ylab="Tempo de Execução (s)", las =2)
boxplot(M~N, main = "Experimento 1a - Deep Learning", xlab = "Número de Amostras", ylab="MSE", las =2)
boxplot(M~A, main = "Experimento 1a - Deep Learning", xlab = "Arquitetura", ylab="MSE", las =2)
boxplot(M~A*N, main = "Experimento 1 - Deep Learning", xlab = "Arquitetura . Número de AMostras", ylab="MSE", las =2)
boxplot(M~A*N, main = "Experimento 1 - Deep Learning", xlab = "", ylab="MSE", las =2)
title(sub="Arquitetura . Número de Amostras", col.sub="black")
boxplot(M~N*A, main = "Experimento 1 - Deep Learning", xlab = "", ylab="MSE", las =2)
title(sub="Número de Amostras . Arquitetura", col.sub="black")
d = read.csv("INFO_DL_EXP.csv", quote = "")
A = as.numeric(unlist(d[1]))
boxplot(T~N*A, main = "Experimento 1 - Deep Learning", xlab = "", ylab="Tempo de Execução (s)", las =2)
View(d)
A = as.numeric(unlist(d[1]))
N = as.numeric(unlist(d[2]))
= as.numeric(unlist(d[4]))
M = as.numeric(unlist(d[4]))
T = as.numeric(unlist(d[5]))
boxplot(T~N*A, main = "Experimento 1 - Genetic Programming", xlab = "", ylab="Tempo de Execução (s)", las =2)
title(sub="Número de Amostras . Arquitetura", col.sub="black")
boxplot(T~N*A, main = "Experimento 1 - Deep Learning", xlab = "", ylab="Tempo de Execução (s)", las =2)
boxplot(M~N, main = "Experimento 1a - Deep Learning", xlab = "Número de Amostras", ylab="MSE", las =2)
boxplot(M~A, main = "Experimento 1a - Deep Learning", xlab = "Arquitetura", ylab="MSE", las =2)
boxplot(M~A*N, main = "Experimento 1 - Deep Learning", xlab = "", ylab="MSE", las =2)
title(sub="Arquitetura . Número de Amostras", col.sub="black")
boxplot(M~N*A, main = "Experimento 1 - Deep Learning", xlab = "", ylab="MSE", las =2)
title(sub="Número de Amostras . Arquitetura", col.sub="black")
plot(T~M)
plot(M~T)
d = read.csv("INFO_DL_EXP.csv", quote = "")
A = as.numeric(unlist(d[1]))
boxplot(T~N*A, main = "Experimento 1 - Deep Learning", xlab = "", ylab="Tempo de Execução (s)", las =2)
View(d)
A = as.numeric(unlist(d[1]))
N = as.numeric(unlist(d[2]))
= as.numeric(unlist(d[4]))
M = as.numeric(unlist(d[4]))
T = as.numeric(unlist(d[5]))
boxplot(T~N*A, main = "Experimento 1 - Genetic Programming", xlab = "", ylab="Tempo de Execução (s)", las =2)
title(sub="Número de Amostras . Arquitetura", col.sub="black")
boxplot(T~N*A, main = "Experimento 1 - Deep Learning", xlab = "", ylab="Tempo de Execução (s)", las =2)
boxplot(M~N, main = "Experimento 1a - Deep Learning", xlab = "Número de Amostras", ylab="MSE", las =2)
boxplot(M~A, main = "Experimento 1a - Deep Learning", xlab = "Arquitetura", ylab="MSE", las =2)
boxplot(M~A*N, main = "Experimento 1 - Deep Learning", xlab = "", ylab="MSE", las =2)
title(sub="Arquitetura . Número de Amostras", col.sub="black")
boxplot(M~N*A, main = "Experimento 1 - Deep Learning", xlab = "", ylab="MSE", las =2)
title(sub="Número de Amostras . Arquitetura", col.sub="black")
remove(d)
remove(y.1,y.2,y.3,y.4)
remove(p)
remove(x)
remove(d1,d2,df,dt,defmelt,dtmelt)
remove(dfmelt)
c(1..5)
c(1..5))
seq(1,10)
which(A=5)
which(A==5)
lixo = which(A==5)
A1 = A[-c(lixo)]
A = A1
remove(A1)
M = M[-c(lixo)]
N = N[-c(lixo)]
T = T[-c(lixo)]
remove(lixo)
boxplot(M~N, main = "Experimento 1a - Deep Learning", xlab = "Número de Amostras", ylab="MSE", las =2)
boxplot(M~N, main = "Experimento 1a - Deep Learning", xlab = "Número de Amostras", ylab="MSE", las =1)
boxplot(M~A, main = "Experimento 1a - Deep Learning", xlab = "Arquitetura", ylab="MSE", las =1)
boxplot(T~A, main = "Experimento 1a - Deep Learning", xlab = "Arquitetura", ylab="Tempo de Execução (s)", las =1)
boxplot(T~N, main = "Experimento 1a - Deep Learning", xlab = "Número de Amostras", ylab="Tempo de Execução (s)", las =1)
boxplot(M~N*A, main = "Experimento 1 - Deep Learning", xlab = "", ylab="MSE", las =2)
title(sub="Número de Amostras . Arquitetura", col.sub="black")
boxplot(T~N*A, main = "Experimento 1 - Genetic Programming", xlab = "", ylab="Tempo de Execução (s)", las =2)
title(sub="Número de Amostras . Arquitetura", col.sub="black")
boxplot(T~N*A, main = "Experimento 1 - Genetic Programming", xlab = "", ylab="Tempo de Execução (s)", las =2)
title(sub="Número de Amostras . Arquitetura", col.sub="black")
boxplot(T~N*A, main = "Experimento 1 - Deep Learning", xlab = "", ylab="Tempo de Execução (s)", las =2)
title(sub="Número de Amostras . Arquitetura", col.sub="black")
library(lattice)
library(lattice)
x<-seq(-500000,500000)
x<-x/10000
y<-x
z <- 2-2.1*cos(9.8*x)*sin(1.3*y)
wireframe(z ~ x*y,
xlab = "X Coordinate (feet)", ylab = "Y Coordinate (feet)",
main = "Surface elevation data",
drape = TRUE,
colorkey = TRUE,
screen = list(z = -60, x = -60)
)
wireframe(z ~ x*y,
xlab = "X Coordinate (feet)", ylab = "Y Coordinate (feet)",
main = "Surface elevation data",
drape = TRUE,
colorkey = TRUE,
screen = list(z = -60, x = -60)
)
x<-seq(-5000,5000)
x<-x/100
y<-x
z <- 2-2.1*cos(9.8*x)*sin(1.3*y)
wireframe(z ~ x*y,
xlab = "X Coordinate (feet)", ylab = "Y Coordinate (feet)",
main = "Surface elevation data",
drape = TRUE,
colorkey = TRUE,
screen = list(z = -60, x = -60)
)
x<-seq(-500,500)
x<-c(seq(-500,500))
x<-x/100
x<-seq(-500,500)
x<-x/10
y<-x
z <- 2-2.1*cos(9.8*x)*sin(1.3*y)
wireframe(z ~ x*y,
xlab = "X Coordinate (feet)", ylab = "Y Coordinate (feet)",
main = "Surface elevation data",
drape = TRUE,
colorkey = TRUE,
screen = list(z = -60, x = -60)
)
plot(x~z)
plot(x,z,lty="F7",type="l",lwd=2)
library(plotly)
plot(x,z,lty="F7",type="l",lwd=2)
plot(x,z,lty="F7",type="l",lwd=2)
library(plotly)
library(plotly)
# volcano is a numeric matrix that ships with R
p <- plot_ly(z = ~volcano) %>% add_surface()
p
a = ~volcano
library(plotly)
# volcano is a numeric matrix that ships with R
p <- plot_ly(z = ~volcano) %>% add_surface()
library(plotly)
# volcano is a numeric matrix that ships with R
p <- plot_ly(z = ~z) %>% add_surface()
p
a = volcano
View(a)
dim a
dim(a)
library(plotly)
# volcano is a numeric matrix that ships with R
p <- plot_ly(x,yz) %>% add_surface()
library(plotly)
# volcano is a numeric matrix that ships with R
p <- plot_ly(x,y,z) %>% add_surface()
library(plotly)
# volcano is a numeric matrix that ships with R
p <- plot_ly(x=x,y=y,z=z) %>% add_surface()
p
kd <- with(MASS::geyser, MASS::kde2d(duration, waiting, n = 50))
library(warp)
findFn(mesh)
library(plot3D)
install.packages("plot3D")
library(plot3D)
library(plot3D)
M <- mesh(x,y,z)
x <- y <- z <- c(-1 , 0, 1)
# 3-D mesh
(M <- mesh(x, y, z))
# calculate with 3-D mesh
V <- with (M, x/2 * sin(y) *sqrt(z+2))
# plot result
scatter3D(M$x, M$y, M$z, V, pch = "+", cex = 3, colkey = FALSE)
x <- c(-1 , 0, 1)
y <- 1 : 4
# 2-D mesh
(M <- mesh(x, y))
# calculate with this mesh
V <- with (M, x/2 * sin(y))
# same as:
V2 <- outer(x, y, FUN = function(x, y) x/2*sin(y))
x<-c(seq(-500,500))
x<-x/10
y<-x
z <- 2-2.1*cos(9.8*x)*sin(1.3*y)
M <- mesh(x,y,z)
M <- mesh(x,y)
p <- plot_ly(z = ~z) %>% add_surface()
p
as.data.frame(c(x,y,z))
a = as.data.frame(c(x,y,z))
mapply(c, x,y,z SIMPLIFY=FALSE)
a = mapply(c, x,y,z,SIMPLIFY=FALSE)
p <- plot_ly(a) %>% add_surface()
p <- plot_ly(as.dataframe(a)) %>% add_surface()
p <- plot_ly(as.data.frame(a)) %>% add_surface()
x<-c(seq(-50,50))
y<-x
z <- 2-2.1*cos(9.8*x)*sin(1.3*y)
M <- mesh(x,y,z)
library(plotly)
# volcano is a numeric matrix that ships with R
p <- plot_ly(x=x,y=y,z=z) %>% add_surface()
p
z
library(plotly)
# volcano is a numeric matrix that ships with R
p <- plot_ly(x=x,y=y,z=M$z) %>% add_surface()
p
M$z
x<-c(seq(-50,50))
y<-x
z <- 2-2.1*cos(9.8*x)*sin(1.3*y)
wireframe(z ~ x*y,
xlab = "X Coordinate (feet)", ylab = "Y Coordinate (feet)",
main = "Surface elevation data",
drape = TRUE,
colorkey = TRUE,
screen = list(z = -60, x = -60)
)
library(lattice)
library(lattice)
wireframe(z ~ x*y,
xlab = "X Coordinate (feet)", ylab = "Y Coordinate (feet)",
main = "Surface elevation data",
drape = TRUE,
colorkey = TRUE,
screen = list(z = -60, x = -60)
)
wireframe(z ~ x*y)
wireframe(z ~ x*y,
xlab = "X Coordinate (feet)", ylab = "Y Coordinate (feet)",
main = "Surface elevation data",
drape = TRUE,
colorkey = TRUE,
screen = list(z = -60, x = -60)
)
persp(x, y,
as.matrix(z), phi = 45, theta = 45,
xlab = “X Coordinate (feet)”, ylab = “Y Coordinate (feet)”,
main = “Surface elevation data”
)
persp(x, y,as.matrix(z), phi = 45, theta = 45, main = “Surface elevation data”)
persp(x, y, z=as.matrix(z), phi = 45, theta = 45, main = “Surface elevation data”)
persp(x, y, z=as.matrix(z))
persp(x, y, as.matrix(z))
require(akima) ; require(rgl)
x=runif(1000)
y=runif(1000)
z=rnorm(1000)
s=interp(x,y,z)
dim(s$z)
surface3d(s$x,s$y,s$z)
install.packages(akima)
install.packages("akima")
install.packages("rgl")
library(akima)
library(rgl)
library(rgl)
library(akima)
s=interp(x,y,z)
surface3d(s$x,s$y,s$z)
persp(x, y, as.matrix(z))
wireframe(z ~ x*y,
xlab = "X Coordinate (feet)", ylab = "Y Coordinate (feet)",
main = "Surface elevation data",
drape = TRUE,
colorkey = TRUE,
screen = list(z = -60, x = -60)
)
p <- plot_ly(x=s$x,s$y=y,z=s$z) %>% add_surface()
p <- plot_ly(x=s$x,y=s$y,z=s$z) %>% add_surface()
library(plotly)
library(plotly)
p <- plot_ly(x=s$x,y=s$y,z=s$z) %>% add_surface()
p
x<-seq(-50,50,4)
x<-x/10
y<-x
z<-(1/(1+x**(-4)))+(1/(1+y**(-4)))
s=interp(x,y,z)
p <- plot_ly(x=s$x,y=s$y,z=s$z) %>% add_surface()
p
z
plot(x~z)
p <- plot_ly(x=s$x,y=s$y,z=s$z) %>% add_surface()
o
p
x<-seq(-500,500,4)
x<-x/10o
x<-x/10o0
x<-x/100
y<-x
z<-(1/(1+x**(-4)))+(1/(1+y**(-4)))
p <- plot_ly(x=s$x,y=s$y,z=s$z) %>% add_surface()
p
surface3d(s$x,s$y,s$z)
z
max(z)
min(z)
plot(x~z)
plot(y~z)
plot(y*x~z)
plot(z~y*x~z)
plot(z~y*x)
plot(z~y*x)
plot(z~y)
surface3d(s$x,s$y,s$z)
2**4
x<-seq(-10,10,4)
x<-x/10
y<-x
z<-(1/(1+x**(-4)))+(1/(1+y**(-4)))
s=interp(x,y,z)
p <- plot_ly(x=s$x,y=s$y,z=s$z) %>% add_surface()
p
x<-seq(-50,50,4)
x<-x/10
y<-x
z<-(1/(1+x**(4)))+(1/(1+y**(4)))
s=interp(x,y,z)
p <- plot_ly(x=s$x,y=s$y,z=s$z) %>% add_surface()
p
x<-seq(-50,50,4)
x<-x/10
y<-x
z<-sin(x)*cos(y)
s=interp(x,y,z)
p <- plot_ly(x=s$x,y=s$y,z=s$z) %>% add_surface()
p
x<-seq(-50,50)
x<-x/10
y<-x
z<-sin(x)*cos(y)
s=interp(x,y,z)
p <- plot_ly(x=s$x,y=s$y,z=s$z) %>% add_surface()
p
x<-seq(-50000,50000)
x<-x/10000
y<-x
z<-sin(x)*cos(y)
s=interp(x,y,z)
p <- plot_ly(x=s$x,y=s$y,z=s$z) %>% add_surface()
p
x<-seq(-10,10,4)
x<-x/10
y<-x
z<-x*y
s=interp(x,y,z)
p <- plot_ly(x=s$x,y=s$y,z=s$z) %>% add_surface()
p
library(akima)
library(rgl)
library(plotly)
x<-seq(-10,10,4)
x<-x/10
y<-x
z<-x*y
s=interp(x,y,z)
p <- plot_ly(x=s$x,y=s$y,z=s$z) %>% add_surface()
p
min(x)
max(x)
x<-seq(-100,100,4)
x<-x/10
y<-x
z<-x*y
s=interp(x,y,z)
p <- plot_ly(x=s$x,y=s$y,z=s$z) %>% add_surface()
p
hist(T)
hist(M)
hist(M, xlab = "MSE", ylab = "Frequência")
hist(M, xlab = "MSE", ylab = "Frequência", title = "Experimento 1 - Deep Learning")
hist(M, xlab = "MSE", ylab = "Frequência")
hist(M, xlab = "MSE", ylab = "Frequência")
title("Experimento 1 - Deep Learning")
hist(M, xlab = "MSE", ylab = "Frequência", main = "Experimento 1 - Deep Learning")
read.csv("INFO_GP_EXP.csv",quote = "")
read.csv("INFO_GP_EXP1.csv",quote = "")
GP = read.csv("INFO_GP_EXP1.csv",quote = "")
View(GP)
hist(as.numeric(unlist(GP[4])), xlab = "MSE", ylab = "Frequência", main = "Experimento 1 - Genetic Programming")
setwd("C:/Users/Ícaro/Dropbox/PIBIC/IC_2017/EXP1")
gp <- read.csv("GP/INFO_GP_EXP1_final.csv", quote="")
View(gp)
gp <- read.csv("GP/INFO_GP_EXP1_final.csv", quote="", header = FALSE)
gpr <- read.csv("GP/INFO_GP_EXP1_a.csv.csv", quote="", header = FALSE)
gpr <- read.csv("GP/INFO_GP_EXP1_a.csv", quote="", header = FALSE)
gpa <- read.csv("GP/INFO_GP_EXP1_ALEA.csv", quote="", header = FALSE)
View(gpa)
View(gpr)
gpr <- gpr[-seq(1,136),]
gpr <- gpr[-which(gpr[4] == 'NaN'),]
gpr <- gpr[-which(gpr[4] == 'Inf'),]
gp <- gp[-which(gp[4] == 'Inf'),]
gp <- read.csv("GP/INFO_GP_EXP1_final.csv", quote="", header = FALSE)
gp <- gp[-which(gp[4] == 'NaN'),]
gpa <- gpa[-which(gpa[4] == 'NaN'),]
gpa <- read.csv("GP/INFO_GP_EXP1_ALEA.csv", quote="", header = FALSE)
gpa <- gpa[-which(gpa[4] == 'Inf'),]
gpa <- read.csv("GP/INFO_GP_EXP1_ALEA.csv", quote="", header = FALSE)
hist(as.numeric(unlist(gpa[4]))~as.numeric(unlist(gpa[1])))
View(gp)
View(gpa)
View(gpr)
hist(as.numeric(unlist(gpa[4]))~as.numeric(unlist(gpa[1])))
boxplot(as.numeric(unlist(gpa[4]))~as.numeric(unlist(gpa[1])))
par(mfrow = c(1, 2))
boxplot(as.numeric(unlist(gpa[4]))~as.numeric(unlist(gpa[1])))
boxplot(as.numeric(unlist(gp[4]))~as.numeric(unlist(gp[1])))
boxplot(as.numeric(unlist(gp[4]))~as.numeric(unlist(gp[1])), ylim = c(0,0.6))
boxplot(as.numeric(unlist(gp[4]))~as.numeric(unlist(gp[1])), ylim = c(0,0.4))
boxplot(as.numeric(unlist(gp[4]))~as.numeric(unlist(gp[1])), ylim = c(0,0.3))
boxplot(as.numeric(unlist(gp[4]))~as.numeric(unlist(gp[1])), ylim = c(0,0.25))
boxplot(as.numeric(unlist(gp[4]))~as.numeric(unlist(gp[1])), ylim = c(0,0.25))
boxplot(as.numeric(unlist(gpa[4]))~as.numeric(unlist(gpa[1])), ylim = c(0,0.25))
dl = read.csv("DL/INFO_DL_EXP1.csv", quote = "")
View(dl)
dl <- dl[-seq(1,256),]
View(dl)
dl <- dl[-seq(251,251),]
dl <- dl[-seq(251,251),]
da = read.csv("DL/INFO_DL_EXP1_alea.csv", quote = "")
remove da
remove(da)
dla = read.csv("DL/INFO_DL_EXP1_alea.csv", quote = "")
View(dla)
dla = read.csv("DL/INFO_DL_EXP1_alea.csv", quote = "", header = FALSE)
boxplot(as.numeric(unlist(dla[4]))~as.numeric(unlist(dla[1])))
boxplot(as.numeric(unlist(dl[4]))~as.numeric(unlist(dl[1])))
boxplot(as.numeric(unlist(dl[4]))~as.numeric(unlist(dl[1])), ylim = c(0,0.6))
boxplot(as.numeric(unlist(dla[4]))~as.numeric(unlist(dla[1])), ylim = c(0,0.6))
da <- dla[-which(dla[2]==150)]
da <- dla[-which(dla[2]==150),]
boxplot(as.numeric(unlist(dl[4]))~as.numeric(unlist(dl[1])), ylim = c(0,0.6))
boxplot(as.numeric(unlist(da[4]))~as.numeric(unlist(da[1])), ylim = c(0,0.6))
boxplot(as.numeric(unlist(da[4]))~as.numeric(unlist(da[1])), ylim = c(0,0.6))
boxplot(as.numeric(unlist(dla[4]))~as.numeric(unlist(dla[1])), ylim = c(0,0.6))
boxplot(as.numeric(unlist(dla[4]))~as.numeric(unlist(dla[1])*as.numeric(unlist(dla[2])), ylim = c(0,0.6))
.
boxplot(as.numeric(unlist(dla[4]))~as.numeric(unlist(dla[1]))*as.numeric(unlist(dla[1])), ylim = c(0,0.6))
boxplot(as.numeric(unlist(dla[4]))~as.numeric(unlist(dla[1]))*as.numeric(unlist(dla[2])), ylim = c(0,0.6))
boxplot(as.numeric(unlist(da[4]))~as.numeric(unlist(da[1]))*as.numeric(unlist(da[2])), ylim = c(0,0.6))
boxplot(as.numeric(unlist(dla[4]))~as.numeric(unlist(dla[1]))*as.numeric(unlist(dla[2])), ylim = c(0,0.6))
boxplot(as.numeric(unlist(da[4]))~as.numeric(unlist(da[1]))*as.numeric(unlist(da[2])), ylim = c(0,0.6))
boxplot(as.numeric(unlist(dl[4]))~as.numeric(unlist(dl[1]))*as.numeric(unlist(dl[2])), ylim = c(0,0.6))
boxplot(as.numeric(unlist(dl[4]))~as.numeric(unlist(dl[1]))*as.numeric(unlist(dl[2])), ylim = c(0,0.8))
boxplot(as.numeric(unlist(dl[4]))~as.numeric(unlist(dl[1]))*as.numeric(unlist(dl[2])), ylim = c(0,0.7))
boxplot(as.numeric(unlist(dl[4]))~as.numeric(unlist(dl[1]))*as.numeric(unlist(dl[2])), ylim = c(0,0.7))
boxplot(as.numeric(unlist(da[4]))~as.numeric(unlist(da[1]))*as.numeric(unlist(da[2])), ylim = c(0,0.7))
boxplot(as.numeric(unlist(da[4]))~as.numeric(unlist(da[1]))*as.numeric(unlist(da[2])), ylim = c(0,0.7), main = "Amostragem Aleatória",las =2)
boxplot(as.numeric(unlist(dl[4]))~as.numeric(unlist(dl[1]))*as.numeric(unlist(dl[2])), ylim = c(0,0.7), main = "Amostragem com Passo",las =2)
boxplot(as.numeric(unlist(da[4]))~as.numeric(unlist(da[1]))*as.numeric(unlist(da[2])), ylim = c(0,0.7), main = "Amostragem Aleatória",las =2, ylab = "MSE", XLAB = "Arquitetura . Número de Amostras")
boxplot(as.numeric(unlist(da[4]))~as.numeric(unlist(da[1]))*as.numeric(unlist(da[2])), ylim = c(0,0.7), main = "Amostragem Aleatória",las =2, ylab = "MSE", xlab = "Arquitetura . Número de Amostras")
boxplot(as.numeric(unlist(da[4]))~as.numeric(unlist(da[2]))*as.numeric(unlist(da[1])), ylim = c(0,0.7), main = "Amostragem Aleatória",las =2, ylab = "MSE", xlab = "Arquitetura . Número de Amostras")
boxplot(as.numeric(unlist(da[4]))~as.numeric(unlist(da[2]))*as.numeric(unlist(da[1])), ylim = c(0,0.7), main = "Amostragem Aleatória",las =2, ylab = "MSE", xlab = "Número de Amostras . Arquitetura")
boxplot(as.numeric(unlist(dl[4]))~as.numeric(unlist(dl[2]))*as.numeric(unlist(dl[1])), ylim = c(0,0.7), main = "Amostragem com Passo",las =2, ylab = "MSE", xlab = "Número de Amostras . Arquitetura")
boxplot(as.numeric(unlist(da[4]))~as.numeric(unlist(da[2]))*as.numeric(unlist(da[1])), ylim = c(0,0.7), main = "Amostragem Aleatória",las =2, ylab = "MSE", xlab = "Número de Amostras . Arquitetura")
boxplot(as.numeric(unlist(da[4]))~as.numeric(unlist(da[2]))*as.numeric(unlist(da[1])), ylim = c(0,0.7), main = "Amostragem Aleatória",las =2, ylab = "MSE", xlab = "Arquitetura . Número de Amostras")
boxplot(as.numeric(unlist(dl[4]))~as.numeric(unlist(dl[2]))*as.numeric(unlist(dl[1])), ylim = c(0,0.7), main = "Amostragem com Passo",las =2, ylab = "MSE", xlab = "Arquitetura . Número de Amostras")
boxplot(as.numeric(unlist(dl[4]))~as.numeric(unlist(dl[2]))*as.numeric(unlist(dl[1])), ylim = c(0,0.7), main = "Amostragem com Passo",las =2, ylab = "MSE", xlab = "Número de Amostras . Arquitetura")
boxplot(as.numeric(unlist(da[4]))~as.numeric(unlist(da[2]))*as.numeric(unlist(da[1])), ylim = c(0,0.7), main = "Amostragem Aleatória",las =2, ylab = "MSE", xlab = "Número de Amostras . Arquitetura")
boxplot(as.numeric(unlist(gp[4]))~as.numeric(unlist(gp[2]))*as.numeric(unlist(gp[1])), ylim = c(0,0.7), main = "Amostragem Aleatória",las =2, ylab = "MSE", xlab = "Número de Amostras . Arquitetura")
boxplot(as.numeric(unlist(gp[4]))~as.numeric(unlist(gp[2]))*as.numeric(unlist(gp[1])), ylim = c(0,0.7), main = "Amostragem Aleatória",las =2, ylab = "MSE", xlab = "Número de Amostras . Tamanho Máximo de Árvore")
boxplot(as.numeric(unlist(gp[4]))~as.numeric(unlist(gp[2]))*as.numeric(unlist(gp[1])), ylim = c(0,0.3), main = "Amostragem Aleatória",las =2, ylab = "MSE", xlab = "Número de Amostras . Tamanho Máximo de Árvore")
boxplot(as.numeric(unlist(gp[4]))~as.numeric(unlist(gp[2]))*as.numeric(unlist(gp[1])), ylim = c(0,0.25), main = "Amostragem Aleatória",las =2, ylab = "MSE", xlab = "Número de Amostras . Tamanho Máximo de Árvore")
boxplot(as.numeric(unlist(gp[4]))~as.numeric(unlist(gp[1]))*as.numeric(unlist(gp[2])), ylim = c(0,0.25), main = "Amostragem Aleatória",las =2, ylab = "MSE", xlab = "Número de Amostras . Tamanho Máximo de Árvore")
boxplot(as.numeric(unlist(gp[4]))~as.numeric(unlist(gp[2]))*as.numeric(unlist(gp[1])), ylim = c(0,0.25), main = "Amostragem Aleatória",las =2, ylab = "MSE", xlab = "Número de Amostras . Tamanho Máximo de Árvore")
boxplot(as.numeric(unlist(gpa[4]))~as.numeric(unlist(gpa[2]))*as.numeric(unlist(gpa[1])), ylim = c(0,0.25), main = "Amostragem Aleatória",las =2, ylab = "MSE", xlab = "Número de Amostras . Tamanho Máximo de Árvore")
boxplot(as.numeric(unlist(gpa[4]))~as.numeric(unlist(gpa[2]))*as.numeric(unlist(gpa[1])), ylim = c(0,0.25), main = "Amostragem Aleatória",las =2, ylab = "MSE", xlab = "Número de Amostras . Tamanho Máximo de Árvore")
boxplot(as.numeric(unlist(gpa[4]))~as.numeric(unlist(gpa[2]))*as.numeric(unlist(gpa[1])), ylim = c(0,0.25), main = "Amostragem Aleatória",las =2, ylab = "MSE", xlab = "Número de Amostras . Tamanho Máximo de Árvore")
boxplot(as.numeric(unlist(gp[4]))~as.numeric(unlist(gp[2]))*as.numeric(unlist(gp[1])), ylim = c(0,0.25), main = "Amostragem Aleatória",las =2, ylab = "MSE", xlab = "Número de Amostras . Tamanho Máximo de Árvore")
boxplot(as.numeric(unlist(gp[4]))~as.numeric(unlist(gp[2]))*as.numeric(unlist(gp[1])), ylim = c(0,0.25), main = "Amostragem com Passo",las =2, ylab = "MSE", xlab = "Número de Amostras . Tamanho Máximo de Árvore")
boxplot(as.numeric(unlist(gpa[4]))~as.numeric(unlist(gpa[2]))*as.numeric(unlist(gpa[1])), ylim = c(0,0.25), main = "Amostragem Aleatória",las =2, ylab = "MSE", xlab = "Número de Amostras . Tamanho Máximo de Árvore")
boxplot(as.numeric(unlist(gp[4]))~as.numeric(unlist(gp[2]))*as.numeric(unlist(gp[1])), ylim = c(0,0.25), main = "Amostragem com Passo",las =2, ylab = "MSE")
title(xlab = "Número de Amostras . Tamanho Máximo de Árvore", line = -4)
title(xlab = "Número de Amostras . Tamanho Máximo de Árvore", line = -8)
title(xlab = "Número de Amostras . Tamanho Máximo de Árvore", line = -1)
title(xlab = "Número de Amostras . Tamanho Máximo de Árvore", line = 1)
title(xlab = "Número de Amostras . Tamanho Máximo de Árvore", line = 4)
boxplot(as.numeric(unlist(gp[4]))~as.numeric(unlist(gp[2]))*as.numeric(unlist(gp[1])), ylim = c(0,0.25), main = "Amostragem com Passo",las =2, ylab = "MSE")
boxplot(as.numeric(unlist(gp[4]))~as.numeric(unlist(gp[2]))*as.numeric(unlist(gp[1])), ylim = c(0,0.25), main = "Amostragem com Passo",las =2, ylab = "MSE")
title(xlab = "Número de Amostras . Tamanho Máximo de Árvore", line = 4)
boxplot(as.numeric(unlist(gpa[4]))~as.numeric(unlist(gpa[2]))*as.numeric(unlist(gpa[1])), ylim = c(0,0.25), main = "Amostragem Aleatória",las =2, ylab = "MSE")
title(xlab = "Número de Amostras . Tamanho Máximo de Árvore", line = 4)
